KDE HTML Widget
---------------

This is the alpha version 0.5.2

Developers
----------

The first version was written by

Torben Weis <weis@stud.uni-frankfurt.de>

It was extended by

Josip A. Gracin <grac@fly.cc.fer.hr>

and

Martin Jones <mjones@kde.org>


INT32 PROBLEM
-------------

Both Qt and libjpeg define INT32, unfortunately, the definitions are
not compatible.

//Quick hack fix:
//edit jmorecfg.h (one of the jpeg library headers), change INT32 to int.

These problems should now be fixed (included image stuff from kview-0.7).


Libraries Required
------------------

Format: GIF
Library(version): giflib, compiled to shared lib.
Where: http://www.ccil.org/~esr/home.html

Format: JPEG
Library: libgr (built with 2.0.9, IJG JPEG v5 or later will do)
Where: sunsite


CHANGES
-------

Version 0.2a - Torben

 I implemented <a name="#anchor">. Since the widget may scroll automatically
 if the user selects an anchor, you must connect the signals

  scrollVert();
  scrollHorz();

  Example implementation:
	void MyHTMLParentWidget::slotScrollVert( int _y )
	{
	    vert->setValue( _y );
	}


 When the user presses the mouse button over an URL, the signal
 URLSelected is emitted. See the header files for details and
 documentation. When the URL transmitted by this signal is only
 an anchor in the actual document, use only 'gotoAnchor' to
 view the anchor ( anchor <=> <a name="Intro"> ).
 MARTIN: Some of your code has made its way in the widget, for
 example the URLSelected signal. You dont need your own HTML
 class any more I think.

 When loading a new HTML URL with a ref., you must use
 gotoAnchor( ref ), to display the referenced section.
 For example for the URL file:/home/html/test.html#myref
 should cause a call like
 
	gotoAnchor( "myref" );

 To avoid flickering between loading a new file and scrolling
 to the anchor, you can use code like this:

	QString ref="";

	... set 'ref' to whatever ...

	view->parse();
	if ( view->docHeight() > view->height() )
		vert->setRange( 0, view->docHeight() - view->height() );
	else
		vert->setRange( 0, 0 );
	
	if ( ref.data()[0] != 0 )
	{
	    if ( !view->gotoAnchor( ref.data() ) )
		vert->setValue( 0 );
	}
	else
	    vert->setValue( 0 );
	view->repaint();

 The above is interesting for "file:/usr/local/doc/text.html#Intro" for
 example.

 Support for JPEG/Gif has been added by Josip.

 Works with quoted hrefs now.

 The widgets supports drags. Every <a href...> can be dragged. To override
 this behavior, you must overload
	
	dndMouseMoveEvent( QMouseEvent * );

 Dont forget to change the definition of KHTMLW_PICS_PATH in html.h. This path
 references an icon that is used for drags.
 Only complete URLs can be dragged. For example <a href="classes.html"> will
 lead into problems because the data of the drag is "classes.html" which does
 not mean very much. When KURL is completed, the HTMLWidget will complete the
 URL itself.  Until then you must live with this bug, sorry :-(


Version 0.3a - Torben

 The event handling changed a little bit.
 
 Support for drag and drop.

 Some bugs fixed

 Needs libkde-0.52 or greater right now. Uses KURL.

 For an example of how to use the widget see kfm-0.42 or greater 
 or kdehelp ( a version greate than 0.3 ).

 You may ( but you must not ) set -DHAVE_LIBGIF and -DHAVE_JPEG to include
 support for such images formats.


Version 0.4 - Martin

 HTML is now parsed in the background.  You should connect documentChanged()
 to a function that updates scroll bars.  THERE IS NO NEED TO CALL REPAINT()
 ANYMORE unless you explicitly wish to force a repaint.

 The default background color is now lightGray.  Use <body bgcolor=#XXXXXX>
 to set the background color.  Background pixmap implemented.

 setDefaultFontBase() sets the default font size.

 Reorganised parser and split into more files.  Compiles as a library.

 Added basic support for lists, glossaries, <hr> and lots more.

 Horizontal Scrolling.


Version 0.41 - Torben

 Inserted some debug code. Left it there to find bug in kdehelp. Sometimes Qt
 complains about painter.begin() and painter.end() problems. Delete the printf
 stuff if the debug thing is no longer needed.

 Changed the 'getSelected' function. It uses QStrList to transmit multiple
 URLs instead of space separated solution.

 Some minor bug fixes.


Version 0.4.5 - Martin

 Bug (see above) fixed and printfs removed

 Tables (how much fun do you think this was?)

 minor bug fixes, and more mark-ups implemented.

 Added onURL() signal which is emitted as links are passed over.
 Added setURLCursor() to set the cursor to use when cursor in on a URL.


Version 0.4.7 - Torben

 Added supportz for delayed loading of images. The widget emits the signal
 'imageRequest' to tell its owner that it needs data from the net. The widget
 does NOT load the stuff.
 The owner must signal the widget if the images arrived. The widget will
 display the image if the <img width=.. height=... > was given. If width or
 height is missing the widget weits until all images arrived and parses the
 HTML code again. There are several new functions/slots/signals dealing with
 this. 

 KFM implements a cache class that caches images and HTML pages. The widget
 may expect that images arrive before the 'emit imageRequest' call returns.
 In this case the image was already in the cache. This is the best case since
 parsing continous like usual in this case. This means you can call the slot
 'slotImageLoaded' of the widget if you get the signal 'imageRequest'. Wait
 for kfm-0.5.3 to see how this works.

 Added 2 parameters to begin. They allow the owner to tell the widget about the
 position of the upper left corner. If KFM deletes files I don't want to see
 the top of the HTML page after updating the display. Thats what this is for.


Version 0.4.9 - Martin

 Changes to background parsing stuff
 minor bug fixes


Version 0.5.0 - Torben

 Changes to the handling of baseURL and changes in the <grid> tag


Version 0.5.1 - Martin

 Forms implemented, though not complete.
 Fixed bug which caused segv when </ul>, </dl>, etc. was omitted
 

Version 0.5.2 - Martin

 Spent some quality time with the profiler - now at least twice as fast
 for large HTML documents (qwidget.html is a good test).

Last change
9.4.97 Martin Jones

