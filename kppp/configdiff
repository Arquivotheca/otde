diff -ur kppp-0.5.9/kppp/main.cpp configkppp/kppp/main.cpp
--- kppp-0.5.9/kppp/main.cpp	Fri Oct 31 03:33:55 1997
+++ configkppp/kppp/main.cpp	Wed Nov 19 18:55:35 1997
@@ -264,6 +264,8 @@
 XPPPWidget::XPPPWidget( QWidget *parent, const char *name )
   : QWidget(parent, name){
 
+  gpppdata.load(app);
+
   connected = false;
 
   connectto_c = new QComboBox(true,this, "connectto_c");
diff -ur kppp-0.5.9/kppp/main.h configkppp/kppp/main.h
--- kppp-0.5.9/kppp/main.h	Sun Jul 13 08:21:29 1997
+++ configkppp/kppp/main.h	Wed Nov 19 18:52:38 1997
@@ -56,6 +56,7 @@
 #include <qchkbox.h>
 
 #include <kapp.h>
+#include <kconfig.h>
 
 #include "accounting.h"
 
diff -ur kppp-0.5.9/kppp/pppdata.cpp configkppp/kppp/pppdata.cpp
--- kppp-0.5.9/kppp/pppdata.cpp	Thu Oct 16 02:47:22 1997
+++ configkppp/kppp/pppdata.cpp	Wed Nov 19 19:24:23 1997
@@ -40,122 +40,192 @@
     p_gd[i] = '\0';
 
 
-  //initalize varibles
+  //initalize variables
   highcount = -1;      // start out with no entries
   caccount = -1;       // set the current account index also
   pppdprocessid = -1;  // process ID of the child pppd daemon
 
-
-  //try to load the kppprc file
-  //if not, then set some defaults
-  if(!load()) {
-    strcpy(gd.pppdpath, "/usr/sbin/pppd");
-    strcpy(gd.logviewer, "/usr/local/kde/bin/kedit");
-    strcpy(gd.enter, "CR/LF");
-
-    strcpy(gd.pppdtimeout, PPPD_TIMEOUT);
-    strcpy(gd.busywait, BUSY_WAIT);
-
-    strcpy(gd.modemlockfile, MODEM_LOCK_FILE);
-    strcpy(gd.modemdevice, "/dev/modem");
-    strcpy(gd.flowcontrol, "CRTSCTS");
-    strcpy(gd.modemtimeout, MODEM_TIMEOUT);
-
-    strcpy(gd.modeminitstr, "ATZ");
-    strcpy(gd.initresp, "OK");
-
-    strcpy(gd.modemdialstr, "ATDT");
-    strcpy(gd.connectresp, "CONNECT");
-    strcpy(gd.busyresp, "BUSY");
-    strcpy(gd.nocarrierresp, "NO CARRIER");
-    strcpy(gd.nodialtoneresp, "NO DIALTONE");
-
-    strcpy(gd.modemhangupstr, "+++ATH");
-    strcpy(gd.hangupresp, "OK");
-
-    strcpy(gd.modemanswerstr, "ATA");
-    strcpy(gd.ringresp, "RING");
-    strcpy(gd.answerresp, "CONNECT");
-
-    strcpy(gd.show_clock_on_caption, "CAPTIONS_ON");
-    strcpy(gd.show_log_window,"SHOW_LOG_WINDOW_OFF");
-    strcpy(gd.automatic_redial,"AUTOMATIC_REDIAL_OFF");
-    strcpy(gd.disconnect_on_xserver_exit,"DISC_ON_XSERV_ON");
-  }
 }
 
+//
+// load data from configuration file 
+//
+
+void PPPData::load(const KApplication* a) {
+
+  QString countstr;
+  QStrList dnslist, scriptcomlist, scriptarglist, pppdArgumentlist;
+  int count;
+
+  config = a->getConfig();
+
+  config->setGroup(GENERAL_GRP);
+  setDefaultAccount(config->readEntry(DEFAULTACCOUNT_KEY, ""));
+  setpppdPath(config->readEntry(PPPDPATH_KEY, "/usr/sbin/pppd"));
+  setlogViewer(config->readEntry(LOGVIEWER_KEY, "/usr/local/kde/bin/kedit"));
+  setpppdTimeout(config->readEntry(PPPDTIMEOUT_KEY, PPPD_TIMEOUT));
+  set_show_clock_on_caption(config->readNumEntry(SHOWCLOCK_KEY, TRUE));
+  set_show_log_window(config->readNumEntry(SHOWLOGWIN_KEY, FALSE));
+  set_automatic_redial(config->readNumEntry(AUTOREDIAL_KEY, FALSE));
+  set_xserver_exit_disconnect(config->readNumEntry(DISCONNECT_KEY, TRUE));
+  count =  config->readNumEntry(NUMACCOUNTS_KEY, -1);  
+
+  config->setGroup(MODEM_GRP);
+  setModemDevice(config->readEntry(MODEMDEV_KEY, "/dev/modem"));
+  setModemLockFile(config->readEntry(LOCKFILE_KEY, MODEM_LOCK_FILE));
+  setFlowcontrol(config->readEntry(FLOWCONTROL_KEY, "CRTSCTS"));
+  setModemTimeout(config->readEntry(TIMEOUT_KEY, MODEM_TIMEOUT));
+  setbusyWait(config->readEntry(BUSYWAIT_KEY, BUSY_WAIT));
+
+  setModemInitStr(config->readEntry(INITSTR_KEY, "ATZ"));
+  setModemInitResp(config->readEntry(INITRESP_KEY, "OK"));
+  setModemDialStr(config->readEntry(DIALSTR_KEY, "ATDT"));
+  setModemConnectResp(config->readEntry(CONNECTRESP_KEY, "CONNECT"));
+  setModemBusyResp(config->readEntry(BUSYRESP_KEY, "BUSY"));
+  setModemNoCarrierResp(config->readEntry(NOCARRIERRESP_KEY, "NO CARRIER"));
+  setModemNoDialtoneResp(config->readEntry(NODIALTONERESP_KEY,
+					    "NO DIALTONE"));
+  setModemHangupStr(config->readEntry(HANGUPSTR_KEY, "+++ATH"));
+  setModemHangupResp(config->readEntry(HANGUPRESP_KEY, "OK"));
+  setModemAnswerStr(config->readEntry(ANSWERSTR_KEY, "ATA"));
+  setModemRingResp(config->readEntry(RINGRESP_KEY , "RING"));
+  setModemAnswerResp(config->readEntry(ANSWERRESP_KEY, "CONNECT"));
+  setEnter(config->readEntry(ENTER_KEY, "CR/LF"));
+
+  // accounts
+  for(int i = 0; i < count; i++) {
+    caccount = 0;
+    countstr.setNum(i+1);
+    newaccount();
+    
+    config->setGroup(ACCOUNT_GRP + countstr);
+    setAccname(config->readEntry(NAME_KEY));
+    setPhonenumber(config->readEntry(PHONENUMBER_KEY));
+    setSpeed(config->readEntry(SPEED_KEY));
+    setCommand(config->readEntry(COMMAND_KEY));
+    setIpaddr(config->readEntry(IPADDR_KEY));
+    setSubnetmask(config->readEntry(SUBNETMASK_KEY));
+    setAcctEnabled(config->readEntry(ACCTENABLED_KEY));
+    setAccountingFile(config->readEntry(ACCTFILE_KEY));
+    setAutoname(config->readEntry(AUTONAME_KEY));
+    setGateway(config->readEntry(GATEWAY_KEY));
+    setDefaultroute(config->readEntry(DEFAULTROUTE_KEY));
+    setDomain(config->readEntry(DOMAIN_KEY));
+
+    // read lists
+    config->readListEntry(DNS_KEY, dnslist);
+    config->readListEntry(SCRIPTCOM_KEY, scriptcomlist);
+    config->readListEntry(SCRIPTARG_KEY, scriptarglist);
+    config->readListEntry(PPPDARG_KEY, pppdArgumentlist);
+
+    // analyse lists
+    for(uint j = 0; j < MAX_DNS_ENTRIES &&
+	  j < dnslist.count(); j++) {
+      setDns(j, dnslist.at(j));
+    }
+    for(uint j=0; j < MAX_SCRIPT_ENTRIES &&
+	  j < scriptcomlist.count(); j++) {
+      setScriptType(j, scriptcomlist.at(j)); 
+      setScript(j, scriptarglist.at(j));
+    }
+    for(uint j=0; j < MAX_PPPD_ARGUMENTS && 
+	  j < pppdArgumentlist.count (); j++) {
+      setpppdArgument(j, pppdArgumentlist.at(j));
+    }
+  }
 
-void PPPData::save() {
-  int fd;
-
-  //get the home directory of the user
-  struct passwd *pw;
-  pw = getpwuid(getuid());
-
-  char xppprc[255];
-  strcpy(xppprc, pw->pw_dir);
-  strcat(xppprc, "/");
-  strcat(xppprc, KPPPDATA_FILE);
-  //printf("saving to %s\n",xppprc);
-
-  //write file
-  if((fd = open(xppprc, O_WRONLY|O_CREAT, 0600)) >= 0) {
-    write(fd, (char*)&gd, sizeof(gendata));
-
-    for(int i=0; i < MAX_ACCOUNTS; i++)
-      write(fd, (char*)&ad[i], sizeof(accdata));
-
-    close(fd);
-    chown(xppprc,getuid(),getgid());
-    chmod(xppprc,S_IRUSR | S_IWUSR );
+  if(highcount >= 0) {
+    if(strcmp(gd.defaultaccount, "") == 0) {
+      setAccountbyIndex(0);
+      setDefaultAccount(accname());
+    }
   }
 }
 
+//
+// save configuration data
+//
 
-bool PPPData::load() {
-  int fd;
-
-  //get the home directory of the user
-  struct passwd *pw;
-  pw = getpwuid(getuid());
-
-  char xppprc[255];
-  strcpy(xppprc, pw->pw_dir);
-  strcat(xppprc, "/");
-  strcat(xppprc, KPPPDATA_FILE);
-
-
-  if((fd = open(xppprc, O_RDONLY)) >= 0) {
-    read(fd, (char*)&gd, sizeof(gendata));
+void PPPData::save() {
+  QString countstr;
+  QStrList dnslist, scriptcomlist, scriptarglist, pppdArgumentlist;
 
-    for(int i=0; i < MAX_ACCOUNTS; i++) {
-      read(fd, (char*)&ad[i], sizeof(accdata));
-    
-      if(strncmp(ad[i].accname, "", ACCNAME_SIZE) != 0){
-	highcount = i;
-	caccount = 0;
-      }
+  config->setGroup(GENERAL_GRP);
+  config->writeEntry(DEFAULTACCOUNT_KEY, defaultAccount());
+  config->writeEntry(PPPDPATH_KEY, pppdPath());
+  config->writeEntry(LOGVIEWER_KEY, logViewer());
+  config->writeEntry(PPPDTIMEOUT_KEY, pppdTimeout());
+  config->writeEntry(SHOWCLOCK_KEY, get_show_clock_on_caption());
+  config->writeEntry(SHOWLOGWIN_KEY, get_show_log_window());
+  config->writeEntry(AUTOREDIAL_KEY, get_automatic_redial());
+  config->writeEntry(DISCONNECT_KEY, get_xserver_exit_disconnect());
+  config->writeEntry(NUMACCOUNTS_KEY, count());
+
+  config->setGroup(MODEM_GRP);
+
+  config->writeEntry(MODEMDEV_KEY, modemDevice());
+  config->writeEntry(LOCKFILE_KEY, modemLockFile());
+  config->writeEntry(FLOWCONTROL_KEY, flowcontrol());
+  config->writeEntry(TIMEOUT_KEY, modemTimeout());
+  config->writeEntry(BUSYWAIT_KEY, busyWait());
+  config->writeEntry(INITSTR_KEY, modemInitStr());
+  config->writeEntry(INITRESP_KEY, modemInitResp());
+  config->writeEntry(DIALSTR_KEY, modemDialStr());
+  config->writeEntry(CONNECTRESP_KEY, modemConnectResp());
+  config->writeEntry(BUSYRESP_KEY, modemBusyResp());
+  config->writeEntry(NOCARRIERRESP_KEY, modemNoCarrierResp());
+  config->writeEntry(NODIALTONERESP_KEY, modemNoDialtoneResp());
+  config->writeEntry(HANGUPSTR_KEY, modemHangupStr());
+  config->writeEntry(HANGUPRESP_KEY, modemHangupResp());
+  config->writeEntry(ANSWERSTR_KEY, modemAnswerStr());
+  config->writeEntry(RINGRESP_KEY, modemRingResp());
+  config->writeEntry(ANSWERRESP_KEY, modemAnswerResp());
+  config->writeEntry(ENTER_KEY, enter());
+
+  // accounts
+  for(int i = 0; i < count(); i++) {
+    countstr.setNum(i+1);
+    setAccountbyIndex(i);
+    // fill lists
+    dnslist.clear();
+    scriptcomlist.clear();
+    scriptarglist.clear();
+    pppdArgumentlist.clear();
+    for(int j = 0; j <= MAX_DNS_ENTRIES && 
+	  strcmp(dns(j), "") != 0; j++) {
+      dnslist.append(dns(j));
     }
-
-    //set the current account index to the default account
-    //if there is no default account, then make the first account the
-    //default
-
-    if(highcount >= 0) {
-      if(strcmp(gd.defaultaccount, "") == 0) {
-	setAccountbyIndex(0);
-	setDefaultAccount(accname());
-      }
+    for(int j=0; strcmp(scriptType(j), "") != 0 &&
+	   j <= MAX_SCRIPT_ENTRIES-1; j++) {
+      scriptcomlist.append(scriptType(j));
+      scriptarglist.append(script(j));
     }
-
-    close(fd);
-    return true;
+    for(int j=0; strcmp(pppdArgument(j), "") != 0 &&
+	j <= MAX_PPPD_ARGUMENTS+5; j++) {
+      pppdArgumentlist.append(pppdArgument(j));
   }
-  else {
-    return false;
+
+    config->setGroup(ACCOUNT_GRP + countstr);
+    config->writeEntry(NAME_KEY, accname());
+    config->writeEntry(PHONENUMBER_KEY, phonenumber());
+    config->writeEntry(SPEED_KEY, speed());
+    config->writeEntry(COMMAND_KEY, command());
+    config->writeEntry(IPADDR_KEY, ipaddr());
+    config->writeEntry(SUBNETMASK_KEY, subnetmask());
+    config->writeEntry(ACCTENABLED_KEY, AcctEnabled());
+    config->writeEntry(ACCTFILE_KEY, accountingFile());
+    config->writeEntry(AUTONAME_KEY, (int) autoname());
+    config->writeEntry(GATEWAY_KEY, gateway());
+    config->writeEntry(DEFAULTROUTE_KEY, (int) defaultroute());
+    config->writeEntry(DOMAIN_KEY, domain());
+    // write lists
+    config->writeEntry(DNS_KEY, dnslist);
+    config->writeEntry(SCRIPTCOM_KEY, scriptcomlist);
+    config->writeEntry(SCRIPTARG_KEY, scriptarglist);
+    config->writeEntry(PPPDARG_KEY, pppdArgumentlist);
   }
+  config->sync();
 }
-
 
 //
 // functions to set/return general information
diff -ur kppp-0.5.9/kppp/pppdata.h configkppp/kppp/pppdata.h
--- kppp-0.5.9/kppp/pppdata.h	Thu Oct 16 02:47:22 1997
+++ configkppp/kppp/pppdata.h	Wed Nov 19 19:15:47 1997
@@ -29,6 +29,7 @@
 #ifndef _PPPDATA_H_
 #define _PPPDATA_H_
 
+#include <kapp.h>
 #include <qstring.h>
 #include <string.h>
 #include <sys/types.h>
@@ -39,7 +40,6 @@
 
 #include "config.h"
 
-
 // Define sizes for the data structures.
 // Warning!  Do not change these unless you are I and you remember 
 // the other things they effect.
@@ -67,6 +67,64 @@
 #define ACCOUNTING_SIZE	200
 #define BOOLEAN_SIZE 6
 
+//
+// keys for config file
+//
+
+// groups
+#define GENERAL_GRP        "General"
+#define MODEM_GRP          "Modem"
+#define ACCOUNT_GRP        "Account"
+
+// general
+#define DEFAULTACCOUNT_KEY "DefaultAccount"
+#define PPPDPATH_KEY       "pppdPath"
+#define LOGVIEWER_KEY      "LogViewer"
+#define PPPDTIMEOUT_KEY    "pppdTimeout"
+#define SHOWCLOCK_KEY      "ShowClock"
+#define SHOWLOGWIN_KEY     "ShowLogWindow"
+#define AUTOREDIAL_KEY     "AutomaticRedial"
+#define DISCONNECT_KEY     "DisconnectOnXServerExit"
+#define NUMACCOUNTS_KEY    "NumberOfAccounts"
+
+// modem
+#define MODEMDEV_KEY       "Device"
+#define LOCKFILE_KEY       "Lockfile"
+#define FLOWCONTROL_KEY    "FlowControl"
+#define TIMEOUT_KEY        "Timeout"
+#define BUSYWAIT_KEY       "BusyWait"
+#define INITSTR_KEY        "InitString"
+#define INITRESP_KEY       "InitResponse"
+#define DIALSTR_KEY        "DialString"
+#define CONNECTRESP_KEY    "ConnectResponse"
+#define BUSYRESP_KEY       "BusyResponse"
+#define NOCARRIERRESP_KEY  "NoCarrierResponse"
+#define NODIALTONERESP_KEY "NoDialToneResp"
+#define HANGUPSTR_KEY      "HangupString"
+#define HANGUPRESP_KEY     "HangUpResponse"
+#define ANSWERSTR_KEY      "AnswerString"
+#define RINGRESP_KEY       "RingResponse"
+#define ANSWERRESP_KEY     "AnswerResponse"
+#define ENTER_KEY          "Enter"
+
+// account
+#define NAME_KEY           "Name"
+#define PHONENUMBER_KEY    "Phonenumber"
+#define SPEED_KEY          "Speed"
+#define COMMAND_KEY        "Command"
+#define IPADDR_KEY         "IPAddr"
+#define SUBNETMASK_KEY     "SubnetMask"
+#define ACCTENABLED_KEY    "AccountingEnabled"
+#define ACCTFILE_KEY       "AccountingFile"
+#define AUTONAME_KEY       "AutoName"
+#define GATEWAY_KEY        "Gateway"
+#define DEFAULTROUTE_KEY   "DefaultRoute"
+#define DOMAIN_KEY         "Domain"
+#define DNS_KEY            "DNS"
+#define SCRIPTCOM_KEY      "ScriptCommands"
+#define SCRIPTARG_KEY      "ScriptArguments"
+#define PPPDARG_KEY        "pppdArguments"
+
 struct gendata {
 
   char defaultaccount[ACCNAME_SIZE+1];      // default account to connet
@@ -130,7 +188,7 @@
 
   // general functions
 
-  bool load();
+  void load(const KApplication*);
   void save();
 
 
@@ -297,6 +355,8 @@
 
   pid_t pppdprocessid;                   // process ID of the child pppd
                                          // daemon
+
+  KConfig* config;                       // configuration object   
 };
 
 extern PPPData gpppdata;
