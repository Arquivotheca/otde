# Makefile.in generated automatically by automake 1.2 from Makefile.am

# Copyright (C) 1994, 1995, 1996, 1997 Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy, distribute and modify it.

# this 10 paths are KDE specific. Use them:
# kde_htmldir       Where your docs should go to. (contains lang subdirs)
# kde_appsdir       Where your application file (.kdelnk) should go to. 
# kde_icondir       Where your icon should go to.
# kde_minidir       Where your mini icon should go to.
# kde_datadir       Where you install application data. (Use a subdir)
# kde_locale        Where translation files should go to.(contains lang subdirs)
# kde_cgidir        Where cgi-bin executables should go to.
# kde_confdir       Where config files should go to.
# kde_mimedir       Where mimetypes should go to.
# kde_toolbardir    Where general toolbar icons should go to.
# kde_wallpaperdir  Where general wallpapers should go to.

# just set the variable
#APPSDIR = $(kde_appsdir)/Internet
# set the include path for X, qt and KDE


SHELL = /bin/sh

srcdir = @srcdir@
top_srcdir = @top_srcdir@
VPATH = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@

bindir = @bindir@
sbindir = @sbindir@
libexecdir = @libexecdir@
datadir = @datadir@
sysconfdir = @sysconfdir@
sharedstatedir = @sharedstatedir@
localstatedir = @localstatedir@
libdir = @libdir@
infodir = @infodir@
mandir = @mandir@
includedir = @includedir@
oldincludedir = /usr/include

pkgdatadir = $(datadir)/@PACKAGE@
pkglibdir = $(libdir)/@PACKAGE@
pkgincludedir = $(includedir)/@PACKAGE@

top_builddir = ../..

ACLOCAL = @ACLOCAL@
AUTOCONF = @AUTOCONF@
AUTOMAKE = @AUTOMAKE@
AUTOHEADER = @AUTOHEADER@

INSTALL = @INSTALL@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_SCRIPT = @INSTALL_SCRIPT@
transform = @program_transform_name@

NORMAL_INSTALL = true
PRE_INSTALL = true
POST_INSTALL = true
NORMAL_UNINSTALL = true
PRE_UNINSTALL = true
POST_UNINSTALL = true
build_alias = @build_alias@
build_triplet = @build@
host_alias = @host_alias@
host_triplet = @host@
target_alias = @target_alias@
target_triplet = @target@
CC = @CC@
CPP = @CPP@
CXX = @CXX@
GLINC = @GLINC@
GLLIB = @GLLIB@
GMSGFMT = @GMSGFMT@
KDE_EXTRA_RPATH = @KDE_EXTRA_RPATH@
KDE_INCLUDES = @KDE_INCLUDES@
KDE_LDFLAGS = @KDE_LDFLAGS@
KDE_RPATH = @KDE_RPATH@
LD = @LD@
LIBCOMPAT = @LIBCOMPAT@
LIBCRYPT = @LIBCRYPT@
LIBDL = @LIBDL@
LIBJPEG = @LIBJPEG@
LIBOBJS = @LIBOBJS@
LIBSOCKET = @LIBSOCKET@
LIBTOOL = @LIBTOOL@
LIBUCB = @LIBUCB@
LN_S = @LN_S@
MAKEINFO = @MAKEINFO@
MOC = @MOC@
MSGFMT = @MSGFMT@
NM = @NM@
PACKAGE = @PACKAGE@
PAMINC = @PAMINC@
PAMLIBPATHS = @PAMLIBPATHS@
PAMLIBS = @PAMLIBS@
QT_INCLUDES = @QT_INCLUDES@
QT_LDFLAGS = @QT_LDFLAGS@
RANLIB = @RANLIB@
USE_NLS = @USE_NLS@
VERSION = @VERSION@
XGETTEXT = @XGETTEXT@
XPMINC = @XPMINC@
XPMLIB = @XPMLIB@
X_EXTRA_LIBS = @X_EXTRA_LIBS@
X_INCLUDES = @X_INCLUDES@
X_LDFLAGS = @X_LDFLAGS@
all_includes = @all_includes@
all_libraries = @all_libraries@
install_root = @install_root@
kde_appsdir = @kde_appsdir@
kde_bindir = @kde_bindir@
kde_cgidir = @kde_cgidir@
kde_confdir = @kde_confdir@
kde_datadir = @kde_datadir@
kde_htmldir = @kde_htmldir@
kde_icondir = @kde_icondir@
kde_includes = @kde_includes@
kde_libraries = @kde_libraries@
kde_locale = @kde_locale@
kde_mimedir = @kde_mimedir@
kde_minidir = @kde_minidir@
kde_partsdir = @kde_partsdir@
kde_sounddir = @kde_sounddir@
kde_toolbardir = @kde_toolbardir@
kde_wallpaperdir = @kde_wallpaperdir@
qt_includes = @qt_includes@
qt_libraries = @qt_libraries@
x_includes = @x_includes@
x_libraries = @x_libraries@

INCLUDES= @all_includes@
# claim, which subdirectories you want to install
# SUBDIRS = 
# KSTicker KSprogress

####### This part is very khexdit specific
# you can add here more. This one gets installed 
#bin_PROGRAMS = 	libpuke
#noinst_LIBRARIES = libpuke.a

lib_LTLIBRARIES = libpuke.la libpframe.la libplined.la libpbutton.la libppushbt.la \
                  libpprogress.la libptablevw.la libplistbox.la libplabel.la \
                  libpmenudta.la libppopmenu.la libpalistbox.la libptabdialog.la

libpuke_la_SOURCES = \
controller.cpp \
mcontroller.cpp \
pwidget.cpp \
mpwidget.cpp \
pobject.cpp \
mpobject.cpp \
playout.cpp \
mplayout.cpp \
kdynlib.cpp

libpuke_la_LDFLAGS = -version-info 0:1:0 -export-dynamic

libpframe_la_SOURCES = \
pframe.cpp \
mpframe.cpp

libpframe_la_LDFLAGS = -export-dynamic

libplined_la_SOURCES = \
plined.cpp \
mplined.cpp

libplined_la_LDFLAGS = -export-dynamic

libpbutton_la_SOURCES = \
pbutton.cpp \
mpbutton.cpp

libpbutton_la_LDFLAGS = -export-dynamic

libppushbt_la_SOURCES = \
ppushbt.cpp \
mppushbt.cpp

libppushbt_la_LDFLAGS = -export-dynamic

libpprogress_la_SOURCES = \
pprogress.cpp \
mpprogress.cpp

libpprogress_la_LDFLAGS = -export-dynamic

libptablevw_la_SOURCES = \
ptablevw.cpp \
mptablevw.cpp

libptablevw_la_LDFLAGS = -export-dynamic

libplistbox_la_SOURCES = \
plistbox.cpp \
mplistbox.cpp

libplistbox_la_LDFLAGS = -export-dynamic

libplabel_la_SOURCES = \
plabel.cpp \
mplabel.cpp

libplabel_la_LDFLAGS = -export-dynamic

libpmenudta_la_SOURCES = \
pmenudta.cpp \
mpmenudta.cpp

libpmenudta_la_LDFLAGS = -export-dynamic

libppopmenu_la_SOURCES = \
ppopmenu.cpp  \
mppopmenu.cpp

libppopmenu_la_LDFLAGS = -export-dynamic

libpalistbox_la_SOURCES = \
palistbox.cpp \
mpalistbox.cpp

libpalistbox_la_LDFLAGS = -export-dynamic

libptabdialog_la_SOURCES = \
ptabdialog.cpp  \
mptabdialog.cpp

libptabdialog_la_LDFLAGS = -export-dynamic

# no install headers

noinst_HEADERS = \
commands.h plined.h pwidget.h widgethdlr.h \
controller.h pframe.h pmessage.h HOWTO-PUKE.pod \
commands-handler.pl  pboxlayout.pm pwidget.pm \
commands-perl.pl pframe.pm test.pl convert_commands.pl \
plined.pm tester.pl pbase.pm puke.pl \
ppushbt.h \
pbutton.h \
pprogress.h \
ptablevw.h \
plistbox.h \
plabel.h \
pobject.h \
playout.h \
pmenudta.h \
ppopmenu.h \
kdynlib.h \
palistbox.h \
ptabdialog.h

# just to make sure, automake makes them 
BUILTSOURCES =	

# if you "make distclean", this files get removed. If you want to remove
# them while "make clean", use CLEANFILES
DISTCLEANFILES = $(BUILTSOURCES)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = ../../config.h
CONFIG_CLEAN_FILES = 
LTLIBRARIES =  $(lib_LTLIBRARIES)


DEFS = @DEFS@ -I. -I$(srcdir) -I../..
CPPFLAGS = @CPPFLAGS@
LDFLAGS = @LDFLAGS@
LIBS = @LIBS@
libpuke_la_LIBADD = 
libpuke_la_OBJECTS =  controller.lo mcontroller.lo pwidget.lo \
mpwidget.lo pobject.lo mpobject.lo playout.lo mplayout.lo kdynlib.lo
libpframe_la_LIBADD = 
libpframe_la_OBJECTS =  pframe.lo mpframe.lo
libplined_la_LIBADD = 
libplined_la_OBJECTS =  plined.lo mplined.lo
libpbutton_la_LIBADD = 
libpbutton_la_OBJECTS =  pbutton.lo mpbutton.lo
libppushbt_la_LIBADD = 
libppushbt_la_OBJECTS =  ppushbt.lo mppushbt.lo
libpprogress_la_LIBADD = 
libpprogress_la_OBJECTS =  pprogress.lo mpprogress.lo
libptablevw_la_LIBADD = 
libptablevw_la_OBJECTS =  ptablevw.lo mptablevw.lo
libplistbox_la_LIBADD = 
libplistbox_la_OBJECTS =  plistbox.lo mplistbox.lo
libplabel_la_LIBADD = 
libplabel_la_OBJECTS =  plabel.lo mplabel.lo
libpmenudta_la_LIBADD = 
libpmenudta_la_OBJECTS =  pmenudta.lo mpmenudta.lo
libppopmenu_la_LIBADD = 
libppopmenu_la_OBJECTS =  ppopmenu.lo mppopmenu.lo
libpalistbox_la_LIBADD = 
libpalistbox_la_OBJECTS =  palistbox.lo mpalistbox.lo
libptabdialog_la_LIBADD = 
libptabdialog_la_OBJECTS =  ptabdialog.lo mptabdialog.lo
CXXFLAGS = @CXXFLAGS@
CXXCOMPILE = $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --mode=compile $(CXX) $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
CXXLINK = $(LIBTOOL) --mode=link $(CXX) $(CXXFLAGS) $(LDFLAGS) -o $@
HEADERS =  $(noinst_HEADERS)

DIST_COMMON =  Makefile.am Makefile.in


DISTFILES = $(DIST_COMMON) $(SOURCES) $(HEADERS) $(TEXINFOS) $(EXTRA_DIST)

TAR = tar
GZIP = --best
DEP_FILES =  .deps/controller.P .deps/kdynlib.P .deps/mcontroller.P \
.deps/mpalistbox.P .deps/mpbutton.P .deps/mpframe.P .deps/mplabel.P \
.deps/mplayout.P .deps/mplined.P .deps/mplistbox.P .deps/mpmenudta.P \
.deps/mpobject.P .deps/mppopmenu.P .deps/mpprogress.P .deps/mppushbt.P \
.deps/mptabdialog.P .deps/mptablevw.P .deps/mpwidget.P \
.deps/palistbox.P .deps/pbutton.P .deps/pframe.P .deps/plabel.P \
.deps/playout.P .deps/plined.P .deps/plistbox.P .deps/pmenudta.P \
.deps/pobject.P .deps/ppopmenu.P .deps/pprogress.P .deps/ppushbt.P \
.deps/ptabdialog.P .deps/ptablevw.P .deps/pwidget.P
CXXMKDEP = $(CXX) -M $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CXXFLAGS)
SOURCES = $(libpuke_la_SOURCES) $(libpframe_la_SOURCES) $(libplined_la_SOURCES) $(libpbutton_la_SOURCES) $(libppushbt_la_SOURCES) $(libpprogress_la_SOURCES) $(libptablevw_la_SOURCES) $(libplistbox_la_SOURCES) $(libplabel_la_SOURCES) $(libpmenudta_la_SOURCES) $(libppopmenu_la_SOURCES) $(libpalistbox_la_SOURCES) $(libptabdialog_la_SOURCES)
OBJECTS = $(libpuke_la_OBJECTS) $(libpframe_la_OBJECTS) $(libplined_la_OBJECTS) $(libpbutton_la_OBJECTS) $(libppushbt_la_OBJECTS) $(libpprogress_la_OBJECTS) $(libptablevw_la_OBJECTS) $(libplistbox_la_OBJECTS) $(libplabel_la_OBJECTS) $(libpmenudta_la_OBJECTS) $(libppopmenu_la_OBJECTS) $(libpalistbox_la_OBJECTS) $(libptabdialog_la_OBJECTS)

default: all

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o
$(srcdir)/Makefile.in: Makefile.am $(top_srcdir)/configure.in $(ACLOCAL_M4) 
	cd $(top_srcdir) && $(AUTOMAKE) --gnu ksirc/puke/Makefile

Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status $(BUILT_SOURCES)
	cd $(top_builddir) \
	  && CONFIG_FILES=$(subdir)/$@ CONFIG_HEADERS= $(SHELL) ./config.status


mostlyclean-libLTLIBRARIES:

clean-libLTLIBRARIES:
	test -z "$(lib_LTLIBRARIES)" || rm -f $(lib_LTLIBRARIES)

distclean-libLTLIBRARIES:

maintainer-clean-libLTLIBRARIES:

install-libLTLIBRARIES: $(lib_LTLIBRARIES)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(libdir)
	@list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  if test -f $$p; then \
	    echo "$(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(libdir)/$$p"; \
	    $(LIBTOOL)  --mode=install $(INSTALL_PROGRAM) $$p $(libdir)/$$p; \
	  else :; fi; \
	done

uninstall-libLTLIBRARIES:
	$(NORMAL_UNINSTALL)
	list='$(lib_LTLIBRARIES)'; for p in $$list; do \
	  $(LIBTOOL)  --mode=uninstall rm -f $(libdir)/$$p; \
	done

.c.o:
	$(COMPILE) -c $<

mostlyclean-compile:
	rm -f *.o core

clean-compile:

distclean-compile:
	rm -f *.tab.c

maintainer-clean-compile:

.c.lo:
	$(LIBTOOL) --mode=compile $(COMPILE) -c $<

mostlyclean-libtool:
	rm -f *.lo

clean-libtool:
	rm -rf .libs

distclean-libtool:

maintainer-clean-libtool:

libpuke.la: $(libpuke_la_OBJECTS) $(libpuke_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libpuke_la_LDFLAGS) $(libpuke_la_OBJECTS) $(libpuke_la_LIBADD) $(LIBS)

libpframe.la: $(libpframe_la_OBJECTS) $(libpframe_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libpframe_la_LDFLAGS) $(libpframe_la_OBJECTS) $(libpframe_la_LIBADD) $(LIBS)

libplined.la: $(libplined_la_OBJECTS) $(libplined_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libplined_la_LDFLAGS) $(libplined_la_OBJECTS) $(libplined_la_LIBADD) $(LIBS)

libpbutton.la: $(libpbutton_la_OBJECTS) $(libpbutton_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libpbutton_la_LDFLAGS) $(libpbutton_la_OBJECTS) $(libpbutton_la_LIBADD) $(LIBS)

libppushbt.la: $(libppushbt_la_OBJECTS) $(libppushbt_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libppushbt_la_LDFLAGS) $(libppushbt_la_OBJECTS) $(libppushbt_la_LIBADD) $(LIBS)

libpprogress.la: $(libpprogress_la_OBJECTS) $(libpprogress_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libpprogress_la_LDFLAGS) $(libpprogress_la_OBJECTS) $(libpprogress_la_LIBADD) $(LIBS)

libptablevw.la: $(libptablevw_la_OBJECTS) $(libptablevw_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libptablevw_la_LDFLAGS) $(libptablevw_la_OBJECTS) $(libptablevw_la_LIBADD) $(LIBS)

libplistbox.la: $(libplistbox_la_OBJECTS) $(libplistbox_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libplistbox_la_LDFLAGS) $(libplistbox_la_OBJECTS) $(libplistbox_la_LIBADD) $(LIBS)

libplabel.la: $(libplabel_la_OBJECTS) $(libplabel_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libplabel_la_LDFLAGS) $(libplabel_la_OBJECTS) $(libplabel_la_LIBADD) $(LIBS)

libpmenudta.la: $(libpmenudta_la_OBJECTS) $(libpmenudta_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libpmenudta_la_LDFLAGS) $(libpmenudta_la_OBJECTS) $(libpmenudta_la_LIBADD) $(LIBS)

libppopmenu.la: $(libppopmenu_la_OBJECTS) $(libppopmenu_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libppopmenu_la_LDFLAGS) $(libppopmenu_la_OBJECTS) $(libppopmenu_la_LIBADD) $(LIBS)

libpalistbox.la: $(libpalistbox_la_OBJECTS) $(libpalistbox_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libpalistbox_la_LDFLAGS) $(libpalistbox_la_OBJECTS) $(libpalistbox_la_LIBADD) $(LIBS)

libptabdialog.la: $(libptabdialog_la_OBJECTS) $(libptabdialog_la_DEPENDENCIES)
	$(CXXLINK) -rpath $(libdir) $(libptabdialog_la_LDFLAGS) $(libptabdialog_la_OBJECTS) $(libptabdialog_la_LIBADD) $(LIBS)
.cpp.o:
	$(CXXCOMPILE) -c $<
.cpp.lo:
	$(LTCXXCOMPILE) -c $<

tags: TAGS

ID: $(HEADERS) $(SOURCES)
	here=`pwd` && cd $(srcdir) && mkid -f$$here/ID $(SOURCES) $(HEADERS)

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES)
	tags=; \
	here=`pwd`; \
	test -z "$(ETAGS_ARGS)$(SOURCES)$(HEADERS)$$tags" \
	  || (cd $(srcdir) && etags $(ETAGS_ARGS) $$tags  $(SOURCES) $(HEADERS) -o $$here/TAGS)

mostlyclean-tags:

clean-tags:

distclean-tags:
	rm -f TAGS ID

maintainer-clean-tags:

distdir = $(top_builddir)/$(PACKAGE)-$(VERSION)/$(subdir)

subdir = ksirc/puke

distdir: $(DISTFILES)
	here=`cd $(top_builddir) && pwd`; \
	top_distdir=`cd $(top_distdir) && pwd`; \
	cd $(top_srcdir) \
	  && $(AUTOMAKE) --include-deps --build-dir=$$here --srcdir-name=$(top_srcdir) --output-dir=$$top_distdir --gnu ksirc/puke/Makefile
	@for file in $(DISTFILES); do \
	  d=$(srcdir); \
	  test -f $(distdir)/$$file \
	  || ln $$d/$$file $(distdir)/$$file 2> /dev/null \
	  || cp -p $$d/$$file $(distdir)/$$file; \
	done

MKDEP = gcc -M $(DEFS) $(INCLUDES) $(CPPFLAGS) $(CFLAGS)

DEPS_MAGIC := $(shell mkdir .deps > /dev/null 2>&1 || :)
-include .deps/.P
.deps/.P: $(BUILT_SOURCES)
	echo > $@

-include $(DEP_FILES)

mostlyclean-depend:

clean-depend:

distclean-depend:

maintainer-clean-depend:
	rm -rf .deps

.deps/%.P: %.c
	@echo "Computing dependencies for $<..."
	@o='o'; \
	test -n "$o" && o='$$o'; \
	$(MKDEP) $< >$@.tmp \
	  && sed "s,^\(.*\)\.o:,\1.$$o \1.l$$o $@:," < $@.tmp > $@ \
	  && rm -f $@.tmp

.deps/%.P: %.cpp
	@echo "Computing dependencies for $<..."
	@o='o'; \
	$(CXXMKDEP) $< >$@.tmp \
	  && sed "s,^\(.*\)\.o:,\1.$$o \1.l$$o $@:," < $@.tmp > $@ \
	  && rm -f $@.tmp
info:
dvi:
check: all
	$(MAKE)
installcheck:
install-exec: install-libLTLIBRARIES
	@$(NORMAL_INSTALL)

install-data: install-data-local
	@$(NORMAL_INSTALL)

install: install-exec install-data all
	@:

uninstall: uninstall-libLTLIBRARIES uninstall-local

all: Makefile $(LTLIBRARIES) $(HEADERS)

install-strip:
	$(MAKE) INSTALL_PROGRAM='$(INSTALL_PROGRAM) -s' INSTALL_SCRIPT='$(INSTALL_PROGRAM)' install
installdirs:
	$(mkinstalldirs)  $(libdir)


mostlyclean-generic:
	test -z "$(MOSTLYCLEANFILES)" || rm -f $(MOSTLYCLEANFILES)

clean-generic:
	test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	rm -f Makefile $(DISTCLEANFILES)
	rm -f config.cache config.log stamp-h stamp-h[0-9]*
	test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	test -z "$(MAINTAINERCLEANFILES)" || rm -f $(MAINTAINERCLEANFILES)
	test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
mostlyclean:  mostlyclean-libLTLIBRARIES mostlyclean-compile \
		mostlyclean-libtool mostlyclean-tags mostlyclean-depend \
		mostlyclean-generic

clean:  clean-libLTLIBRARIES clean-compile clean-libtool clean-tags \
		clean-depend clean-generic mostlyclean

distclean:  distclean-libLTLIBRARIES distclean-compile distclean-libtool \
		distclean-tags distclean-depend distclean-generic clean
	rm -f config.status
	rm -f libtool

maintainer-clean:  maintainer-clean-libLTLIBRARIES \
		maintainer-clean-compile maintainer-clean-libtool \
		maintainer-clean-tags maintainer-clean-depend \
		maintainer-clean-generic distclean
	@echo "This command is intended for maintainers to use;"
	@echo "it deletes files that may require special tools to rebuild."

.PHONY: default mostlyclean-libLTLIBRARIES distclean-libLTLIBRARIES \
clean-libLTLIBRARIES maintainer-clean-libLTLIBRARIES \
uninstall-libLTLIBRARIES install-libLTLIBRARIES mostlyclean-compile \
distclean-compile clean-compile maintainer-clean-compile \
mostlyclean-libtool distclean-libtool clean-libtool \
maintainer-clean-libtool tags mostlyclean-tags distclean-tags \
clean-tags maintainer-clean-tags distdir mostlyclean-depend \
distclean-depend clean-depend maintainer-clean-depend info dvi \
installcheck install-exec install-data install uninstall all \
installdirs mostlyclean-generic distclean-generic clean-generic \
maintainer-clean-generic clean mostlyclean distclean maintainer-clean


HOWTO-PUKE.txt: HOWTO-PUKE.pod
	pod2text HOWTO-PUKE.pod > HOWTO-PUKE.txt

# make messages.po. Move this one to ../po/ and "make merge" in po
messages:
	$(XGETTEXT) -C -ktranslate $(khexdit_SOURCES)

# just install datas here. Use install-exec-data for scripts and etc.
# the binary itself is already installed from automake
# use mkinstalldirs, not "install -d"
# don't install a list of file. Just one file per install.
# if you have more of them, create a subdirectory with an extra Makefile 
install-data-local: 
	$(mkinstalldirs) $(kde_datadir)/ksirc
	$(INSTALL_DATA) *.pl *.pm $(kde_datadir)/ksirc

#
# remove ALL you have installed in install-data-local or install-exec-local
uninstall-local:

#
# add a dependency for every moc file to be full portable
# I've added a key binding to emacs for this. 
m%.cpp: %.h
	$(MOC) $< -o $@

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
