.TH QBoxLayout 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QBoxLayout \- Lines up child widgets horizontally or vertically
.SH SYNOPSIS
.br
.PP
\fC#include <qlayout.h>\fR
.PP
Inherits QLayout.
.PP
Inherited by QHBoxLayout and QVBoxLayout.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QBoxLayout ( QWidget * " "parent" ", Direction, int " "border" "=0, int " "autoBorder" " = -1, const char * " "name" "=0 )"
.br
.ti -1c
.BI "QBoxLayout ( Direction, int " "autoBorder" " = -1, const char * " "name" "=0 )"
.br
.ti -1c
.BI "\fB~QBoxLayout\fR ()"
.br
.ti -1c
.BI "void addSpacing ( int size )"
.br
.ti -1c
.BI "void addStretch ( int " "stretch" " = 0 )"
.br
.ti -1c
.BI "void addWidget ( QWidget *, int " "stretch" " = 0, int " "alignment" " = AlignCenter )"
.br
.ti -1c
.BI "void addLayout ( QLayout * " "layout" ", int " "stretch" " = 0 )"
.br
.ti -1c
.BI "Direction direction () const"
.br
.ti -1c
.BI "void addStrut ( int )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual QChain* mainVerticalChain ()"
.br
.ti -1c
.BI "virtual QChain* mainHorizontalChain ()"
.br
.ti -1c
.BI "virtual void initGM ()"
.br
.in -1c
.SH DESCRIPTION
The QBoxLayout class lines up child widgets horizontally or vertically.
.PP
QBoxLayout takes the space it gets (from its parent layout or from the mainWindget()), divides it up into a row of boxes and makes each managed widget fill one box.
.PP
If the QBoxLayout is \fCHorizontal,\fR the boxes are beside each other, with suitable sizes. Each widget (or other box) will get at least its minimum sizes and at most its maximum size, and any excess space is shared according to the stretch factors (more about that below).
.PP
If the QBoxLayout is \fCVertical,\fR the boxes are above and below each other, again with suitable sizes.
.PP
The easiest way to create a QBoxLayout is to use one of the convenience classes QHBoxLayout (for \fCHorizontal\fR boxes) or QVBoxLayout (for \fCVertical\fR boxes). You can also use the QBoxLayout constuctor directly, specifying its direction as \fCLeftToRight, Down, RightToLeft\fR or \fCUp.\fR
.PP
If the QBoxLayout is not the top-level layout (ie. is not managing all of the widget's area and children), you must add it to its parent layout before you can do anything with it. The normal way to add a layout is by calling parentLayout->addLayout().
.PP
Once you have done that, you can add boxes to the QBoxLayout using one of four functions: 
.IP
.TP
addWidget() to add a widget to the QBoxLayout and set the widget's stretch factor. (The stretch factor is along the row if boxes.)
.IP
.TP
addSpacing() to create an empty box; this is one of the functions you use to create nice and spacious dialogs. See below for ways to set margins.
.IP
.TP
addStretch() to create an empty, stretchable box.
.IP
.TP
addLayout() to add a box containing another QLayout to the row and set that layout's stretch factor.
.IP
.PP
Finally, if the layout is a top-level one, you activate() it.
.PP
QBoxLayout also includes two margin widths: The border width and the inter-box width. The border width is the width of the reserved space along each of the QBoxLayout's four sides. The intra-widget width is the width of the automatically allocated spacing between neighbouring boxes. (You can use addSpacing() to get more space.)
.PP
The border width defaults to 0, and the intra-widget width defaults to the same as the border width. Both are set using arguments to the constructor.
.PP
You will almost always want to use the convenience classes for QBoxLayout: QVBoxLayout and QHBoxLayout, because of their simpler constructors.
.PP
Examples:
.(l
pref/pref.cpp layout/layout.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QBoxLayout::QBoxLayout ( QWidget * parent, Direction d, int border=0, int autoBorder = -1, const char * name=0 )"
Creates a new QBoxLayout with direction \fId\fR and main widget \fIparent. parent\fR may not be 0.
.PP
\fIborder\fR is the number of pixels between the edge of the widget and the managed children. \fIautoBorder\fR is the default number of pixels between neighbouring children. If \fIautoBorder\fR is -1 the value of \fIborder\fR is used.
.PP
\fIname\fR is the internal object name
.PP
See also: direction().
.PP
Examples:
.(l
layout/layout.cpp
.)l
.SH "QBoxLayout::QBoxLayout ( Direction d, int autoBorder = -1, const char * name=0 )"
If \fIautoBorder\fR is -1, this QBoxLayout will inherit its parent's defaultBorder(), otherwise \fIautoBorder\fR is used.
.PP
You have to insert this box into another layout before using it.
.SH "QBoxLayout::~QBoxLayout ()"
Destroys this box.
.SH "void QBoxLayout::addLayout ( QLayout * layout, int stretch = 0 )"
Adds \fIlayout\fR to the box, with serial stretch factor \fIstretch.\fR
.PP
See also: addWidget() and addSpacing().
.PP
Examples:
.(l
pref/pref.cpp layout/layout.cpp widgets/widgets.cpp
.)l
.SH "void QBoxLayout::addSpacing ( int size )"
Adds a non-stretchable space with size \fIsize.\fR QBoxLayout gives default border and spacing. This function adds additional space.
.PP
See also: addStretch().
.PP
Examples:
.(l
widgets/widgets.cpp
.)l
.SH "void QBoxLayout::addStretch ( int stretch = 0 )"
Adds a stretchable space with zero minimum size and stretch factor \fIstretch.\fR
.PP
See also: addSpacing().
.PP
Examples:
.(l
pref/pref.cpp widgets/widgets.cpp
.)l
.SH "void QBoxLayout::addStrut ( int size )"
Limits the perpendicular dimension of the box (e.g. height if the box is LeftToRight) to a minimum of \fIsize.\fR Other constraints may increase the limit.
.SH "void QBoxLayout::addWidget ( QWidget * widget, int stretch = 0, int align = AlignCenter )"
Adds \fIwidget\fR to the box, with stretch factor \fIstretch\fR and alignment \fIalign.\fR
.PP
The stretch factor applies only in the direction of the QBoxLayout, and is relative to the other boxes and widgets in this QBoxLayout. Widgets and boxes with higher stretch factor grow more.
.PP
If the stretch factor is 0 and nothing else in the QBoxLayout can grow at all, the widget may still grow up to its maximum size.
.PP
Alignment is perpendicular to direction(), alignment in the serial direction is done with addStretch().
.PP
For horizontal boxes, the possible alignments are
.TP
\fCAlignCenter\fR centers vertically in the box.
.TP
\fCAlignTop\fR aligns to the top border of the box.
.TP
\fCAlignBottom\fR aligns to the bottom border of the box.
.PP
For vertical boxes, the possible alignments are
.TP
\fCAlignCenter\fR centers horizontally in the box.
.TP
\fCAlignLeft\fR aligns to the left border of the box.
.TP
\fCAlignRight\fR aligns to the right border of the box.
.PP
Alignment only has effect if the size of the box is greater than the widget's maximum size.
.PP
See also: addLayout() and addSpacing().
.PP
Examples:
.(l
pref/pref.cpp layout/layout.cpp widgets/widgets.cpp
.)l
.SH "QBoxLayout::Direction QBoxLayout::direction() const"
Returns the (serial) direction of the box. addWidget(), addBox() and addSpacing() works in this direction; the stretch stretches in this direction. Alignment works perpendicular to this direction.
.PP
The directions are \fCLeftToRight, RightToLeft, TopToBottom\fR and \fCBottomToTop.\fR For the last two, the shorter aliases \fCDown\fR and \fCUp\fR are also available.
.PP
See also: addWidget(), addBox() and addSpacing().
.SH "void QBoxLayout::initGM () \fC[virtual protected]\fR"
Initializes this box.
.PP
Reimplemented from QLayout.
.SH "QChain * QBoxLayout::mainHorizontalChain () \fC[virtual protected]\fR"
Returns the main horizontal chain, so that a box can be put into other boxes (or other types of QLayout).
.PP
Reimplemented from QLayout.
.SH "QChain * QBoxLayout::mainVerticalChain () \fC[virtual protected]\fR"
Returns the main vertical chain, so that a box can be put into other boxes (or other types of QLayout).
.PP
Reimplemented from QLayout.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qboxlayout.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
