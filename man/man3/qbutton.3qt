.TH QButton 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QButton \- The abstract base class of button widgets, providing functionality common to buttons
.SH SYNOPSIS
.br
.PP
\fC#include <qbutton.h>\fR
.PP
Inherits QWidget.
.PP
Inherited by QCheckBox, QPushButton, QRadioButton and QToolButton.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QButton ( QWidget * " "parent" "=0, const char * " "name" "=0 )"
.br
.ti -1c
.BI "\fB~QButton\fR ()"
.br
.ti -1c
.BI "const char* text () const"
.br
.ti -1c
.BI "void setText ( const char * )"
.br
.ti -1c
.BI "const QPixmap* pixmap () const"
.br
.ti -1c
.BI "void setPixmap ( const QPixmap & )"
.br
.ti -1c
.BI "int accel () const"
.br
.ti -1c
.BI "void setAccel ( int )"
.br
.ti -1c
.BI "bool isToggleButton () const"
.br
.ti -1c
.BI "void setDown ( bool )"
.br
.ti -1c
.BI "bool isDown () const"
.br
.ti -1c
.BI "bool isOn () const"
.br
.ti -1c
.BI "bool autoResize () const"
.br
.ti -1c
.BI "void setAutoResize ( bool )"
.br
.ti -1c
.BI "bool autoRepeat () const"
.br
.ti -1c
.BI "void setAutoRepeat ( bool )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void animateClick ()"
.br
.ti -1c
.BI "void toggle ()"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void pressed ()"
.br
.ti -1c
.BI "void released ()"
.br
.ti -1c
.BI "void clicked ()"
.br
.ti -1c
.BI "void toggled ( bool )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "void setToggleButton ( bool )"
.br
.ti -1c
.BI "void setOn ( bool )"
.br
.ti -1c
.BI "virtual bool hitButton ( const QPoint & pos ) const"
.br
.ti -1c
.BI "virtual void drawButton ( QPainter * )"
.br
.ti -1c
.BI "virtual void drawButtonLabel ( QPainter * )"
.br
.ti -1c
.BI "virtual void keyPressEvent ( QKeyEvent * )"
.br
.ti -1c
.BI "virtual void mousePressEvent ( QMouseEvent * )"
.br
.ti -1c
.BI "virtual void mouseReleaseEvent ( QMouseEvent * )"
.br
.ti -1c
.BI "virtual void mouseMoveEvent ( QMouseEvent * )"
.br
.ti -1c
.BI "virtual void paintEvent ( QPaintEvent * )"
.br
.ti -1c
.BI "virtual void focusInEvent ( QFocusEvent * )"
.br
.ti -1c
.BI "virtual void focusOutEvent ( QFocusEvent * )"
.br
.ti -1c
.BI "virtual void enabledChange ( bool )"
.br
.in -1c
.SH DESCRIPTION
The QButton class is the abstract base class of button widgets, providing functionality common to buttons.
.PP
The QButton class implements an abstract button, and lets subclasses specify how to reply to user actions and how to draw the button.
.PP
QButton provides both push and toggle buttons. The QRadioButton and QCheckBox classes provide only toggle buttons, QPushButton and QToolButton provide both toggle and push buttons.
.PP
Any button can have either a text or pixmap label. setText() sets the button to be a text button and setPixmap() sets it to be a pixmap button. The text/pixmap is manipulated as necessary to create "disabled" appearance when the button is disabled.
.PP
QButton provides most of the states used for buttons:
.TP
isDown() determines whether the button is \fIpressed\fR down.
.TP
isOn() determines whether the button is \fIon.\fR Only toggle buttons can be switched on and off (see below).
.TP
isEnabled() determines whether the button can be pressed by the user.
.TP
setAutoRepeat() determines whether the button will auto-repeat if the user holds it down.
.TP
setToggleButton() determines whether the button is a toggle button or not.
.PP
The difference between isDown() and isOn() is as follows: When the user clicks a toggle button to toggle it on, the button is first \fIpressed,\fR then released into \fIon\fR state. When the user clicks it again (to toggle it off) the button moves first to the \fIpressed\fR state, then to the \fIoff\fR state (isOn() and isDown() are both FALSE).
.PP
Default buttons (as used in many dialogs) are provided by QPushButton::setDefault() and QPushButton::setAutoDefault().
.PP
QButton provides four signals:
.TP
pressed() is emitted when the left mouse button is pressed while the mouse cursor is inside the button.
.TP
released() is emitted when the left mouse button is released.
.TP
clicked() is emitted when the button is first pressed then released, or when the accelerator key is typed, or when animateClick() is called.
.TP
toggled() is emitted when the state of a toggle button changes.
.PP
If the button is a text button with "&" in its text, QButton creates an automatic accelerator key. This code creates a push button labelled "Rock & Roll" (where the c is underscored). The button gets an automatic accelerator key, Alt-C:
.PP
.nf
.br
    QPushButton *p = new QPushButton( "Ro&ck && Roll", this );
.fi
.PP
In this example, when the user presses Alt-C the button will animate a click.
.PP
You can also set a custom accelerator using the setAccel() function. This is useful mostly for pixmap buttons since they have no automatic accelerator.
.PP
.nf
.br
    QPushButton *p;
.br
    p->setPixmap( QPixmap("print.gif") );
.br
    p->setAccel( ALT+Key_F7 );
.fi
.PP
All of the buttons provided by Qt (QPushButton, QToolButton, QCheckBox and QRadioButton) can display both text and pixmaps.
.PP
To subclass QButton, you have to reimplement at least drawButton() (to draw the button's outskirts) and drawButtonLabel() (to draw its text or pixmap). It is generally advisable to reimplement sizeHint() as well, and sometimes hitButton() (to determine whether a button press is within the button).
.PP
To reduce flickering the QButton::paintEvent() sets up a pixmap that the drawButton() function draws in. You should not reimplement paintEvent() for a subclass of QButton unless you want to take over all drawing.
.PP
See also: QButtonGroup and Microsoft Style Guide
.PP
Examples:
.(l
tictac/tictac.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QButton::QButton ( QWidget * parent=0, const char * name=0 )"
Constructs a standard button with a parent widget and a name.
.PP
If \fIparent\fR is a QButtonGroup, this constructor calls QButtonGroup::insert().
.SH "QButton::~QButton ()"
Destroys the button and all its child widgets.
.SH "int QButton::accel () const"
Returns the accelerator key currently set for the button, or 0 if no accelerator key has been set.
.PP
See also: setAccel().
.SH "void QButton::animateClick () \fC[slot]\fR"
Performs an animated click: The button is pressed and a short while later released.
.PP
pressed(), released(), clicked() and toggled() signals are emitted as appropriate.
.PP
This function does nothing if the button is disabled.
.PP
See also: setAccel().
.SH "bool QButton::autoRepeat () const"
Returns TRUE if the button is auto-repeating, else FALSE.
.PP
The default is FALSE.
.PP
See also: setAutoRepeat().
.SH "bool QButton::autoResize () const"
Returns TRUE if auto-resizing is enabled, or FALSE if auto-resizing is disabled.
.PP
Auto-resizing is disabled by default.
.PP
See also: setAutoResize().
.SH "void QButton::clicked () \fC[signal]\fR"
This signal is emitted when the button is activated (i.e. first pressed down and then released when the mouse cursor is inside the button).
.PP
See also: pressed(), released() and toggled().
.SH "void QButton::drawButton ( QPainter * ) \fC[virtual protected]\fR"
Draws the button. The default implementation does nothing.
.PP
This virtual function is reimplemented by subclasses to draw real buttons.
.PP
Reimplemented in QToolButton, QPushButton, QCheckBox and QRadioButton.
.SH "void QButton::drawButtonLabel ( QPainter * ) \fC[virtual protected]\fR"
Draws the button text or pixmap. The default implementation does nothing.
.PP
This virtual function is reimplemented by subclasses to draw real buttons.
.PP
Reimplemented in QToolButton, QPushButton, QCheckBox and QRadioButton.
.SH "void QButton::enabledChange ( bool e ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QButton::focusInEvent ( QFocusEvent * ) \fC[virtual protected]\fR"
Handles focus in events for the button.
.PP
See also: focusOutEvent().
.PP
Reimplemented from QWidget.
.SH "void QButton::focusOutEvent ( QFocusEvent * ) \fC[virtual protected]\fR"
Handles focus out events for the button.
.PP
See also: focusInEvent().
.PP
Reimplemented from QWidget.
.SH "bool QButton::hitButton ( const QPoint & pos ) const \fC[virtual protected]\fR"
Returns TRUE if \fIpos\fR is inside the widget rectangle, or FALSE if it is outside.
.PP
This virtual function is reimplemented by subclasses.
.PP
Reimplemented in QRadioButton.
.SH "bool QButton::isDown () const"
Returns TRUE if the button pressed down, or FALSE if it is standing up.
.PP
See also: setDown().
.PP
Examples:
.(l
tictac/tictac.cpp
.)l
.SH "bool QButton::isOn () const"
Returns TRUE if this toggle button is switched on, or FALSE if it is switched off.
.PP
See also: setOn() and toggleButton().
.PP
Examples:
.(l
qmag/qmag.cpp
.)l
.SH "bool QButton::isToggleButton () const"
Returns TRUE if the button is a toggle button.
.PP
See also: setToggleButton().
.SH "void QButton::keyPressEvent ( QKeyEvent * e ) \fC[virtual protected]\fR"
Handles keyboard events for the button.
.PP
Space calls animateClick(), the arrow keys cause focus changes.
.PP
Reimplemented from QWidget.
.SH "void QButton::mouseMoveEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Handles mouse move events for the button.
.PP
See also: mousePressEvent() and mouseReleaseEvent().
.PP
Reimplemented from QWidget.
.SH "void QButton::mousePressEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Handles mouse press events for the button.
.PP
See also: mouseReleaseEvent().
.PP
Reimplemented from QWidget.
.SH "void QButton::mouseReleaseEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Handles mouse release events for the button.
.PP
See also: mousePressEvent().
.PP
Reimplemented from QWidget.
.SH "void QButton::paintEvent ( QPaintEvent * event ) \fC[virtual protected]\fR"
Handles paint events for the button.
.PP
Opens the painter on the button and calls drawButton().
.PP
Reimplemented from QWidget.
.SH "const QPixmap * QButton::pixmap () const"
Returns the button pixmap, or 0 if the button has no pixmap.
.SH "void QButton::pressed () \fC[signal]\fR"
This signal is emitted when the button is pressed down.
.PP
See also: released() and clicked().
.SH "void QButton::released () \fC[signal]\fR"
This signal is emitted when the button is released.
.PP
See also: pressed(), clicked() and toggled().
.SH "void QButton::setAccel ( int key )"
Specifies an accelerator \fIkey\fR for the button, or removes the accelerator if \fIkey\fR is 0.
.PP
Setting a button text containing a shortcut character (for example the 'x' in E&xit) automatically defines an ALT+letter accelerator for the button. You only need to call this function in order to specify a custom accelerator.
.PP
Example:
.PP
.nf
.br
    QPushButton *b1 = new QPushButton;
.br
    b1->setText( "&OK" );               // sets accel ALT+'O'
.br
.br
    QPushButton *b2 = new QPushButton;
.br
    b2->setPixmap( printIcon );         // pixmap instead of text
.br
    b2->setAccel( CTRL+'P' );           // custom accel
.fi
.PP
See also: accel(), setText() and QAccel.
.SH "void QButton::setAutoRepeat ( bool enable )"
Turns on auto-repeat for the button if \fIenable\fR is TRUE, or turns it off if \fIenable\fR is FALSE.
.PP
When auto-repeat is enabled, the clicked() signal is emitted at regular intervals while the buttons is down.
.PP
setAutoRepeat() has no effect for toggle buttons.
.PP
See also: isDown(), autoRepeat() and clicked().
.SH "void QButton::setAutoResize ( bool enable )"
Enables auto-resizing if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
When auto-resizing is enabled, the button will resize itself whenever the contents change.
.PP
See also: autoResize() and adjustSize().
.SH "void QButton::setDown ( bool enable )"
Sets the state of the button to pressed down if \fIenable\fR is TRUE or to standing up if \fIenable\fR is FALSE.
.PP
If the button is a toggle button, it is \fInot\fR toggled. Call toggle() as well if you need to do that. The pressed() and released() signals are not emitted by this function.
.PP
This method is provided in case you need to override the mouse event handlers.
.PP
See also: isDown(), setOn(), toggle() and toggled().
.SH "void QButton::setOn ( bool enable ) \fC[protected]\fR"
Switches a toggle button on if \fIenable\fR is TRUE or off if \fIenable\fR is FALSE. This function should be called only for toggle buttons.
.PP
See also: isOn() and toggleButton().
.SH "void QButton::setPixmap ( const QPixmap & pixmap )"
Sets the button to display \fIpixmap\fR and repaints at once.
.PP
If \fIpixmap\fR is monochrome (i.e. it is a QBitmap or its depth is 1) and it does not have a mask, this function sets the pixmap to be its own mask. The purpose of this is to draw transparent bitmaps, which is important for e.g. toggle buttons.
.PP
The button resizes itself if auto-resizing is enabled, changes its minimum size if autoMinimumSize() is enabled, and always disables any accelerator.
.PP
See also: pixmap(), setText(), setAutoMinimumSize(), setAutoResize(), setAccel() and QPixmap::mask().
.SH "void QButton::setText ( const char * text )"
Sets the button to display \fItext\fR and repaints
.PP
The button resizes itself if auto-resizing is enabled, changes its minimum size if autoMinimumSize() is enabled, and sets the appropriate accelerator.
.PP
See also: text(), setPixmap(), setAutoMinimumSize(), setAutoResize(), setAccel() and QPixmap::mask().
.PP
Examples:
.(l
xform/xform.cpp layout/layout.cpp qmag/qmag.cpp widgets/widgets.cpp
.)l
.SH "void QButton::setToggleButton ( bool enable ) \fC[protected]\fR"
Makes the button a toggle button if \fIenable\fR is TRUE, or a normal button if \fIenable\fR is FALSE.
.PP
Note that this function is protected. It is called from subclasses to enable the toggle functionality. QCheckBox and QRadioButton are toggle buttons. QPushButton is initially not a toggle button, but QPushButton::setToggleButton() can be called to create toggle buttons.
.PP
See also: isToggleButton().
.SH "const char * QButton::text () const"
Returns the button text, or 0 if the button has no text.
.PP
See also: setText().
.SH "void QButton::toggle () \fC[slot]\fR"
if this is a toggle button, toggles it.
.SH "void QButton::toggled ( bool on ) \fC[signal]\fR"
This signal is emitted whenever a toggle button changes status. \fIon\fR is TRUE if the button is on, or FALSE if the button is off.
.PP
This may be the result of a user action, toggle() slot activation, or because setOn() was called.
.PP
See also:  clicked().
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qbutton.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
