.TH QSocketNotifier 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QSocketNotifier \- Support for socket callbacks
.SH SYNOPSIS
.br
.PP
\fC#include <qsocketnotifier.h>\fR
.PP
Inherits QObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QSocketNotifier ( int " "socket" ", Type, QObject * " "parent" "=0, const char * " "name" "=0 )"
.br
.ti -1c
.BI "\fB~QSocketNotifier\fR ()"
.br
.ti -1c
.BI "int socket () const"
.br
.ti -1c
.BI "Type type () const"
.br
.ti -1c
.BI "bool isEnabled () const"
.br
.ti -1c
.BI "void setEnabled ( bool )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void activated ( int socket )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual bool event ( QEvent * )"
.br
.in -1c
.SH DESCRIPTION
The QSocketNotifer class provides support for socket callbacks.
.PP
This class makes it possible to write e.g. asynchronous TCP/IP socket-based code in Qt. Using synchronous socket operations blocks the program, which is clearly not acceptable for an event-based GUI program.
.PP
Once you have opened a non-blocking socket (either for TCP, UDP, a unix-domain socket, or any other protocol family your operating system supports), you can create a socket notifier to monitor the socket. Then connect the activated() signal to the slot you want to be called when a socket event occurs.
.PP
There are three types of socket notifiers (read, write and exception) and you must specify one of these in the constructor.
.PP
The type specifies when the activated() signal is to be emitted:
.IP 1
\fCQSocketNotifier::Read:\fR There is data to be read (socket read event).
.IP 2
\fCQSocketNotifier::Write:\fR Data can be written (socket write event).
.IP 3
\fCQSocketNofifier::Exception:\fR An exception has ocurred (socket exception event). We recommend against using this.
.PP
For example, if you need to monitor both reads and writes for the same socket, you must create two socket notifiers.
.PP
Example:
.PP
.nf
.br
    int sockfd;                                 // socket identifier
.br
    struct sockaddr_in sa;                      // should contain host address
.br
    sockfd = socket( AF_INET, SOCK_STREAM, 0 ); // create TCP socket
.br
    // make the socket non-blocking here, usually using fcntl( O_NONBLOCK )
.br
    ::connect( sockfd, (struct sockaddr*)&sa,   // connect to host
.br
               sizeof(sa) );                    //   NOT QObject::connect()!
.br
    QSocketNotifier *sn;
.br
    sn = new QSocketNotifier( sockfd, QSocketNotifier::Read, parent );
.br
    QObject::connect( sn, SIGNAL(activated(int)),
.br
                      myObject, SLOT(dataReceived()) );
.fi
.PP
The optional \fIparent\fR argument can be set to make the socket notifier a child of some widget and therefore be automatically destroyed when the widget is destroyed.
.PP
For read notifiers, it makes little sense to connect the activated() signal to more than one slot, because the data can be read from the socket only once.
.PP
Make sure to disable the socket notifier for write operations when there is nothing to be written, otherwise the notifier fires on every pass of the main event loop. The socket notifier is enabled when it is created.
.PP
Also observe that if you do not read all the available data when the read notifier fires, it fires again and again.
.PP
If you disable the read notifier, your program may deadlock. Avoid it if you do not know what you are doing. (The same applies to exception notifiers if you have to use that, for instance if you \fIhave\fR to use TCP urgent data.)
.PP
If you need a time-out for your sockets, you can use either timer events or the QTimer class.
.PP
Socket action is detected in the main event loop of Qt. The X11 version of Qt has has a single UNIX select() call which incorporates all socket notifiers and the X socket.
.PP
Note that on XFree86 for OS/2, select() only works in the thread in which main() is running, therefore you should use that thread for GUI operations.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QSocketNotifier::QSocketNotifier ( int socket, Type type, QObject * parent=0, const char * name=0 )"
Constructs a socket notifier with a \fIparent\fR and a \fIname.\fR
.PP
Arguments:
.TP
\fIsocket\fR is the socket to be monitored.
.TP
\fItype\fR specifies the socket operation to be detected; \fCQSocketNotifier::Read, QSocketNotifier::Write\fR or \fCQSocketNotifier::Exception.\fR The \fIparent\fR and \fIname\fR arguments are sent to the QObject constructor.
.PP
The socket notifier is initially enabled. It is generally advisable to explicitly enable or disable it, especially for write notifiers.
.PP
See also: setEnabled() and isEnabled().
.SH "QSocketNotifier::~QSocketNotifier ()"
Destroys the socket notifier.
.SH "void QSocketNotifier::activated ( int socket ) \fC[signal]\fR"
This signal is emitted under certain conditions, specified by the notifier type:
.IP 1
\fCQSocketNotifier::Read:\fR There is data to be read (socket read event).
.IP 2
\fCQSocketNotifier::Write:\fR Data can be written (socket write event).
.IP 3
\fCQSocketNofifier::Exception:\fR An exception has ocurred (socket exception event).
.PP
The \fIsocket\fR argument is the socket identifier.
.PP
See also: type() and socket().
.SH "bool QSocketNotifier::event ( QEvent * e ) \fC[virtual protected]\fR"
Handles events for the socket notifier object.
.PP
Emits the activated() signal when a \fCEvent_SockAct\fR is received.
.PP
Reimplemented from QObject.
.SH "bool QSocketNotifier::isEnabled () const"
Returns TRUE if the notifier is enabled, or FALSE if it is disabled.
.PP
See also: setEnabled().
.SH "void QSocketNotifier::setEnabled ( bool enable )"
Enables the notifier if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
The notifier is by default enabled.
.PP
If the notifier is enabled, it emits the activated() signal whenever a socket event corresponding to its type occurs. If it is disabled, it ignores socket events (the same effect as not creating the socket notifier).
.PP
Disable the socket notifier for writes if there is nothing to be written, otherwise your program hogs the CPU.
.PP
See also: isEnabled() and activated().
.SH "int QSocketNotifier::socket () const"
Returns the socket identifier specified to the constructor.
.PP
See also: type().
.SH "Type QSocketNotifier::type () const"
Returns the socket event type specified to the constructor; \fCQSocketNotifier::Read, QSocketNotifier::Write\fR or \fCQSocketNotifier::Exception.\fR
.PP
See also:  socket().
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qsocketnotifier.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
