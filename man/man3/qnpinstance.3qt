.TH QNPInstance 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QNPInstance \- A QObject that is a Web-browser plugin [Qt NSPlugin Extension]
.SH SYNOPSIS
.br
.PP
\fC#include <qnp.h>\fR
.PP
Inherits QObject.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "\fB~QNPInstance\fR ()"
.br
.ti -1c
.BI "int argc () const"
.br
.ti -1c
.BI "const char* argn ( int ) const"
.br
.ti -1c
.BI "const char* argv ( int ) const"
.br
.ti -1c
.BI "const char* arg ( const char * name ) const"
.br
.ti -1c
.BI "InstanceMode mode () const"
.br
.ti -1c
.BI "const char* userAgent () const"
.br
.ti -1c
.BI "virtual QNPWidget* newWindow ()"
.br
.ti -1c
.BI "QNPWidget* widget ()"
.br
.ti -1c
.BI "virtual bool newStreamCreated ( QNPStream *, StreamMode & smode )"
.br
.ti -1c
.BI "virtual int writeReady ( QNPStream * )"
.br
.ti -1c
.BI "virtual int write ( QNPStream *, int " "offset" ", int " "len" ", void * buffer )"
.br
.ti -1c
.BI "virtual void streamDestroyed ( QNPStream * )"
.br
.ti -1c
.BI "void status ( const char * msg )"
.br
.ti -1c
.BI "void getURL ( const char * " "url" ", const char * " "window" "=0 )"
.br
.ti -1c
.BI "void postURL ( const char * " "url" ", const char * " "window" ", uint " "len" ", const char * " "buf" ", bool file )"
.br
.ti -1c
.BI "QNPStream* newStream ( const char * " "mimetype" ", const char * " "window" ", bool " "as_file" "=FALSE )"
.br
.ti -1c
.BI "virtual void streamAsFile ( QNPStream *, const char * fname )"
.br
.ti -1c
.BI "void* getJavaPeer () const"
.br
.ti -1c
.BI "virtual bool printFullPage ()"
.br
.ti -1c
.BI "virtual void print ( QPainter * )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "QNPInstance ()"
.br
.in -1c
.SH DESCRIPTION
This class is defined in the \fBQt NSPlugin Extension\fR, which can be found in the \fCqt/extensions\fR directory. It is not included in the main Qt API.
.PP
a QObject that is a Web-browser plugin
.PP
Deriving from QNPInstance creates an object that represents a single <EMBED> tag in an HTML document.
.PP
The QNPInstance is responsible for creating an appropriate window if required (not all plugins have windows), and for interacting with the input/output facilities intrinsic to plugins.
.PP
Note that there is \fIabsolutely no garrantee\fR as to the order in which functions are called. Sometimes the browser will call setWindow() first, at other times, newStreamCreated() will be called first (assuming the <EMBED> tag has a SRC parameter).
.PP
\fINo GUI functionality\fR of Qt may be used until the first call to setWindow(). This includes any use of QPaintDevice (ie. QPixmap, QWidget, and all subclasses), QApplication, anything related to QPainter (QBrush, etc.), fonts, QMovie, QToolTip, etc. Useful classes which specifically \fIcan\fR be used are QImage, QFile, and QBuffer.
.PP
By structuring your plugin so that the task of the QNPInstance is to gather data, while the task of the QNPWidget is to provide a graphical interface to that data, this restriction can be easily accommodated.
.PP
Examples:
.(l
qtimage/qtimage.cpp grapher/grapher.cpp trivial/trivial.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QNPInstance::QNPInstance () \fC[protected]\fR"
Creates a QNPInstance. Can only be called from within a derived class created within QNPlugin::newInstance().
.SH "QNPInstance::~QNPInstance ()"
Called when the plugin instance is about to disappear.
.SH "const char* QNPInstance::arg ( const char * name ) const"
Returns the value of the named arguments, or 0 if no argument with that name appears in the <EMBED> tag of this instance. If the argument appears, but has no value assigned, the empty string is returned. In summary:
.TP
\fB<EMBED ...>\fR - arg("FOO") == 0
.TP
\fB<EMBED FOO ...>\fR - arg("FOO") == ""
.TP
\fB<EMBED FOO=BAR ...>\fR - arg("FOO") == "BAR"
.SH "int QNPInstance::argc () const"
Returns the number of arguments to the instance. Note that you should not normally rely on the ordering of arguments, and also note that the SGML specification does not permit multiple arguments with the same name.
.PP
See also: arg().
.SH "const char* QNPInstance::argn ( int i ) const"
Returns the name of the \fIi\fRth argument. See notes of argc().
.SH "const char* QNPInstance::argv ( int i ) const"
Returns the value of the \fIi\fRth argument. See notes of argc().
.SH "void* QNPInstance::getJavaPeer () const"
Returns the Java object associated with the plug-in instance, an object of the plug-in's Java class, or 0 if the plug-in does not have a Java class, Java is disabled, or an error occurred .
.PP
The return value is actually a \fCjref\fR we use \fCvoid*\fR so as to avoid burdening plugins which do not require Java.
.PP
See also: QNPlugin::getJavaClass(), QNPlugin::getJavaEnv(), getJavaPeer() and Netscape: NPN_GetJavaPeer
.SH "void QNPInstance::getURL ( const char * url, const char * window=0 )"
Requests that the given URL be retrieved and sent to the named window. See Netscape's JavaScript documentation for an explanation of window names.
.PP
See also: Netscape: NPN_GetURL method
.PP
Examples:
.(l
grapher/grapher.cpp
.)l
.SH "QNPInstance::InstanceMode QNPInstance::mode() const"
Returns the mode of the plugin.
.SH "QNPStream* QNPInstance::newStream ( const char * mimetype, const char * window, bool as_file=FALSE )"
Requests the creation of a new data stream \fIfrom\fR the plug-in. This function is not tested. It is an interface to the NPN_NewStream function of the Netscape Plugin API.
.PP
See also: Netscape: NPN_NewStream method
.SH "bool QNPInstance::newStreamCreated ( QNPStream *, StreamMode & smode ) \fC[virtual]\fR"
This function is called when a new stream has been created. The instance should return TRUE if it accepts the processing of the stream. If the instance requires the stream as a file, it should set \fIsmode\fR to AsFileOnly, in which case the data will be delivered some time later to the streamAsFile() function. Otherwise, the data will be delivered in chunks to the write() function which must consume at least as much data as was returned by the most recent call to writeReady().
.PP
Note that the AsFileOnly method is not supported by Netscape 2.0 and MS-Explorer 3.0. A future version of Qt will hide this problem.
.PP
See also: Netscape: NPP_NewStream method
.SH "QNPWidget* QNPInstance::newWindow () \fC[virtual]\fR"
Called at most once, at some time after the QNPInstance is created. If the plugin requires a window, this function should return a derived class of QNPWidget that provides the required interface.
.SH "void QNPInstance::postURL ( const char * url, const char * window, uint len, const char * buf, bool file )"
This function is not tested. It is an interface to the NPN_PostURL function of the Netscape Plugin API.
.PP
See also: Netscape: NPN_PostURL method
.SH "void QNPInstance::print ( QPainter * ) \fC[virtual]\fR"
Print the instance embedded in a page.
.PP
This function is not tested. It is an encapsulation of the NPP_Print function of the Netscape Plugin API.
.PP
See also: Netscape: NPP_Print method
.SH "bool QNPInstance::printFullPage () \fC[virtual]\fR"
Print the instance full-page. By default, this returns FALSE, causing the browser to call the (embedded) print() function instead.
.PP
This function is not tested. It is an encapsulation of the NPP_Print function of the Netscape Plugin API.
.PP
See also: Netscape: NPP_Print method
.SH "void QNPInstance::status ( const char * msg )"
Sets the status message in the browser containing this instance.
.PP
See also: Netscape: NPN_Status method
.SH "void QNPInstance::streamAsFile ( QNPStream *, const char * ) \fC[virtual]\fR"
Called when a stream is delivered as a single file rather than as chunks. This may be simpler for a plugin to deal with, but precludes any incremental behaviour.
.PP
See also: newStreamCreated(), newStream(), Note, that, the, AsFileOnly, method, is, not, supported, by, Netscape, 2.0, MS-Explorer, 3.0., See, also: and Netscape: NPP_StreamAsFile method
.SH "void QNPInstance::streamDestroyed ( QNPStream * ) \fC[virtual]\fR"
Called when a stream is destroyed. At this this, the stream may be complete() and okay(). If it is not okay(), then an error has occurred. If it is okay(), but not complete(), then the user has cancelled the transmission - do not give an error message in this case.
.PP
See also: Netscape: NPP_DestroyStream method
.SH "const char* QNPInstance::userAgent () const"
Returns the user agent (browser name) containing this instance.
.PP
See also: Netscape: NPN_UserAgent method
.SH "QNPWidget* QNPInstance::widget ()"
Returns the plugin window created at newWindow(), if any.
.PP
Examples:
.(l
grapher/grapher.cpp
.)l
.SH "int QNPInstance::write ( QNPStream *, int offset, int len, void * buffer ) \fC[virtual]\fR"
Called when incoming data is available for processing by the instance. The instance \fImust\fR consume at least the amount that it returned in the most recent call to writeReady(), but it may consume up to the amount given by \fIlen. buffer\fR is the data available for consumption. The \fIoffset\fR argument is merely an informational value indicating the total amount of data that has been consumed in prior calls.
.PP
This function should return the amount of data actually consumed.
.PP
See also: Netscape: NPP_NewStream method
.SH "int QNPInstance::writeReady ( QNPStream * ) \fC[virtual]\fR"
Called to inquire the minimum amount of data the instance is willing to receive from the given stream.
.PP
The default returns a very large value.
.PP
See also:
Netscape: NPP_WriteReady method
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qnpinstance.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
