.TH QByteArray 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QByteArray \- Array of bytes
.SH SYNOPSIS
.br
.PP
\fC#include <qstring.h>\fR
.PP
Inherits QArray.
.PP
Inherited by QBitArray and QString.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QByteArray ()"
.br
.ti -1c
.BI "QByteArray ( int size )"
.br
.ti -1c
.BI "QByteArray ( const QByteArray & a )"
.br
.ti -1c
.BI "\fB~QByteArray\fR ()"
.br
.ti -1c
.BI "QByteArray& operator= ( const QByteArray & a )"
.br
.ti -1c
.BI "char* data () const"
.br
.ti -1c
.BI "uint nrefs () const"
.br
.ti -1c
.BI "uint size () const"
.br
.ti -1c
.BI "bool isEmpty () const"
.br
.ti -1c
.BI "bool isNull () const"
.br
.ti -1c
.BI "bool resize ( uint size )"
.br
.ti -1c
.BI "bool truncate ( uint pos )"
.br
.ti -1c
.BI "bool fill ( const char & " "d" ", int " "size" "=-1 )"
.br
.ti -1c
.BI "virtual void detach ()"
.br
.ti -1c
.BI "QByteArray copy () const"
.br
.ti -1c
.BI "QByteArray& assign ( const QByteArray & a )"
.br
.ti -1c
.BI "QByteArray& assign ( const char * " "a" ", uint n )"
.br
.ti -1c
.BI "QByteArray& duplicate ( const QByteArray & a )"
.br
.ti -1c
.BI "QByteArray& duplicate ( const char * " "a" ", uint n )"
.br
.ti -1c
.BI "QByteArray& setRawData ( const char * " "a" ", uint n )"
.br
.ti -1c
.BI "void resetRawData ( const char * " "a" ", uint n )"
.br
.ti -1c
.BI "int find ( const char & " "d" ", uint " "i" "=0 ) const"
.br
.ti -1c
.BI "int contains ( const char & d ) const"
.br
.ti -1c
.BI "char& operator[] ( int i ) const"
.br
.ti -1c
.BI "char& at ( uint i ) const"
.br
.ti -1c
.BI "operator \fBconst char*\fR ()const"
.br
.ti -1c
.BI "bool operator== ( const QByteArray & a ) const"
.br
.ti -1c
.BI "bool operator!= ( const QByteArray & a ) const"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "QByteArray ( int, int )"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "Q_UINT16 qChecksum (const char * " "data" ", uint " "len" ")"
.br
.ti -1c
.BI "UINT16 qchecksum (const char * " "data" ", uint " "len" ")"
.br
.ti -1c
.BI "QDataStream & operator<< (QDataStream & " "s" ", const QByteArray & " "a" ")"
.br
.ti -1c
.BI "QDataStream & operator>> (QDataStream & " "s" ", QByteArray & " "a" ")"
.br
.in -1c
.SH DESCRIPTION
The QByteArray class provides an array of bytes.
.PP
QByteArray is defined as QArray<char>.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QByteArray::QByteArray ()"
Constructs a null array.
.PP
See also: isNull().
.SH "QByteArray::QByteArray ( const QByteArray & a )"
Constructs a shallow copy of \fIa.\fR
.PP
See also: assign().
.SH "QByteArray::QByteArray ( int size )"
Constructs an array with room for \fIsize\fR elements. Makes a null array if \fIsize\fR == 0.
.PP
Note that the elements are not initialized.
.PP
See also: resize() and isNull().
.SH "QByteArray::QByteArray ( int, int ) \fC[protected]\fR"
Constructs an array \fIwithout allocating\fR array space. The arguments should be (0, 0). Use at own risk.
.SH "QByteArray::~QByteArray ()"
Dereferences the array data and deletes it if this was the last reference.
.SH "QByteArray::operator const char * () const"
Cast operator. Returns a pointer to the array.
.PP
See also: data().
.SH "QByteArray & QByteArray::assign ( const QByteArray & a )"
Shallow copy. Dereferences the current array and references the data contained in \fIa\fR instead. Returns a reference to this array.
.PP
See also: operator=().
.SH "QByteArray & QByteArray::assign ( const char * data, uint size )"
Shallow copy. Dereferences the current array and references the array data \fIdata,\fR which contains \fIsize\fR elements. Returns a reference to this array.
.PP
Do not delete \fIdata\fR later, QArray takes care of that.
.SH "char & QByteArray::at ( uint index ) const"
Returns a reference to the element at position \fIindex\fR in the array.
.PP
This can be used to both read and set an element.
.PP
See also: operator[]().
.SH "int QByteArray::contains ( const char & v ) const"
Returns the number of times \fIv\fR occurs in the array.
.PP
See also: find().
.SH "QByteArray QByteArray::copy () const"
Returns a deep copy of this array.
.PP
See also: detach() and duplicate().
.SH "char * QByteArray::data () const"
Returns a pointer to the actual array data.
.PP
The array is a null array if data() == 0 (null pointer).
.PP
See also: isNull().
.SH "void QByteArray::detach () \fC[virtual]\fR"
Detaches this array from shared array data, i.e. makes a private, deep copy of the data.
.PP
Copying will only be performed if the reference count is greater than one.
.PP
See also: copy().
.PP
Reimplemented from QGArray.
.SH "QByteArray & QByteArray::duplicate ( const QByteArray & a )"
Deep copy. Dereferences the current array and obtains a copy of the data contained in \fIa\fR instead. Returns a reference to this array.
.PP
See also: copy().
.SH "QByteArray & QByteArray::duplicate ( const char * data, uint size )"
Deep copy. Dereferences the current array and obtains a copy of the array data \fIdata\fR instead. Returns a reference to this array.
.PP
See also: copy().
.SH "bool QByteArray::fill ( const char & v, int size=-1=-1 )"
Fills the array with the value \fIv.\fR If \fIsize\fR is specified as different from -1, then the array will be resized before filled.
.PP
Returns TRUE if successful, or FALSE if the memory cannot be allocated (only when \fIsize\fR != -1).
.PP
See also: resize().
.SH "int QByteArray::find ( const char & v, uint index=0 ) const"
Finds the first occurrence of \fIv,\fR starting at position \fIindex.\fR
.PP
Returns the position of \fIv,\fR or -1 if \fIv\fR could not be found.
.PP
See also: contains().
.SH "bool QByteArray::isEmpty () const"
Returns TRUE if the array is empty, i.e. size() == 0, otherwise FALSE.
.PP
isEmpty() is equivalent with isNull() for QArray. Note that this is not the case for QString::isEmpty().
.SH "bool QByteArray::isNull () const"
Returns TRUE if the array is null, otherwise FALSE.
.PP
A null array has size() == 0 and data() == 0.
.SH "uint QByteArray::nrefs () const"
Returns the reference count for the shared array data. This reference count is always greater than zero.
.SH "bool QByteArray::operator!= ( const QByteArray & a ) const"
Returns TRUE if this array is different from \fIa,\fR otherwise FALSE.
.PP
The two arrays are bitwise compared.
.PP
See also: operator==().
.SH "QByteArray & QByteArray::operator= ( const QByteArray & a )"
Assigns a shallow copy of \fIa\fR to this array and returns a reference to this array.
.PP
Equivalent to assign( a ).
.SH "bool QByteArray::operator== ( const QByteArray & a ) const"
Returns TRUE if this array is equal to \fIa,\fR otherwise FALSE.
.PP
The two arrays are bitwise compared.
.PP
See also: operator!=().
.SH "char & QByteArray::operator[] ( int index ) const"
Returns a reference to the element at position \fIindex\fR in the array.
.PP
This can be used to both read and set an element. Equivalent to at().
.PP
See also: at().
.SH "void QByteArray::resetRawData ( const char * data, uint size )"
Resets raw data that was set using setRawData().
.PP
The arguments must be the data and length that were passed to setRawData(). This is for consistency checking.
.PP
See also: setRawData().
.SH "bool QByteArray::resize ( uint size )"
Resizes (expands or shrinks) the array to \fIsize\fR elements. The array becomes a null array if \fIsize\fR == 0.
.PP
Returns TRUE if successful, or FALSE if the memory cannot be allocated.
.PP
New elements will not be initialized.
.PP
See also: size().
.SH "QByteArray & QByteArray::setRawData ( const char * data, uint size )"
Sets raw data and returns a reference to the array.
.PP
Dereferences the current array and sets the new array data to \fIdata\fR and the new array size to \fIsize.\fR Do not attempt to resize or re-assign the array data when raw data has been set. Call resetRawData(d,len) to reset the array.
.PP
Setting raw data is useful because it sets QArray data without allocating memory or copying data.
.PP
Example I (intended use):
.PP
.nf
.br
    static char bindata[] = { 231, 1, 44, ... };
.br
    QByteArray  a;
.br
    a.setRawData( bindata, sizeof(bindata) );   // a points to bindata
.br
    QDataStream s( a, IO_ReadOnly );            // open on a's data
.br
    s >> <something>;                           // read raw bindata
.br
    a.resetRawData( bindata, sizeof(bindata) ); // finished
.fi
.PP
Example II (you don't want to do this):
.PP
.nf
.br
    static char bindata[] = { 231, 1, 44, ... };
.br
    QByteArray  a, b;
.br
    a.setRawData( bindata, sizeof(bindata) );   // a points to bindata
.br
    a.resize( 8 );                              // will crash
.br
    b = a;                                      // will crash
.br
    a[2] = 123;                                 // might crash
.br
      // forget to resetRawData - will crash
.fi
.PP
\fBWarning:\fR If you do not call resetRawData(), QArray will attempt to deallocate or reallocate the raw data, which might not be too good. Be careful.
.PP
See also: resetRawData().
.SH "uint QByteArray::size () const"
Returns the size of the array (max number of elements).
.PP
The array is a null array if size() == 0.
.PP
See also: isNull() and resize().
.SH "bool QByteArray::truncate ( uint pos )"
Truncates the array at position \fIpos.\fR
.PP
Returns TRUE if successful, or FALSE if the memory cannot be allocated.
.PP
Equivalent to resize(\fIpos).\fR
.PP
See also: resize().
.SH RELATED FUNCTION DOCUMENTATION
.SH "Q_UINT16 qChecksum (const char * data, uint len)"
Returns the CRC-16 checksum of \fIlen\fR bytes starting at \fIdata.\fR
.PP
The checksum is independent of the byte order (endianness).
.SH "UINT16 qchecksum (const char * data, uint len)"
Please use qChecksum; this function is provided only for upward compatibility.
.SH "QDataStream & operator<< (QDataStream & s, const QByteArray & a)"
Writes a byte array to a stream and returns a reference to the stream.
.PP
The serialization format is the byte array size (\fCQ_UINT32)\fR followed by this number of bytes.
.SH "QDataStream & operator>> (QDataStream & s, QByteArray & a)"
Reads a byte array from a stream and returns a reference to the stream.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qbytearray.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
