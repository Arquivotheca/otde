.TH QTabBar 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QTabBar \- Tab bar, for use in e.g. tabbed dialogs
.SH SYNOPSIS
.br
.PP
\fC#include <qtabbar.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QTabBar ( QWidget * " "parent" " = 0, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "\fB~QTabBar\fR ()"
.br
.ti -1c
.BI "Shape shape () const"
.br
.ti -1c
.BI "void setShape ( Shape )"
.br
.ti -1c
.BI "virtual void show ()"
.br
.ti -1c
.BI "virtual int addTab ( QTab * )"
.br
.ti -1c
.BI "void setTabEnabled ( int, bool )"
.br
.ti -1c
.BI "bool isTabEnabled ( int ) const"
.br
.ti -1c
.BI "virtual QSize sizeHint () const"
.br
.ti -1c
.BI "int currentTab () const"
.br
.ti -1c
.BI "int keyboardFocusTab () const"
.br
.ti -1c
.BI "QTab* tab ( int )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void setCurrentTab ( int )"
.br
.ti -1c
.BI "void setCurrentTab ( QTab * )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void selected ( int )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void paint ( QPainter *, QTab *, bool ) const"
.br
.ti -1c
.BI "virtual QTab* selectTab ( const QPoint & p ) const"
.br
.ti -1c
.BI "virtual void paintEvent ( QPaintEvent * )"
.br
.ti -1c
.BI "virtual void mousePressEvent ( QMouseEvent * )"
.br
.ti -1c
.BI "virtual void mouseReleaseEvent ( QMouseEvent * )"
.br
.ti -1c
.BI "virtual void keyPressEvent ( QKeyEvent * )"
.br
.ti -1c
.BI "QListT<QTab>* tabList ()"
.br
.in -1c
.SH DESCRIPTION
The QTabBar class provides a tab bar, for use in e.g. tabbed dialogs.
.PP
The class is quite simple; it draws the tabs in one of four shapes and emits a signal when one is selected. It can be subclassed to tailor the look and feel.
.PP
The four possible shapes are 
.TP
\fCRoundedAbove\fR - (the default) rounded tabs to be located above the pages. 
.TP
\fCRoundedBelow\fR - rounded tabs to be located below the pages. 
.TP
\fCTriangularAbove\fR - triangular tabs to be located above the pages (very unusual, included for completeness). 
.TP
\fCTriangularBelow\fR - triangular tabs to be located below the pages. 
.PP
The choice of tab shape is still a matter of taste, to a large degree. Tab dialogs (preferences and the like) invariable use \fCRoundedAbove\fR and nobody uses \fCTriangularAbove.\fR Tab controls in windows other than dialogs almost always either \fCRoundedBelow\fR or \fCTriangularBelow.\fR Many spreadsheets and other tab controls where all the pages are essentially similar to use \fCTriangularBelow,\fR while \fCRoundedBelow\fR is used mostly when the pages are different (e.g. a multi-page tool palette). There is no strong tradition yet, however, so use your taste and create the tradition.
.PP
The most important part of QTabBar's API is the signal selected(). It's emitted whenever the selected page changes (even at startup, when the selected page changes from 'none'). There are also a slot, setCurrentTab(), which can be used to select a page programmatically.
.PP
QTabBar creates automatic accelerator keys in the manner of QButton; e.g. if a tab's label is "&Graphics" Alt-G becomes an accelerator key for switching to that tab.
.PP
The following virtual functions may need to be reimplemented: 
.TP
paint() paints a single tab. paintEvent() calls paint() for each tab in such a way that any overlap will look right. 
.TP
addTab() creates a new tab and adds it to the bar. 
.TP
selectTab() decides which, if any, tab the user selects with the mouse. 
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QTabBar::QTabBar ( QWidget * parent = 0, const char * name = 0 )"
Create a new, empty tab bar.
.SH "QTabBar::~QTabBar ()"
Delete the tab control and free the memory it used.
.SH "int QTabBar::addTab ( QTab * newTab ) \fC[virtual]\fR"
Add \fInewTab\fR to the tab control.
.PP
Allocate a new id, set t's id, locate it just to the right of the existing tabs, insert an accelerator if the tab's label contains the string "&p" for some value of p, add it to the bar, and return the newly allocated id.
.SH "int QTabBar::currentTab () const"
If a page is currently visible, returns its ID. If no page is currently visible, returns either -1 or the ID of one of the pages.
.PP
Even if the return value is not -1, you cannot assume either that the user can see the relevant page, or that the tab is enabled.
.PP
When you need to display something, the return value from this function represents the best page to display. That's all.
.PP
See also: selected().
.SH "bool QTabBar::isTabEnabled ( int id ) const"
Return TRUE if the tab with id \fIid\fR is enabled, or FALSE if it is disabled or there is no such tab.
.PP
See also: setTabEnabled().
.SH "void QTabBar::keyPressEvent ( QKeyEvent * e ) \fC[virtual protected]\fR"
Handles the tab bar's keyboard interface (if enabled).
.PP
The right and left arrow keys move a selector, the space bar makes the tab with the selector active. All other keys are ignored.
.PP
Reimplemented from QWidget.
.SH "int QTabBar::keyboardFocusTab () const"
If this tab control has keyboard focus, returns the ID of the tab Space will select. Otherwise, returns -1.
.SH "void QTabBar::mousePressEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Handles mouse press events; records what tab the mouse points to.
.PP
Reimplemented from QWidget.
.SH "void QTabBar::mouseReleaseEvent ( QMouseEvent * e ) \fC[virtual protected]\fR"
Handles mouse release events for the tab control. Checks that the mouse is released over the tab where it was pressed, and if it was, selects that tab.
.PP
Reimplemented from QWidget.
.SH "void QTabBar::paint ( QPainter * p, QTab * t, bool selected ) const \fC[virtual protected]\fR"
Paint the single tab \fIt\fR using \fIp.\fR If and only if \fIselected\fR is TRUE, \fIt\fR is currently selected.
.PP
This virtual function may be reimplemented to change the look of QTabBar. If you decide to reimplement it, you may also need to reimplement sizeHint().
.SH "void QTabBar::paintEvent ( QPaintEvent * e ) \fC[virtual protected]\fR"
Repaints the tab row. All the painting is done by paint(); paintEvent() only decides which tabs need painting and in what order.
.PP
See also: paint().
.PP
Reimplemented from QWidget.
.SH "QTab * QTabBar::selectTab ( const QPoint & p ) const \fC[virtual protected]\fR"
This virtual functions is called by the mouse event handlers to determine which tab is pressed. The default implementation returns a pointer to the tab whose bounding rectangle contains \fIp,\fR if exactly one tab's bounding rectangle contains \fIp.\fR It returns 0 else.
.PP
See also: mousePressEvent() and mouseReleaseEvent().
.SH "void QTabBar::selected ( int id ) \fC[signal]\fR"
QTabBar emits this signal whenever any tab is selected, whether by the program or the user. The argument \fIid\fR is the ID if the tab as returned by addTab().
.PP
show() is guaranteed to emit this signal, so that you can display your page in a slot connected to this signal.
.SH "void QTabBar::setCurrentTab ( QTab * tab ) \fC[slot]\fR"
"Raises" \fItab\fR and emits the selected() signal unless the tab was already current.
.PP
See also: currentTab() and selected().
.SH "void QTabBar::setCurrentTab ( int id ) \fC[slot]\fR"
"Raises" the tab with ID \fIid\fR and emits the selected() signal.
.PP
See also: currentTab(), selected() and tab().
.SH "void QTabBar::setShape ( Shape s )"
Sets the shape of this tab bar to \fIs\fR and refreshes the bar.
.SH "void QTabBar::setTabEnabled ( int id, bool enabled )"
Enable tab \fIid\fR if \fIenable\fR is TRUE, or disable it if \fIenable\fR is FALSE. If \fIid\fR is currently selected, setTabEnabled() makes another tab selected.
.PP
setTabEnabled() calls repaint() if this causes a change in \fIid's\fR status.
.PP
See also: update() and isTabEnabled().
.SH "QTabBar::Shape QTabBar::shape() const"
Returns the shape of this tab bar.
.PP
See also: setShape().
.SH "void QTabBar::show () \fC[virtual]\fR"
Shows the widget, and ensures that one tab is selected.
.PP
Reimplemented from QWidget.
.SH "QSize QTabBar::sizeHint () const \fC[virtual]\fR"
Returns a suitable size for the tab control.
.PP
Reimplemented from QWidget.
.SH "QTab * QTabBar::tab ( int id )"
Returns a pointer to the tab with ID \fIid,\fR or 0 if there is no such tab.
.SH "QListT<QTab> * QTabBar::tabList () \fC[protected]\fR"
The list of QTab objects added.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qtabbar.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
