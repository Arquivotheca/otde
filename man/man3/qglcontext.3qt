.TH QGLContext 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QGLContext \- Encapsulates an OpenGL rendering context [Qt OpenGL Extension]
.SH SYNOPSIS
.br
.PP
\fC#include <qgl.h>\fR
.PP
Inherits QGL.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QGLContext ( const QGLFormat & " "format" ", QPaintDevice * device )"
.br
.ti -1c
.BI "virtual \fB~QGLContext\fR ()"
.br
.ti -1c
.BI "virtual bool create ( const QGLContext * " "shareContext" " = 0 )"
.br
.ti -1c
.BI "bool isValid () const"
.br
.ti -1c
.BI "bool isSharing () const"
.br
.ti -1c
.BI "virtual void reset ()"
.br
.ti -1c
.BI "QGLFormat format () const"
.br
.ti -1c
.BI "virtual void setFormat ( const QGLFormat & format )"
.br
.ti -1c
.BI "virtual void makeCurrent ()"
.br
.ti -1c
.BI "virtual void swapBuffers ()"
.br
.ti -1c
.BI "QPaintDevice* device () const"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual bool chooseContext ( const QGLContext * " "shareContext" " = 0 )"
.br
.ti -1c
.BI "virtual void doneCurrent ()"
.br
.ti -1c
.BI "bool deviceIsPixmap () const"
.br
.ti -1c
.BI "bool windowCreated () const"
.br
.ti -1c
.BI "void setWindowCreated ( bool on )"
.br
.ti -1c
.BI "bool initialized () const"
.br
.ti -1c
.BI "void setInitialized ( bool on )"
.br
.in -1c
.SH DESCRIPTION
This class is defined in the \fBQt OpenGL Extension\fR, which can be found in the \fCqt/extensions\fR directory. It is not included in the main Qt API.
.PP
The QGLContext class encapsulates an OpenGL rendering context.
.PP
An OpenGL rendering context is a complete set of OpenGL state variables.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QGLContext::QGLContext ( const QGLFormat & format, QPaintDevice * device )"
Constructs an OpenGL context for the paint device \fIdevice,\fR which can be a widget or a pixmap. The \fIformat\fR specifies several display options for this context.
.PP
If the underlying OpenGL/Window system cannot satisfy all the features requested in \fIformat,\fR the nearest subset of features will be used. After creation, the format() method will return the actual format obtained.
.PP
The context will be invalid if it was not possible to obtain a GL context at all.
.PP
See also: format() and isValid().
.SH "QGLContext::~QGLContext () \fC[virtual]\fR"
Destroys the OpenGL context.
.SH "bool QGLContext::chooseContext ( const QGLContext * shareContext = 0 = 0 ) \fC[virtual protected]\fR"
This semi-internal function is called by create(). It creates a system-dependent OpenGL handle that matches the specified format as closely as possible.
.PP
\fBWindows\fR: Calls choosePixelFormat() which finds a matching pixel format identifier.
.PP
\fBX11\fR: Calls chooseVisual() which finds an appropriate X visual.
.PP
choosePixelFormat() and chooseVisual() can be reimplemented in a subclass if you need to choose a very custom context.
.SH "bool QGLContext::create ( const QGLContext * shareContext = 0 ) \fC[virtual]\fR"
Creates the GL context. Returns TRUE if it was successful in creating a GL rendering context on the paint device specified in the constructor, otherwise FALSE is returned (the context is invalid).
.PP
After successful creation, format() returns the set of features of the created GL rendering context.
.PP
If \fIshareContext\fR points to a valid QGLContext, this method will try to establish OpenGL display list sharing between this context and \fIshareContext.\fR Note that this may fail if the two contexts have different formats. Use isSharing() to test.
.PP
\fBImplementation note:\fR Initialization of C++ class members usually takes place in the class constructor. QGLContext is an exception because it must be simple to customize. The virtual functions chooseContext() (and chooseVisual() for X11) can be reimplemented in a subclass to select a particular context. The trouble is that virtual functions are not properly called during construction (which is indeed correct C++), hence we need a create() function.
.PP
See also: chooseContext(), format() and isValid().
.SH "QPaintDevice* QGLContext::device () const"
Returns the paint device set for this context.
.PP
See also: QGLContext::QGLContext().
.SH "bool QGLContext::deviceIsPixmap () const \fC[protected]\fR"
Returns TRUE if the paint device of this context is a pixmap, otherwise FALSE.
.SH "void QGLContext::doneCurrent () \fC[virtual protected]\fR"
Makes no GL context the current context. Normally, you do not need to call this function, QGLContext calls it as necessary.
.SH "QGLFormat QGLContext::format () const"
Returns the format.
.PP
See also: setFormat().
.SH "bool QGLContext::initialized () const \fC[protected]\fR"
Returns TRUE if this context has been initialized, i.e. if QGLWidget::initializeGL() has been performed on it.
.PP
See also: setInitialized().
.SH "bool QGLContext::isSharing () const"
Returns TRUE if display list sharing with another context was requested in the create() call, and the GL system was able to fulfill this request. Note that display list sharing may possibly not be supported between contexts with different formats.
.SH "bool QGLContext::isValid () const"
Returns TRUE if a GL rendering context has been successfully created.
.SH "void QGLContext::makeCurrent () \fC[virtual]\fR"
Makes this context the current OpenGL rendering context. All GL functions you call operate on this context until another context is made current.
.SH "void QGLContext::reset () \fC[virtual]\fR"
Resets the context and makes it invalid.
.PP
See also: create() and isValid().
.SH "void QGLContext::setFormat ( const QGLFormat & format ) \fC[virtual]\fR"
Sets a \fIformat\fR for this context. The context is reset.
.PP
Call create() to create a new GL context that tries to match the new format.
.PP
.nf
.br
    QGLContext *cx;
.br
      ...
.br
    QGLFormat f;
.br
    f.setStereo( TRUE );
.br
    cx->setFormat( f );
.br
    if ( !cx->create() )
.br
        exit(); // no OpenGL support, or cannot render on specified paintdevice
.br
    if ( !cx->format().stereo() )
.br
        exit(); // could not create stereo context
.fi
.PP
See also: format(), reset() and create().
.SH "void QGLContext::setInitialized ( bool on ) \fC[protected]\fR"
Tells the context whether it has been initialized, i.e. whether QGLWidget::initializeGL() has been performed on it.
.PP
See also: initialized().
.SH "void QGLContext::setWindowCreated ( bool on ) \fC[protected]\fR"
Tells the context whether a window has already been created for it.
.PP
See also: windowCreated().
.SH "void QGLContext::swapBuffers () \fC[virtual]\fR"
Swaps the screen contents with an off-screen buffer. Works only if the context is in double buffer mode.
.PP
See also: QGLFormat::setDoubleBuffer().
.SH "bool QGLContext::windowCreated () const \fC[protected]\fR"
Returns TRUE if a window has been created for this context, otherwise FALSE.
.PP
See also:  setWindowCreated().
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qglcontext.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
