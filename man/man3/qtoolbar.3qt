.TH QToolBar 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QToolBar \- Simple tool bar
.SH SYNOPSIS
.br
.PP
\fC#include <qtoolbar.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QToolBar ( const char * " "label" ", QMainWindow *, QMainWindow::ToolBarDock = QMainWindow::Top, bool " "newLine" " = FALSE, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "QToolBar ( const char * " "label" ", QMainWindow *, QWidget *, bool " "newLine" " = FALSE, const char * " "name" " = 0, WFlags " "f" " = 0 )"
.br
.ti -1c
.BI "QToolBar ( QMainWindow * " "parent" " = 0, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "\fB~QToolBar\fR ()"
.br
.ti -1c
.BI "void addSeparator ()"
.br
.ti -1c
.BI "virtual void setOrientation ( Orientation )"
.br
.ti -1c
.BI "Orientation orientation () const"
.br
.ti -1c
.BI "virtual void show ()"
.br
.ti -1c
.BI "QMainWindow* mainWindow ()"
.br
.ti -1c
.BI "void setStretchableWidget ( QWidget * )"
.br
.ti -1c
.BI "virtual bool event ( QEvent * e )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void paintEvent ( QPaintEvent * )"
.br
.in -1c
.SH DESCRIPTION
The QToolBar class provides a simple tool bar.
.PP
To use QToolBar, you simply create a QToolBar as child of a QMainWindow, create a number of QToolButton widgets (or other widgets) in left to right (or top to bottom) order, call addSeparator() when you want a separator, and that's all.
.PP
The application/application.cpp example does precisely this.
.PP
Each QToolBar lives in a dock in a QMainWindow, and can optionally start a new line in its dock. Tool bars that start a new line are always positioned at the left end or top of the tool bar dock; others are placed next to the previous tool bar and word-wrapped as necessary.
.PP
The tool bar is able to arrange its buttons horizontally or vertically (see setOrientation() for details) and draws the appropriate frames around the tool button in Windows and Motif style. Generally, QMainWindow will set the orientation correctly for you.
.PP
See also: QToolButton, QMainWindow, Parts of Isys on Visual Design,, Microsoft Style Guide,, some common buttons (NB: read the license), and GUI Design Handbook: Tool Bar.
.PP
Examples:
.(l
application/application.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QToolBar::QToolBar ( QMainWindow * parent = 0, const char * name = 0 )"
Constructs an empty tool bar in the top dock of its parent, without any label and without requiring a newline. This is mostly useless.
.SH "QToolBar::QToolBar ( const char * label, QMainWindow * mainWindow, QWidget * parent, bool newLine = FALSE, const char * name = 0, WFlags f = 0 )"
Constructs an empty horizontal tool bar which is a parent of \fIparent\fR and managed by \fImainWindow.\fR The \fIlabel\fR and \fInewLine\fR are passed straight to QMainWindow::addToolBar(). \fIname\fR is the object name and \fIf\fR is the widget flags.
.PP
This is the constructor to use if you want to create torn-off toolbars, or toolbars in the status bar.
.SH "QToolBar::QToolBar ( const char * label, QMainWindow * parent, QMainWindow::ToolBarDock dock = QMainWindow::Top, bool newLine = FALSE, const char * name = 0 )"
Constructs an empty tool bar which is a chilf od \fIparent\fR and managed by \fIparent,\fR initially in \fIdock,\fR labelled \fIand\fR starting a new line in the dock if \fInewLine\fR is TRUE. \fIname\fR is the object name, as usual.
.SH "QToolBar::~QToolBar ()"
Destroys the object and frees any allocated resources.
.SH "void QToolBar::addSeparator ()"
Adds a separator in here. Cool, man.
.SH "bool QToolBar::event ( QEvent * e ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "QMainWindow * QToolBar::mainWindow ()"
Returns a pointer to the QMainWindow which controls this tool bar.
.SH "QToolBar::Orientation QToolBar::orientation() const"
Returns the current orientation of the toolbar.
.SH "void QToolBar::paintEvent ( QPaintEvent * ) \fC[virtual protected]\fR"
Paint the handle. The Motif style is rather close to Netscape and even closer to KDE.
.PP
Reimplemented from QWidget.
.SH "void QToolBar::setOrientation ( Orientation newOrientation ) \fC[virtual]\fR"
Sets this toolbar to organize its content vertically if \fInewOrientation\fR is \fCVertical\fR and horizontally if \fInewOrientation\fR is \fCHorizontal.\fR
.SH "void QToolBar::setStretchableWidget ( QWidget * w )"
Sets \fIw\fR to be expanded if this toolbar is requested to stretch (because QMainWindow right-justifies the dock it's in).
.SH "void QToolBar::show () \fC[virtual]\fR"
Reimplemented to set up geometry management.
.PP
Reimplemented from QWidget.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qtoolbar.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
