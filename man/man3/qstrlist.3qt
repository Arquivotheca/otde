.TH QStrList 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QStrList \- Doubly linked list of \fCchar*.\fR
.SH SYNOPSIS
.br
.PP
\fC#include <qstrlist.h>\fR
.PP
Inherits QList.
.PP
Inherited by QStrIList.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QStrList ( bool " "deepCopies" "=TRUE )"
.br
.ti -1c
.BI "QStrList ( const QStrList & )"
.br
.ti -1c
.BI "\fB~QStrList\fR ()"
.br
.ti -1c
.BI "QStrList& operator= ( const QStrList & )"
.br
.in -1c
.SH DESCRIPTION
The QStrList class provides a doubly linked list of \fCchar*.\fR
.PP
This class is a QList<char> instance (a list of char*).
.PP
QStrList can make deep or shallow copies of the strings that are inserted.
.PP
A deep copy means to allocate space for the string and then copy the string data into it. A shallow copy is just a copy of the pointer value and not the string data.
.PP
The disadvantage with shallow copies is that since a pointer can only be deleted once, the program must put all strings in a central place and know when it is safe to delete them (i.e. when the strings are no longer referenced by other parts of the program). This can make the program more complex. The advantage of shallow copies is that shallow copies consume far less memory than deep copies. It is also much faster to copy a pointer (typically 4 or 8 bytes) than to copy string data.
.PP
The virtual compareItems() function is reimplemented and does a case sensitive string comparision. The inSort() function will insert strings in a sorted order.
.PP
The QStrListIterator class is an iterator for QStrList.
.PP
Examples:
.(l
showimg/showimg.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QStrList::QStrList ( bool deepCopies=TRUE )"
Constructs an empty list of strings. Will make deep copies of all inserted strings if \fIdeepCopies\fR is TRUE, or uses shallow copies if \fIdeepCopies\fR is FALSE.
.SH "QStrList::QStrList ( const QStrList & list )"
Constructs a copy of \fIlist.\fR
.PP
If \fIlist\fR has deep copies, this list will also get deep copies. Only the pointers are copied (shallow copy) if the other list does not use deep copies.
.SH "QStrList::~QStrList ()"
Destroys the list. All strings are removed.
.SH "QStrList& QStrList::operator= ( const QStrList & list )"
Assigns \fIlist\fR to this list and returns a reference to this list.
.PP
If \fIlist\fR has deep copies, this list will also get deep copies.
Only the pointers are copied (shallow copy) if the other list does not
use deep copies.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qstrlist.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
