.TH QGLFormat 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QGLFormat \- The display format of an OpenGL rendering context [Qt OpenGL Extension]
.SH SYNOPSIS
.br
.PP
\fC#include <qgl.h>\fR
.PP
Inherits QGL.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QGLFormat ()"
.br
.ti -1c
.BI "QGLFormat ( int options )"
.br
.ti -1c
.BI "bool doubleBuffer () const"
.br
.ti -1c
.BI "void setDoubleBuffer ( bool enable )"
.br
.ti -1c
.BI "bool depth () const"
.br
.ti -1c
.BI "void setDepth ( bool enable )"
.br
.ti -1c
.BI "bool rgba () const"
.br
.ti -1c
.BI "void setRgba ( bool enable )"
.br
.ti -1c
.BI "bool alpha () const"
.br
.ti -1c
.BI "void setAlpha ( bool enable )"
.br
.ti -1c
.BI "bool accum () const"
.br
.ti -1c
.BI "void setAccum ( bool enable )"
.br
.ti -1c
.BI "bool stencil () const"
.br
.ti -1c
.BI "void setStencil ( bool enable )"
.br
.ti -1c
.BI "bool stereo () const"
.br
.ti -1c
.BI "void setStereo ( bool enable )"
.br
.ti -1c
.BI "bool directRendering () const"
.br
.ti -1c
.BI "void setDirectRendering ( bool enable )"
.br
.ti -1c
.BI "void setOption ( FormatOption opt )"
.br
.ti -1c
.BI "bool testOption ( FormatOption opt ) const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QGLFormat defaultFormat ()"
.br
.ti -1c
.BI "void setDefaultFormat ( const QGLFormat & f )"
.br
.ti -1c
.BI "bool hasOpenGL ()"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "const char * qGLVersion ()"
.br
.in -1c
.SH DESCRIPTION
This class is defined in the \fBQt OpenGL Extension\fR, which can be found in the \fCqt/extensions\fR directory. It is not included in the main Qt API.
.PP
The QGLFormat class specifies the display format of an OpenGL rendering context.
.PP
A display format has several characteristics:
.TP
Double or single buffering.
.TP
Depth buffer.
.TP
RGBA or color index mode.
.TP
Alpha channel.
.TP
Accumulation buffer.
.TP
Stencil buffer.
.TP
Stereo buffers.
.TP
Direct rendering..
.PP
You create and tell a QGLFormat object what rendering options you want from an OpenGL rendering context.
.PP
OpenGL drivers or accelerated hardware may or may not support advanced features like alpha channel or stereographic viewing. If you request some features the driver/hardware does not provide when you create a QGLWidget, you will get the a rendering context with the nearest subset of features.
.PP
There are different ways of defining the display characteristics of a rendering context. One is to create a QGLFormat and make it default for the entire application:
.PP
.nf
.br
    QGLFormat f;
.br
    f.setAlpha( TRUE );
.br
    f.setStereo( TRUE );
.br
    QGLFormat::setDefaultFormat( f );
.fi
.PP
Or you can specify the desired format when creating an object of your QGLWidget subclass:
.PP
.nf
.br
    QGLFormat f;
.br
    f.setDoubleBuffer( FALSE );
.br
    f.setDirectRendering( FALSE );
.br
    MyGLWidget* myWidget = new MyGLWidget( f, ... );
.fi
.PP
You can even set the format for an already existing QGLWidget:
.PP
.nf
.br
    MyGLWidget *w;
.br
      ...
.br
    QGLFormat f;
.br
    f.setAlpha( TRUE );
.br
    f.setStereo( TRUE );
.br
    w->setFormat( f );
.br
    if ( !w->format().stereo() ) {
.br
        // ok, goggles off
.br
        if ( !w->format().alpha() ) {
.br
            fatal( "Cool hardware wanted" );
.br
        }
.br
    }
.fi
.PP
See also: QGLContext and QGLWidget.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QGLFormat::QGLFormat ()"
Constructs a QGLFormat object with the factory default settings:
.TP
Double buffer: Enabled.
.TP
Depth buffer: Enabled.
.TP
RGBA: Enabled (i.e. color index disabled).
.TP
Alpha channel: Disabled.
.TP
Accumulator buffer: Disabled.
.TP
Stencil buffer: Disabled.
.TP
Stereo: Disabled.
.TP
Direct rendering: Enabled.
.SH "QGLFormat::QGLFormat ( int options )"
Creates a QGLFormat object that is a copy of the current application default format.
.PP
If \fIoptions\fR is not 0, this copy will be modified by these format options. The \fIoptions\fR parameter must be FormatOption values OR'ed together.
.PP
This constructor makes it easy to specify a certain desired format in classes derived from QGLWidget, for example:
.PP
.nf
.br
    // The rendering in MyGLWidget depends on using
.br
.br
    // stencil buffer and alpha channel
.br
    MyGLWidget::MyGLWidget( QWidget* parent, const char* name )
.br
        : QGLWidget( QGLFormat( StencilBuffer | AlphaChannel ), parent, name )
.br
    {
.br
      if ( !format().stencil() )
.br
        warning( "Could not get stencil buffer; results will be suboptimal" );
.br
      if ( !format().alphaChannel() )
.br
        warning( "Could not get alpha channel; results will be suboptimal" );
.br
      ...
.br
   }
.fi
.PP
Note that there exists FormatOption values for both turning on and off all format settings, e.g. DepthBuffer and NoDepthBuffer, DirectRendering and IndirectRendering, etc.
.PP
See also: defaultFormat() and setOption().
.SH "bool QGLFormat::accum () const"
Returns TRUE if the accumulation buffer is enabled, otherwise FALSE. The accumulation buffer is disabled by default.
.PP
See also: setAccum().
.SH "bool QGLFormat::alpha () const"
Returns TRUE if the alpha channel of the framebuffer is enabled, otherwise FALSE. The alpha channel is disabled by default.
.PP
See also: setAlpha().
.SH "QGLFormat QGLFormat::defaultFormat () \fC[static]\fR"
Returns the default QGLFormat for the application. All QGLWidgets that are created use this format unless anything else is specified.
.PP
If no special default format has been set using setDefaultFormat(), the default format is the same as that created with QGLFormat().
.PP
See also: setDefaultFormat().
.SH "bool QGLFormat::depth () const"
Returns TRUE if the depth buffer is enabled, otherwise FALSE. The depth buffer is enabled by default.
.PP
See also: setDepth().
.SH "bool QGLFormat::directRendering () const"
Returns TRUE if direct rendering is enabled, otherwise FALSE.
.PP
Direct rendering is enabled by default.
.PP
See also: setDirectRendering().
.SH "bool QGLFormat::doubleBuffer () const"
Returns TRUE if double buffering is enabled, otherwise FALSE. Double buffering is enabled by default.
.PP
See also: setDoubleBuffer().
.SH "bool QGLFormat::hasOpenGL () \fC[static]\fR"
Returns TRUE if the window system has any OpenGL support, otherwise FALSE.
.SH "bool QGLFormat::rgba () const"
Returns TRUE if RGBA color mode is set, or FALSE if color index mode is set. The default color mode is RGBA.
.PP
See also: setRgba().
.SH "void QGLFormat::setAccum ( bool enable )"
Enables the accumulation buffer if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
The accumulation buffer is disabled by default.
.PP
The accumulation buffer is used for create blur effects and multiple exposures.
.PP
See also: accum().
.SH "void QGLFormat::setAlpha ( bool enable )"
Enables the alpha channel of the framebuffer if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
The alpha buffer is disabled by default.
.PP
The alpha channel is typically used for implementing transparency or translucency. The A in RGBA specifies the transparency of a pixel.
.PP
See also: alpha().
.SH "void QGLFormat::setDefaultFormat ( const QGLFormat & f ) \fC[static]\fR"
Sets a new default QGLFormat for the application. For example, to set single buffering as default instead of double buffering, your main() can contain:
.PP
.nf
.br
    QApplication a(argc, argv);
.br
    QGLFormat f;
.br
    f.setDoubleBuffer( FALSE );
.br
    QGLFormat::setDefaultFormat( f );
.fi
.PP
See also: defaultFormat().
.SH "void QGLFormat::setDepth ( bool enable )"
Enables the depth buffer if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
The depth buffer is enabled by default.
.PP
The purpose of a depth buffer (or z-buffering) is to remove hidden surfaces. Pixels are assigned z values based on the distance to the viewer. A pixel with a high z value is closer to the viewer than a pixel with a low z value. This information is used to decide whether to draw a pixel or not.
.PP
See also: depth().
.SH "void QGLFormat::setDirectRendering ( bool enable )"
Enables direct rendering if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
Direct rendering is enabled by default.
.PP
Enabling this option will make OpenGL bypass the underlying window system and render directly from hardware to the screen, if this is supported by the system.
.PP
See also: directRendering().
.SH "void QGLFormat::setDoubleBuffer ( bool enable )"
Sets double buffering if \fIenable\fR is TRUE og single buffering if \fIenable\fR is FALSE.
.PP
Double buffering is enabled by default.
.PP
Double buffering is a technique where graphics is rendered to an off-screen buffer and not directly to the screen. When the drawing has been completed, the program calls a swapBuffers function to exchange the screen contents with the buffer. The result is flicker-free drawing and often better performance.
.PP
See also: doubleBuffer(), QGLContext::swapBuffers() and QGLWidget::swapBuffers().
.SH "void QGLFormat::setOption ( FormatOption opt )"
Sets the option \fIopt.\fR
.PP
See also: testOption().
.SH "void QGLFormat::setRgba ( bool enable )"
Sets RGBA mode if \fIenable\fR is TRUE, or color index mode if \fIenable\fR is FALSE.
.PP
The default color mode is RGBA.
.PP
RGBA is the preferred mode for most OpenGL applications. In RGBA color mode you specify colors as a red + green + blue + alpha quadruplet.
.PP
In color index mode you specify an index into a color lookup table.
.PP
See also: rgba().
.SH "void QGLFormat::setStencil ( bool enable )"
Enables the stencil buffer if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
The stencil buffer is disabled by default.
.PP
The stencil buffer masks away drawing from certain parts of the screen.
.PP
See also: stencil().
.SH "void QGLFormat::setStereo ( bool enable )"
Enables stereo buffering if \fIenable\fR is TRUE, or disables it if \fIenable\fR is FALSE.
.PP
Stereo buffering is disabled by default.
.PP
Stereo buffering provides extra color buffers to generate left-eye and right-eye images.
.PP
See also: stereo().
.SH "bool QGLFormat::stencil () const"
Returns TRUE if the stencil buffer is enabled, otherwise FALSE. The stencil buffer is disabled by default.
.PP
See also: setStencil().
.SH "bool QGLFormat::stereo () const"
Returns TRUE if stereo buffering is enabled, otherwise FALSE. Stereo buffering is disabled by default.
.PP
See also: setStereo().
.SH "bool QGLFormat::testOption ( FormatOption opt ) const"
Returns TRUE if format option \fIopt\fR is set, otherwise FALSE.
.PP
See also: setOption().
.SH RELATED FUNCTION DOCUMENTATION
.SH "const char * qGLVersion ()"
Returns the version number string for the Qt OpenGL extension,
e.g. "1.0".
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qglformat.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
