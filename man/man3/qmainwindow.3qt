.TH QMainWindow 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QMainWindow \- Typical application window, with a menu bar, some tool bars and a status bar
.SH SYNOPSIS
.br
.PP
\fC#include <qmainwindow.h>\fR
.PP
Inherits QWidget.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QMainWindow ( QWidget * " "parent" " = 0, const char * " "name" " = 0, WFlags " "f" " = 0 )"
.br
.ti -1c
.BI "\fB~QMainWindow\fR ()"
.br
.ti -1c
.BI "QMenuBar* menuBar () const"
.br
.ti -1c
.BI "QStatusBar* statusBar () const"
.br
.ti -1c
.BI "QToolTipGroup* toolTipGroup () const"
.br
.ti -1c
.BI "virtual void setCentralWidget ( QWidget * )"
.br
.ti -1c
.BI "QWidget* centralWidget () const"
.br
.ti -1c
.BI "enum ToolBarDock { Unmanaged, TornOff, Top, Bottom, Right, Left }"
.br
.ti -1c
.BI "void setDockEnabled ( ToolBarDock " "dock" ", bool enable )"
.br
.ti -1c
.BI "bool isDockEnabled ( ToolBarDock dock ) const"
.br
.ti -1c
.BI "void addToolBar ( QToolBar *, const char * " "label" ", ToolBarDock = Top, bool " "newLine" " = FALSE )"
.br
.ti -1c
.BI "void removeToolBar ( QToolBar * )"
.br
.ti -1c
.BI "virtual void show ()"
.br
.ti -1c
.BI "bool rightJustification () const"
.br
.ti -1c
.BI "bool usesBigPixmaps () const"
.br
.ti -1c
.BI "virtual bool eventFilter ( QObject *, QEvent * )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void setRightJustification ( bool )"
.br
.ti -1c
.BI "void setUsesBigPixmaps ( bool )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void pixmapSizeChanged ( bool )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void paintEvent ( QPaintEvent * )"
.br
.ti -1c
.BI "virtual bool event ( QEvent * )"
.br
.in -1c
.SS "Protected Slots"
.in +1c
.ti -1c
.BI "void setUpLayout ()"
.br
.in -1c
.SH DESCRIPTION
The QMainWindow class provides a typical application window, with a menu bar, some tool bars and a status bar.
.PP
In addition, you need the large central widget, which you supply and tell QMainWindow about using setCentralWidget(), and perhaps a few tool bars, which you can add using addToolBar().
.PP
The central widget is not touched by QMainWindow. QMainWindow manages its geometry, and that is all. For example, the application/application.cpp exmple (an editor) sets a QMultiLineEdit to be the central widget.
.PP
QMainWindow automatically detects the creation of a menu bar or status bar if you specify the QMainWindow as parent, or you can use the provided menuBar() and statusBar() functions. menuBar() and statusBar() create a suitable widget if one doesn't exist, and updates the window's layout to make space.
.PP
QMainWindow also provides a QToolTipGroup connected to the status bar. toolTipGroup() provides access to the QToolTipGroup, but there is no way to set the tool tip group.
.PP
By default, QMainWindow only allows toolbars above the central widget. You can use setDockEnabled() to allow toolbars in other docks (a \fIdock\fR is a place where toolbars can stay). Currently, only \fCTop, Left, Right\fR and \fCBottom\fR are meaningful.
.PP
Several functions let you change the appearance of a QMainWindow globally: setRightJustification() determines whether QMainWindow should ensure that the toolbars fill the available space, setUsesBigPixmaps() determines whether QToolButton (and other classes) should draw small or large pixmaps (see QIconSet for more about that).
.PP
The current release of QMainWindow does not provide draggable toolbars. This feature is planned for inclusion in one of the next releases.
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also: QToolBar, QStatusBar, QMenuBar, QToolTipGroup and QDialog.
.PP
Examples:
.(l
application/application.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QMainWindow::QMainWindow ( QWidget * parent = 0, const char * name = 0, WFlags f = 0 )"
Constructs an empty main window.
.SH "QMainWindow::~QMainWindow ()"
Destroys the object and frees any allocated resources.
.SH "void QMainWindow::addToolBar ( QToolBar * toolBar, const char * label, ToolBarDock edge = Top, bool nl = FALSE )"
Adds \fItoolbar\fR to this the \fIedge\fR window of this window.
.SH "QWidget * QMainWindow::centralWidget () const"
Returns a pointer to the main child of this main widget. The main child is the big widget around which the tool bars are arranged.
.PP
See also: setCentralWidget().
.SH "bool QMainWindow::event ( QEvent * e ) \fC[virtual protected]\fR"
Monitors events to ensure layout is updated.
.PP
Reimplemented from QObject.
.SH "bool QMainWindow::eventFilter ( QObject * o, QEvent * e ) \fC[virtual]\fR"
Monitors events to ensure layout is updated.
.PP
Reimplemented from QObject.
.SH "bool QMainWindow::isDockEnabled ( ToolBarDock dock ) const"
Returns TRUE if \fIdock\fR is enabled, or FALSE if it is not.
.PP
See also: setDockEnabled().
.SH "QMenuBar * QMainWindow::menuBar () const"
Returns the menu bar for this window. If there isn't any, menuBar() creates an empty menu bar on the fly.
.PP
See also: statusBar().
.PP
Examples:
.(l
application/application.cpp
.)l
.SH "void QMainWindow::paintEvent ( QPaintEvent * ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "void QMainWindow::pixmapSizeChanged ( bool ) \fC[signal]\fR"
This signal is called whenever the setUsesBigPixmaps() is called with a value which is different from the current setting. All relevant widgets must connect to this signal.
.SH "void QMainWindow::removeToolBar ( QToolBar * toolBar )"
Removes \fItoolBar\fR from this main window, if \fItoolBar\fR is non-null and known by this main window.
.SH "bool QMainWindow::rightJustification () const"
Returns TRUE if this main windows right-justifies its toolbars, and FALSE if it uses a ragged right edge.
.PP
The default is to use a ragged right edge.
.PP
("Right edge" sometimes means "bottom edge".)
.PP
See also: setRightJustification().
.SH "void QMainWindow::setCentralWidget ( QWidget * w ) \fC[virtual]\fR"
Sets the central widget for this window to \fIw.\fR The centail widget is the one around which the toolbars etc. are arranged.
.PP
Examples:
.(l
application/application.cpp
.)l
.SH "void QMainWindow::setDockEnabled ( ToolBarDock dock, bool enable )"
Sets \fIdock\fR to be available if \fIenable\fR is TRUE, and not available if \fIenable\fR is FALSE.
.PP
The user can drag a toolbar to any enabled dock.
.SH "void QMainWindow::setRightJustification ( bool enable ) \fC[slot]\fR"
Sets this main window to expand its toolbars to fill all available space if \fIenable\fR is TRUE, and to give the toolbars just the space they need if \fIenable\fR is FALSE.
.PP
The default is FALSE.
.PP
See also: rightJustification();.
.SH "void QMainWindow::setUpLayout () \fC[protected slot]\fR"
Sets up the geometry management of this window. Called automatically when needed, so you should never need to call this.
.SH "void QMainWindow::setUsesBigPixmaps ( bool enable ) \fC[slot]\fR"
Sets tool buttons in this main windows to use big pixmaps if \fIenable\fR is TRUE, and small pixmaps if \fIenable\fR is FALSE.
.PP
The default is FALSE.
.PP
Tool buttons and other interested widgets are responsible for reading the correct state on startup, and for connecting to this widget's pixmapSizeChanged() signal.
.PP
See also: QToolButton::setUsesBigPixmap().
.SH "void QMainWindow::show () \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Examples:
.(l
application/application.cpp
.)l
.PP
Reimplemented from QWidget.
.SH "QStatusBar * QMainWindow::statusBar () const"
Returns the status bar for this window. If there isn't any, statusBar() creates an empty status bar on the fly, and if necessary a tool tip group too.
.PP
See also: setMenuBar(), statusBar() and toolTipGroup().
.PP
Examples:
.(l
application/application.cpp
.)l
.SH "QToolTipGroup * QMainWindow::toolTipGroup () const"
Returns the tool tip group for this window. If there isn't any, menuBar() creates an empty tool tip group on the fly.
.PP
See also: menuBar() and statusBar().
.SH "bool QMainWindow::usesBigPixmaps () const"
Returns the state last set by setUsesBigPixmaps(). The initial state is FALSE.
.PP
See also:  setUsesBigPixmaps();.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qmainwindow.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
