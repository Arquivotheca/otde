.TH QPixmap 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QPixmap \- Off-screen pixel-based paint device
.SH SYNOPSIS
.br
.PP
\fC#include <qpixmap.h>\fR
.PP
Inherits QPaintDevice.
.PP
Inherited by QBitmap.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QPixmap ()"
.br
.ti -1c
.BI "QPixmap ( int " "w" ", int " "h" ", int " "depth" "=-1 )"
.br
.ti -1c
.BI "QPixmap ( const QSize &, int " "depth" "=-1 )"
.br
.ti -1c
.BI "QPixmap ( const char * " "fileName" ", const char * " "format" "=0, ColorMode " "mode" "=Auto )"
.br
.ti -1c
.BI "QPixmap ( const char * " "fileName" ", const char * " "format" ", int conversion_flags )"
.br
.ti -1c
.BI "QPixmap ( const char * xpm[] )"
.br
.ti -1c
.BI "QPixmap ( const QPixmap & )"
.br
.ti -1c
.BI "\fB~QPixmap\fR ()"
.br
.ti -1c
.BI "QPixmap& operator= ( const QPixmap & )"
.br
.ti -1c
.BI "QPixmap& operator= ( const QImage & )"
.br
.ti -1c
.BI "bool isNull () const"
.br
.ti -1c
.BI "int width () const"
.br
.ti -1c
.BI "int height () const"
.br
.ti -1c
.BI "QSize size () const"
.br
.ti -1c
.BI "QRect rect () const"
.br
.ti -1c
.BI "int depth () const"
.br
.ti -1c
.BI "void fill ( const QColor & " "fillColor" "=white )"
.br
.ti -1c
.BI "void fill ( const QWidget *, int " "xofs" ", int yofs )"
.br
.ti -1c
.BI "void fill ( const QWidget *, const QPoint & ofs )"
.br
.ti -1c
.BI "void resize ( int " "width" ", int height )"
.br
.ti -1c
.BI "void resize ( const QSize & )"
.br
.ti -1c
.BI "const QBitmap* mask () const"
.br
.ti -1c
.BI "void setMask ( const QBitmap & )"
.br
.ti -1c
.BI "bool selfMask () const"
.br
.ti -1c
.BI "QBitmap createHeuristicMask ( bool " "clipTight" " = TRUE ) const"
.br
.ti -1c
.BI "QPixmap xForm ( const QWMatrix & ) const"
.br
.ti -1c
.BI "QImage convertToImage () const"
.br
.ti -1c
.BI "bool convertFromImage ( const QImage &, ColorMode " "mode" "=Auto )"
.br
.ti -1c
.BI "bool convertFromImage ( const QImage &, int conversion_flags )"
.br
.ti -1c
.BI "bool load ( const char * " "fileName" ", const char * " "format" "=0, ColorMode " "mode" "=Auto )"
.br
.ti -1c
.BI "bool load ( const char * " "fileName" ", const char * " "format" ", int conversion_flags )"
.br
.ti -1c
.BI "bool loadFromData ( const uchar * " "buf" ", uint " "len" ", const char * " "format" "=0, ColorMode " "mode" "=Auto )"
.br
.ti -1c
.BI "bool loadFromData ( const uchar * " "buf" ", uint " "len" ", const char * " "format" ", int conversion_flags )"
.br
.ti -1c
.BI "bool loadFromData ( QByteArray " "data" ", const char * " "format" "=0, int " "conversion_flags" "=0 )"
.br
.ti -1c
.BI "bool save ( const char * " "fileName" ", const char * format ) const"
.br
.ti -1c
.BI "int serialNumber () const"
.br
.ti -1c
.BI "Optimization optimization () const"
.br
.ti -1c
.BI "void setOptimization ( Optimization )"
.br
.ti -1c
.BI "virtual void detach ()"
.br
.ti -1c
.BI "bool isQBitmap () const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "int defaultDepth ()"
.br
.ti -1c
.BI "QPixmap grabWindow ( WId, int " "x" "=0, int " "y" "=0, int " "w" "=-1, int " "h" "=-1 )"
.br
.ti -1c
.BI "QWMatrix trueMatrix ( const QWMatrix &, int " "w" ", int h )"
.br
.ti -1c
.BI "const char* imageFormat ( const char * fileName )"
.br
.ti -1c
.BI "Optimization defaultOptimization ()"
.br
.ti -1c
.BI "void setDefaultOptimization ( Optimization )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "QPixmap ( int " "w" ", int " "h" ", const uchar * " "data" ", bool isXbitmap )"
.br
.ti -1c
.BI "virtual int metric ( int ) const"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "QDataStream & operator<< (QDataStream & " "s" ", const QPixmap & " "pixmap" ")"
.br
.ti -1c
.BI "QDataStream & operator>> (QDataStream & " "s" ", QPixmap & " "pixmap" ")"
.br
.in -1c
.SH DESCRIPTION
The QPixmap class is an off-screen pixel-based paint device.
.PP
It is one of the two classes Qt provides for dealing with images, the other being QImage. QPixmap is designed and optimized for drawing; QImage is designed and optimized for I/O and for direct pixel access/manipulation. There are (slow) functions to convert between QImage and QPixmp; convertToImage() and convertFromImage().
.PP
One common use of the QPixmap class is to enable smooth updating of widgets. Whenever something complex needs to be drawn, you can use a pixmap to obtain flicker-free drawing, like this:
.IP 1
Create a pixmap with the same size as the widget.
.IP 2
Fill the pixmap with the widget background color.
.IP 3
Paint the pixmap.
.IP 4
bitBlt() the pixmap contents onto the widget.
.PP
Pixel data in a pixmap is internal and managed by the underlying window system. Pixels can only be accessed through QPainter functions, through bitBlt(), and by converting the QPixmap to a QImage.
.PP
You can display a QPixmap on the screen easily using e.g. QLabel::setPixmap(), and all the button classes support pixmap use.
.PP
There are also convenience functions to get and set single pixels and to load and save the entire pixmap; these work by converting the pixmap to a QImage internally.
.PP
The QPixmap class is optimized by the use of implicit sharing, so it is very efficient to pass QPixmap objects as arguments.
.PP
See also: QBitmap, QImage, QImageIO and Shared Classes
.PP
Examples:
.(l
qtimage/qtimage.cpp grapher/grapher.cpp desktop/desktop.cpp hello/hello.cpp movies/main.cpp picture/picture.cpp xform/xform.cpp application/application.cpp menu/menu.cpp qmag/qmag.cpp widgets/widgets.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QPixmap::QPixmap ()"
Constructs a null pixmap.
.PP
See also: isNull().
.SH "QPixmap::QPixmap ( const QPixmap & pixmap )"
Constructs a pixmap which is a copy of \fIpixmap.\fR
.SH "QPixmap::QPixmap ( const char * fileName, const char * format, int conversion_flags )"
Constructs a pixmap from the file \fIfileName.\fR If the file does not exist, or is of an unknown format, the pixmap becomes a null pixmap.
.PP
The parameters are passed on to load().
.PP
See also: isNull(), load(), loadFromData(), save() and imageFormat().
.SH "QPixmap::QPixmap ( const char * fileName, const char * format=0, ColorMode mode=Auto )"
Constructs a pixmap from the file \fIfileName.\fR If the file does not exist, or is of an unknown format, the pixmap becomes a null pixmap.
.PP
The parameters are passed on to load().
.PP
See also: isNull(), load(), loadFromData(), save() and imageFormat().
.SH "QPixmap::QPixmap ( const char * xpm[] )"
Constructs a pixmap from \fIxpm,\fR which must be a valid XPM image.
.SH "QPixmap::QPixmap ( int w, int h, const uchar * bits, bool isXbitmap ) \fC[protected]\fR"
Constructs a monochrome pixmap which is initialized with the data in \fIbits.\fR This constructor is protected and used by the QBitmap class.
.SH "QPixmap::QPixmap ( int w, int h, int depth=-1 )"
Constructs a pixmap with \fIw\fR width, \fIh\fR height and of \fIdepth\fR bits per pixels.
.PP
The contents of the pixmap is uninitialized.
.PP
The \fIdepth\fR can be either 1 (monochrome) or the depth of the current video mode. If \fIdepth\fR is negative, then the hardware depth of the current video mode will be used.
.PP
If either \fIwidth\fR or \fIheight\fR is zero, a null pixmap is constructed.
.PP
See also: isNull().
.SH "QPixmap::QPixmap ( const QSize & size, int depth=-1 )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "QPixmap::~QPixmap ()"
Destroys the pixmap.
.SH "bool QPixmap::convertFromImage ( const QImage & img, int conversion_flags )"
Converts an image and sets this pixmap. Returns TRUE if successful.
.PP
The \fIconversion_flags\fR argument is a bitwise-OR from the following choices. The options marked \fI(default)\fR are the choice if no other choice from the list is included (they are zero):
.IP "Color/Mono preference (ignored for QBitmap)" 1c
.TP
\fCAutoColor\fR (default) - If the \fIimage\fR has depth 1 and contains only black and white pixels, then the pixmap becomes monochrome.
.TP
\fCColorOnly\fR - The pixmap is dithered/converted to the native display depth.
.TP
\fCMonoOnly\fR - The pixmap becomes monochrome. If necessary, it is dithered using the chosen dithering algorithm.
.IP "Dithering mode preference, for RGB channels" 1c
.TP
\fCDiffuseDither\fR (default) - a high quality dither
.TP
\fCOrderedDither\fR - a faster more ordered dither
.TP
\fCThresholdDither\fR - no dithering, closest color is used
.IP "Dithering mode preference, for alpha channel" 1c
.TP
\fCDiffuseAlphaDither\fR - a high quality dither
.TP
\fCOrderedAlphaDither\fR - a faster more ordered dither
.TP
\fCThresholdAlphaDither\fR (default) - no dithering
.IP "Color matching versus dithering preference" 1c
.TP
\fCPreferDither\fR - always dither 32-bit images when the image is being converted to 8-bits. This is the default when converting to a pixmap.
.TP
\fCAvoidDither\fR - only dither 32-bit images if the image has more than 256 colours and it is being converted to 8-bits. This is the default when an image is converted for the purpose of saving to a file.
.PP
Passing 0 for \fIconversion_flags\fR gives all the default options.
.PP
Note that even though a QPixmap with depth 1 behaves much like a QBitmap, isQBitmap() returns FALSE.
.PP
See also: convertToImage(), isQBitmap(), QImage::convertDepth(), defaultDepth() and hasAlphaBuffer().
.PP
Bugs and limitations:
.TP
Does not support 2 or 4 bit display hardware.
.PP
Examples:
.(l
qtimage/qtimage.cpp
.)l
.SH "bool QPixmap::convertFromImage ( const QImage & img, ColorMode mode=Auto )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "QImage QPixmap::convertToImage () const"
Converts the pixmap to an image. Returns a null image if the operation failed.
.PP
If the pixmap has 1 bit depth, the returned image will also be 1 bits deep. If the pixmap has 2-8 bit depth, the returned image has 8 bit depth. If the pixmap has greater than 8 bit depth, the returned image has 32 bit depth.
.PP
See also: convertFromImage().
.PP
Bugs and limitations:
.TP
Does not support 2 or 4 bit display hardware.
.TP
Alpha masks on monochrome images are ignored.
.PP
Examples:
.(l
qmag/qmag.cpp
.)l
.SH "QBitmap QPixmap::createHeuristicMask ( bool clipTight = TRUE ) const"
Creates and returns a heuristic mask for this pixmap. It works by selecting a color from one of the corners, then chipping away pixels of that color, starting at all the edges.
.PP
The mask may not be perfect but should be reasonable, so you can do things like:
.PP
.nf
.br
    pm->setMask( pm->createHeuristicMask() );
.fi
.PP
This function is slow because it involves transformation to a QImage, non-trivial computations and a transformation back to QBitmap.
.PP
See also: QImage::createHeuristicMask().
.SH "int QPixmap::defaultDepth () \fC[static]\fR"
Returns the default pixmap depth, i.e. the depth a pixmap gets if -1 is specified.
.PP
See also: depth().
.PP
Examples:
.(l
showimg/showimg.cpp
.)l
.SH "QPixmap::Optimization QPixmap::defaultOptimization() \fC[static]\fR"
Returns the default pixmap optimization setting.
.PP
See also: setDefaultOptimization(), setOptimization() and optimization().
.SH "int QPixmap::depth () const"
Returns the depth of the image.
.PP
The pixmap depth is also called bits per pixel (bpp) or bit planes of a pixmap. A null pixmap has depth 0.
.PP
See also: defaultDepth(), isNull() and QImage::convertDepth().
.SH "void QPixmap::detach () \fC[virtual]\fR"
Special-purpose function that detaches the pixmap from shared pixmap data.
.PP
A pixmap is automatically detached by Qt whenever its contents is about to change. This is done in all QPixmap member functions that modify the pixmap (fill(), resize(), convertFromImage(), load() etc.), in bitBlt() for the destination pixmap and in QPainter::begin() on a pixmap.
.PP
It is possible to modify a pixmap without letting Qt know. You can first obtain the system-dependent handle and then call system-specific functions (for instance BitBlt under Windows) that modifies the pixmap contents. In this case, you can call detach() to cut the pixmap loose from other pixmaps that share data with this one.
.PP
detach() returns immediately if there is just a single reference or if the pixmap has not been initialized yet.
.SH "void QPixmap::fill ( const QColor & fillColor=white )"
Fills the pixmap with the color \fIfillColor.\fR
.PP
Examples:
.(l
grapher/grapher.cpp desktop/desktop.cpp hello/hello.cpp xform/xform.cpp
.)l
.SH "void QPixmap::fill ( const QWidget * widget, const QPoint & ofs )"
Fills the pixmap with the widget's background color or pixmap. If the background is empty, nothing is done.
.PP
The \fIofs\fR point is an offset in the widget.
.PP
The point \fIofs\fR is a point in the widget's coordinate system. The pixmap's top left pixel will be mapped to the point \fIofs\fR in the widget. This is significant if the widget has a background pixmap, otherwise the pixmap will simply be filled with the background color of the widget.
.PP
Example:
.PP
.nf
.br
  void CuteWidget::paintEvent( QPaintEvent *e )
.br
  {
.br
    QRect ur = e->rect();               // rectangle to update
.br
.br
    QPixmap  pix( ur.size() );          // Pixmap for double-buffering
.br
.br
    pix.fill( this, ur.topLeft() );     // fill with widget background
.br
.br
    QPainter p( &pix );
.br
    p.translate( -ur.x(), -ur.y() );    // use widget coordinate system
.br
                                        // when drawing on pixmap
.br
    //    ... draw on pixmap ...
.br
.br
    p.end();
.br
.br
    bitBlt( this, ur.topLeft(), &pix );
.br
  }
.fi
.SH "void QPixmap::fill ( const QWidget * widget, int xofs, int yofs )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "QPixmap QPixmap::grabWindow ( WId window, int x=0, int y=0, int w=-1, int h=-1 ) \fC[static]\fR"
Grabs the contents of a window and makes a pixmap out of it. Returns the pixmap.
.PP
The argments \fI(x,y)\fR specify the offset in the window, while \fI(w,h)\fR specify the width and height of the area to be copied.
.PP
If \fIw\fR is negative, the function copies everything to the right border of the window. If \fIh\fR is negative, the function copies everything to the bottom of the window.
.PP
Note that grabWindows() grabs pixels from the screen, not from the window. This means that If there is another window partially or entirely over the one you grab, you get pixels from the overlying window too.
.PP
The reason we use a window identifier and not a QWidget is to enable grabbing of windows that are not part of the application.
.PP
\fBWarning:\fR Grabbing an area outside the window, or screen, is not safe in general. This depends on the underlying window system.
.SH "int QPixmap::height () const"
Returns the height of the pixmap.
.PP
See also: width(), size() and rect().
.PP
Examples:
.(l
qtimage/qtimage.cpp desktop/desktop.cpp movies/main.cpp xform/xform.cpp
.)l
.SH "const char * QPixmap::imageFormat ( const char * fileName ) \fC[static]\fR"
Returns a string that specifies the image format of the file \fIfileName,\fR or null if the file cannot be read or if the format cannot be recognized.
.PP
The QImageIO documentation lists the supported image formats.
.PP
See also: load() and save().
.SH "bool QPixmap::isNull () const"
Returns TRUE if it is a null pixmap.
.PP
A null pixmap has zero width, zero height and no contents. You cannot draw in a null pixmap or bitBlt() anything to it.
.PP
Resizing an existing pixmap to (0,0) makes a pixmap into a null pixmap.
.PP
See also: resize().
.PP
Examples:
.(l
qmag/qmag.cpp
.)l
.SH "bool QPixmap::isQBitmap () const"
Returns TRUE if this is a QBitmap, otherwise FALSE.
.SH "bool QPixmap::load ( const char * fileName, const char * format, int conversion_flags )"
Loads a pixmap from the file \fIfileName.\fR Returns TRUE if successful, or FALSE if the pixmap could not be loaded.
.PP
If \fIformat\fR is specified, the loader attempts to read the pixmap using the specified format. If \fIformat\fR is not specified (default), the loader reads a few bytes from the header to guess the file format.
.PP
See the convertFromImage() documentation for a description of the \fIconversion_flags\fR argument.
.PP
The QImageIO documentation lists the supported image formats and explains how to add extra formats.
.PP
See also: loadFromData(), save(), imageFormat(), QImage::load() and QImageIO.
.PP
Examples:
.(l
picture/picture.cpp xform/xform.cpp widgets/widgets.cpp
.)l
.SH "bool QPixmap::load ( const char * fileName, const char * format=0, ColorMode mode=Auto )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "bool QPixmap::loadFromData ( const uchar * buf, uint len, const char * format, int conversion_flags )"
Loads a pixmap from the binary data in \fIbuf\fR (\fIlen\fR bytes). Returns TRUE if successful, or FALSE if the pixmap could not be loaded.
.PP
If \fIformat\fR is specified, the loader attempts to read the pixmap using the specified format. If \fIformat\fR is not specified (default), the loader reads a few bytes from the header to guess the file format.
.PP
See the convertFromImage() documentation for a description of the \fIconversion_flags\fR argument.
.PP
The QImageIO documentation lists the supported image formats and explains how to add extra formats.
.PP
See also: load(), save(), imageFormat(), QImage::loadFromData() and QImageIO.
.SH "bool QPixmap::loadFromData ( QByteArray buf, const char * format=0, int conversion_flags=0 )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "bool QPixmap::loadFromData ( const uchar * buf, uint len, const char * format=0, ColorMode mode=Auto )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "const QBitmap * QPixmap::mask () const"
Returns the mask bitmap, or null if no mask has been set.
.PP
See also: setMask() and QBitmap.
.SH "int QPixmap::metric ( int m ) const \fC[virtual protected]\fR"
Internal implementation of the virtual QPaintDevice::metric() function.
.PP
Use the QPaintDeviceMetrics class instead.
.PP
Reimplemented from QPaintDevice.
.SH "QPixmap & QPixmap::operator= ( const QImage & image )"
Converts the image \fIimage\fR to a pixmap that is assigned to this pixmap. Returns a reference to the pixmap.
.PP
See also: convertFromImage().
.SH "QPixmap & QPixmap::operator= ( const QPixmap & pixmap )"
Assigns the pixmap \fIpixmap\fR to this pixmap and returns a reference to this pixmap.
.SH "QPixmap::Optimization QPixmap::optimization() const"
Returns the optimization setting for this pixmap.
.PP
The default optimization setting is \fCQPixmap::NormalOptim.\fR You may change this settings in two ways:
.TP
Call setDefaultOptimization() to set the default optimization for all new pixmaps.
.TP
Call setOptimization() to set a the optimization for individual pixmaps.
.PP
See also: setOptimization(), setDefaultOptimization() and defaultOptimization().
.SH "QRect QPixmap::rect () const"
Returns the enclosing rectangle (0,0,width(),height()) of the pixmap.
.PP
See also: width(), height() and size().
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QPixmap::resize ( int w, int h )"
Resizes the pixmap to \fIw\fR width and \fIh\fR height. If either \fIw\fR or \fIh\fR is less than 1, the pixmap becomes a null pixmap.
.PP
If both \fIw\fR and \fIh\fR are greater than 0, a valid pixmap is created. New pixels will be uninitialized (random) if the pixmap is expanded.
.PP
Examples:
.(l
grapher/grapher.cpp desktop/desktop.cpp
.)l
.SH "void QPixmap::resize ( const QSize & size )"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "bool QPixmap::save ( const char * fileName, const char * format ) const"
Saves the pixmap to the file \fIfileName,\fR using the image file format \fIformat.\fR Returns TRUE if successful, or FALSE if the pixmap could not be saved.
.PP
See also: load(), loadFromData(), imageFormat(), QImage::save() and QImageIO.
.PP
Examples:
.(l
qmag/qmag.cpp
.)l
.SH "bool QPixmap::selfMask () const"
Returns TRUE if the pixmap's mask is identical to the pixmap itself.
.PP
See also: mask().
.SH "int QPixmap::serialNumber () const"
Returns a number that uniquely identifies this QPixmap object. The serial number is very useful for caching.
.PP
See also: QPixmapCache.
.SH "void QPixmap::setDefaultOptimization ( Optimization optimization ) \fC[static]\fR"
Sets the default pixmap optimization.
.PP
All \fInew\fR pixmaps that are created will use this default optimization. You may also set optimization for individual pixmaps using the setOptimization() function.
.PP
The initial default optimization setting is \fCQPixmap::Normal.\fR
.PP
See also: defaultOptimization(), setOptimization() and optimization().
.SH "void QPixmap::setMask ( const QBitmap & mask )"
Sets a mask bitmap.
.PP
The \fImask\fR bitmap defines the clip mask for this pixmap. Every pixel in \fImask\fR corresponds to a pixel in this pixmap. Pixel value 1 means opaque and pixel value 0 means transparent. The mask must have the same size as this pixmap.
.PP
Setting a null mask resets the mask,
.PP
See also: mask(), createHeuristicMask() and QBitmap.
.SH "void QPixmap::setOptimization ( Optimization optimization )"
Sets pixmap drawing optimization for this pixmap.
.PP
The optimization setting affects pixmap operations, in particular drawing of transparent pixmaps (bitBlt() a pixmap with a mask set) and pixmap transformations (the xForm() function).
.PP
Pixmap optimization involves keeping intermediate results in a cache buffer and use the data in the cache to speed up bitBlt() and xForm(). The cost is more memory consumption, up to twice as much as an unoptimized pixmap.
.PP
The \fIoptimization\fR parameter can be:
.TP
\fCQPixmap::NoOptim,\fR avoid optimization. Little or no caching is done. Use this setting if memory is scarce and the speed of pixmap operations is not critical to your application.
.TP
\fCQPixmap::NormalOptim,\fR normal optimization to make pixmap drawing faster. This option is the default and is suitable for most purposes.
.TP
\fCQPixmap::BestOptim,\fR heavily optimized pixmap drawing. Use this option for pixmap drawn extremely frequently.
.PP
Use the setDefaultOptimization() to change the default optimization for all new pixmaps.
.PP
See also: optimization(), setDefaultOptimization() and defaultOptimization().
.SH "QSize QPixmap::size () const"
Returns the size of the pixmap.
.PP
See also: width(), height() and rect().
.PP
Examples:
.(l
qtimage/qtimage.cpp movies/main.cpp
.)l
.SH "QWMatrix QPixmap::trueMatrix ( const QWMatrix & matrix, int w, int h ) \fC[static]\fR"
Returns the actual matrix used for transforming a pixmap with \fIw\fR width and \fIh\fR height.
.PP
When transforming a pixmap with xForm(), the transformation matrix is internally adjusted to compensate for unwanted translation, i.e. xForm() returns the smallest pixmap containing all transformed points of the original pixmap.
.PP
This function returns the modified matrix, which maps points correctly from the original pixmap into the new pixmap.
.PP
See also: xForm() and QWMatrix.
.SH "int QPixmap::width () const"
Returns the width of the pixmap.
.PP
See also: height(), size() and rect().
.PP
Examples:
.(l
qtimage/qtimage.cpp desktop/desktop.cpp movies/main.cpp xform/xform.cpp
.)l
.SH "QPixmap QPixmap::xForm ( const QWMatrix & matrix ) const"
Returns a copy of the pixmap that is transformed using \fImatrix.\fR
.PP
Qt uses this function to implement rotated text on window systems that do not support such complex features.
.PP
Example of how to manually draw a rotated text at (100,200) in a widget:
.PP
.nf
.br
    char    *str = "Trolls R Qt";       // text to be drawn
.br
    QFont    f( "Charter", 24 );        // use Charter 24pt font
.br
    QPixmap  pm( 8, 8 );
.br
    QPainter p;
.br
    QRect    r;                         // text bounding rectangle
.br
    QPoint   bl;                        // text baselink position
.br
.br
    p.begin( &pm );                     // first get the bounding
.br
    p.setFont( f );                     //   text rectangle
.br
    r = p.fontMetrics().boundingRect(str);
.br
    bl = -r.topLeft();                  // get baseline position
.br
    p.end();
.br
.br
    pm.resize( r.size() );              // resize to fit the text
.br
    pm.fill( white );                   // fills pm with white
.br
    p.begin( &pm );                     // begin painting pm
.br
    p.setFont( f );                     // set the font
.br
    p.setPen( blue );                   // set blue text color
.br
    p.drawText( bl, str );              // draw the text
.br
    p.end();                            // painting done
.br
.br
    QWMatrix m;                         // transformation matrix
.br
    m.rotate( -33.4 );                  // rotate coordinate system
.br
    QPixmap rp = pm.xForm( m );         // rp is rotated pixmap
.br
.br
    QWMatrix t = QPixmap::trueMatrix( m, pm.width(), pm.height() );
.br
    int x, y;
.br
    t.map( bl.x(),bl.y(), &x,&y );      // get pm's baseline pos in rp
.br
.br
    bitBlt( myWidget, 100-x, 200-y,     // blt rp into a widget
.br
            &rp, 0, 0, -1, -1 );
.fi
.PP
This example outlines how Qt implements rotated text under X11. The font calculation is the most tedious part. The rotation itself is only 3 lines of code.
.PP
If you want to draw rotated text, you do not have to implement all the code above. The code below does exactly the same thing as the example above, except that it uses a QPainter.
.PP
.nf
.br
    char    *str = "Trolls R Qt";       // text to be drawn
.br
    QFont    f( "Charter", 24 );        // use Charter 24pt font
.br
    QPainter p;
.br
.br
    p.begin( myWidget );
.br
    p.translate( 100, 200 );            // translates coord system
.br
    p.rotate( -33.4 );                  // rotates it counterclockwise
.br
    p.setFont( f );
.br
    p.drawText( 0, 0, str );
.br
    p.end();
.fi
.PP
See also: trueMatrix(), QWMatrix and QPainter::setWorldMatrix().
.PP
Bugs and limitations:
.TP
2 and 4 bits pixmaps are not supported.
.PP
Examples:
.(l
qtimage/qtimage.cpp desktop/desktop.cpp movies/main.cpp qmag/qmag.cpp
.)l
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< (QDataStream & s, const QPixmap & pixmap)"
Writes a pixmap to the stream as a BMP image.
.PP
See also: QPixmap::save().
.SH "QDataStream & operator>> (QDataStream & s, QPixmap & pixmap)"
Reads a pixmap from the stream.
.PP
See also:  QPixmap::load().
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qpixmap.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
