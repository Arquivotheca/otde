.TH QFont 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFont \- Font used for drawing text
.SH SYNOPSIS
.br
.PP
\fC#include <qfont.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "enum StyleHint { Helvetica, Times, Courier, OldEnglish, System, AnyStyle, SansSerif = Helvetica, Serif = Times, TypeWriter = Courier, Decorative = OldEnglish}"
.br
.ti -1c
.BI "enum Weight { Light = 25, Normal = 50, DemiBold = 63, Bold = 75, Black = 87 }"
.br
.ti -1c
.BI "enum CharSet { Latin1, ISO_8859_1 = Latin1, AnyCharSet, Latin2, ISO_8859_2 = Latin2, Latin3, ISO_8859_3 = Latin3, Latin4, ISO_8859_4 = Latin4, Latin5, ISO_8859_5 = Latin5, Latin6, ISO_8859_6 = Latin6, Latin7, ISO_8859_7 = Latin7, Latin8, ISO_8859_8 = Latin8, Latin9, ISO_8859_9 = Latin9, KOI8R }"
.br
.ti -1c
.BI "QFont ()"
.br
.ti -1c
.BI "QFont ( const char * " "family" ", int " "pointSize" " = 12, int " "weight" " = Normal, bool " "italic" " = FALSE )"
.br
.ti -1c
.BI "QFont ( const char * " "family" ", int " "pointSize" ", int " "weight" ", bool " "italic" ", CharSet charSet )"
.br
.ti -1c
.BI "QFont ( const QFont & )"
.br
.ti -1c
.BI "virtual \fB~QFont\fR ()"
.br
.ti -1c
.BI "QFont& operator= ( const QFont & )"
.br
.ti -1c
.BI "const char* family () const"
.br
.ti -1c
.BI "void setFamily ( const char * )"
.br
.ti -1c
.BI "int pointSize () const"
.br
.ti -1c
.BI "void setPointSize ( int )"
.br
.ti -1c
.BI "int weight () const"
.br
.ti -1c
.BI "void setWeight ( int )"
.br
.ti -1c
.BI "bool bold () const"
.br
.ti -1c
.BI "void setBold ( bool )"
.br
.ti -1c
.BI "bool italic () const"
.br
.ti -1c
.BI "void setItalic ( bool )"
.br
.ti -1c
.BI "bool underline () const"
.br
.ti -1c
.BI "void setUnderline ( bool )"
.br
.ti -1c
.BI "bool strikeOut () const"
.br
.ti -1c
.BI "void setStrikeOut ( bool )"
.br
.ti -1c
.BI "bool fixedPitch () const"
.br
.ti -1c
.BI "void setFixedPitch ( bool )"
.br
.ti -1c
.BI "StyleHint styleHint () const"
.br
.ti -1c
.BI "void setStyleHint ( StyleHint )"
.br
.ti -1c
.BI "CharSet charSet () const"
.br
.ti -1c
.BI "void setCharSet ( CharSet )"
.br
.ti -1c
.BI "bool rawMode () const"
.br
.ti -1c
.BI "void setRawMode ( bool )"
.br
.ti -1c
.BI "bool exactMatch () const"
.br
.ti -1c
.BI "bool operator== ( const QFont & ) const"
.br
.ti -1c
.BI "bool operator!= ( const QFont & ) const"
.br
.ti -1c
.BI "bool isCopyOf ( const QFont & ) const"
.br
.ti -1c
.BI "HANDLE handle ( HANDLE=0 ) const"
.br
.ti -1c
.BI "const char* rawName () const"
.br
.ti -1c
.BI "QString key () const"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "const QFont& defaultFont ()"
.br
.ti -1c
.BI "void setDefaultFont ( const QFont & )"
.br
.ti -1c
.BI "const char* substitute ( const char * familyName )"
.br
.ti -1c
.BI "void insertSubstitution ( const char *, const char * )"
.br
.ti -1c
.BI "void removeSubstitution ( const char * )"
.br
.ti -1c
.BI "void listSubstitutions ( QStrList * )"
.br
.ti -1c
.BI "void initialize ()"
.br
.ti -1c
.BI "void cleanup ()"
.br
.ti -1c
.BI "void cacheStatistics ()"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "bool dirty () const"
.br
.ti -1c
.BI "QString defaultFamily () const"
.br
.ti -1c
.BI "QString lastResortFamily () const"
.br
.ti -1c
.BI "QString lastResortFont () const"
.br
.ti -1c
.BI "int deciPointSize () const"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "QDataStream & operator<< (QDataStream & " "s" ", const QFont & " "f" ")"
.br
.ti -1c
.BI "QDataStream & operator>> (QDataStream & " "s" ", QFont & " "f" ")"
.br
.in -1c
.SH DESCRIPTION
The QFont class specifies a font used for drawing text.
.PP
QFont, more precisely, is a collection of attributes of a font. When Qt needs to draw text, it will look up and load the closest matching installed font and draw using that.
.PP
The most important attributes of a QFont are family, point size, weight and italic. There are QFont constructors that take these attributes as arguments, as shown in this example:
.PP
.nf
.br
    void MyWidget::paintEvent( QPaintEvent * )
.br
    {
.br
        QPainter p( this );
.br
.br
        // times, 12pt, normal
.br
        p.setFont( QFont( "times" ) );
.br
        p.drawText( 10, 20, "Text1" );
.br
.br
        // helvetica, 18pt, normal
.br
        p.setFont( QFont( "helvetica", 18 ) );
.br
        p.drawText( 10, 120, "Text2" );
.br
.br
        // courier, 24pt, bold
.br
        p.setFont( QFont( "courier", 24, QFont::Bold ) );
.br
        p.drawText( 10, 220, "Text3" );
.br
.br
        // lucida, 36pt, bold, italic
.br
        p.setFont( QFont( "lucida", 36, QFont::Bold, TRUE ) );
.br
        p.drawText( 10, 320, "Text4" );
.br
    }
.fi
.PP
The default QFont constructor makes a copy of the default font.
.PP
You can also change these attributes of an existing QFont object using functions such as setFamily(), setPointSize(), setWeight() and setItalic().
.PP
There are also some less-used attributes. setUnderline() decides whether the font is underlined or not; setStrikeOut() can be used to get overstrike (a horizontal line through the middle of the characters); setFixedPitch() determines whether Qt should give preference to fixed-pitch or variable-pitch fonts when it needs to choose an installed font; setStyleHint() can be used to offer more general help to the font matching algorithm, and on X11 setRawMode() can be used to bypass the entire font matching and use an X11 XLFD.
.PP
Of course there is also a reader function for each of these set*() functions. Note that the reader functions return the values previously set, \fInot\fR the attributes of the actual window system font that will be used for drawing. You can get information about the font that will be used for drawing by using QFontInfo, but be aware that QFontInfo may be slow and that its results depend on what fonts are installed.
.PP
In general font handling and loading are costly operations, especially on X11. The QFont class contains extensive optimizations to make copying of QFont objects fast, and to cache the results of the slow window system functions it uses.
.PP
QFont also offers a few static functions, mostly to tune the font matching algorithm: You can control what happens if a font's family isn't installed using insertSubstitution() and removeSubstitution(), ask what happens for a single family uing substitute() and you can get a complete list of the fallback families using listSubstitutions().
.PP
cacheStatistics() offers cache effectiveness information; this is useful mostly for debugging.
.PP
Finally, setDefaultFont() allows you to set the default font. The default default font is chosen at application startup from a set of common installed fonts that support the correct character set. Of course, the initialization algorithm has a default, too: The default default default font!
.PP
For more general information on fonts, see the comp.fonts FAQ.
.PP
See also: QFontMetrics, QFontInfo, QApplication::setFont(), QWidget::setFont(), QPainter::setFont(), QFont::StyleHint, QFont::CharSet and QFont::Weight.
.PP
Examples:
.(l
grapher/grapher.cpp desktop/desktop.cpp drawdemo/drawdemo.cpp movies/main.cpp picture/picture.cpp xform/xform.cpp widgets/widgets.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QFont::QFont ()"
Constructs a font object that refers to the default font.
.SH "QFont::QFont ( const QFont & font )"
Constructs a font that is a copy of \fIfont.\fR
.SH "QFont::QFont ( const char * family, int pointSize = 12, int weight = Normal, bool italic = FALSE )"
Constructs a font object with the specified \fIfamily, pointSize, weight\fR and \fIitalic\fR settings. The character set is copied from the default font and the rest of the settings ser set reasonably.
.PP
If \fIpointSize\fR is less than or equal to 0 it is set to 1.
.PP
See also: setFamily(), setPointSize(), setWeight() and setItalic().
.SH "QFont::QFont ( const char * family, int pointSize, int weight, bool italic, CharSet charSet )"
Constructs a font object with the specified \fIfamily, pointSize, weight, italic\fR and \fIcharSet\fR settings. If \fIpointSize\fR is less than or equal to 0 it is set to 1.
.PP
See also: setFamily(), setPointSize(), setWeight() and setItalic().
.SH "QFont::~QFont () \fC[virtual]\fR"
Destroys the font object.
.SH "bool QFont::bold () const"
Returns TRUE if weight() is a value greater than \fCQFont::Normal,\fR otherwise FALSE.
.PP
See also: weight(), setBold() and QFontInfo::bold().
.SH "void QFont::cacheStatistics () \fC[static]\fR"
Internal function that dumps font cache statistics.
.SH "QFont::CharSet QFont::charSet() const"
Returns the character set by setCharSet().
.PP
Use QFontInfo to find the CharSet of the window system font actually used.
.PP
See also: setCharSet().
.SH "void QFont::cleanup () \fC[static]\fR"
Internal function that cleans up the font system.
.SH "int QFont::deciPointSize () const \fC[protected]\fR"
Returns the point size in 1/10ths of a point.
.PP
See also: pointSize().
.SH "QString QFont::defaultFamily () const \fC[protected]\fR"
Returns the family name that corresponds to the current style hint.
.SH "const QFont & QFont::defaultFont () \fC[static]\fR"
Returns the system default font.
.SH "bool QFont::dirty () const \fC[protected]\fR"
Returns TRUE if the font attributes have been changed and the font has to be (re)loaded, or FALSE if no changes have been made.
.SH "bool QFont::exactMatch () const"
Returns TRUE if a window system font exactly matching the settings of this font is available.
.PP
See also: QFontInfo and font matching
.SH "const char * QFont::family () const"
Returns the family name set by setFamily().
.PP
Use QFontInfo to find the family name of the window system font that is actually used for drawing.
.PP
Example:
.PP
.nf
.br
    QFont     font( "Nairobi" );
.br
    QFontInfo info( font );
.br
    debug( "Font family requested is    : \\"%s\\"", font.family() );
.br
    debug( "Font family actually used is: \\"%s\\"", info.family() );
.fi
.PP
See also: setFamily() and substitute().
.SH "bool QFont::fixedPitch () const"
Returns the value set by setFixedPitch().
.PP
Use QFontInfo to find the fixed pitch value of the window system font actually used.
.PP
See also: setFixedPitch() and QFontInfo::fixedPitch().
.SH "HANDLE QFont::handle ( HANDLE=0 ) const"
Returns the window system handle to the font, for low-level access. \fIUsing this function is not portable.\fR
.SH "void QFont::initialize () \fC[static]\fR"
Internal function that initializes the font system.
.SH "void QFont::insertSubstitution ( const char * familyName, const char * replacementName ) \fC[static]\fR"
Inserts a new font family name substitution in the family substitution table.
.PP
If \fIfamilyName\fR already exists in the substitution table, it will be replaced with this new substitution.
.PP
See also: removeSubstitution(), listSubstitutions() and substitute().
.SH "bool QFont::isCopyOf ( const QFont & f ) const"
Returns TRUE if this font and \fIf\fR are copies of each other, ie. one of them was created as a copy of the other and neither was subsequently modified. This is much stricter than equality.
.PP
See also: operator= and operator==.
.SH "bool QFont::italic () const"
Returns the value set by setItalic().
.PP
Use QFontInfo to find the italic value of the window system font actually used.
.PP
See also: setItalic().
.SH "QString QFont::key () const"
Returns the font's key, which is a textual representation of the font settings. It is typically used to insert and find fonts in a dictionary or a cache.
.PP
See also: QDict and QCache.
.SH "QString QFont::lastResortFamily () const \fC[protected]\fR"
Returns a last resort family name for the font matching algorithm.
.PP
See also: lastResortFont().
.SH "QString QFont::lastResortFont () const \fC[protected]\fR"
Returns a last resort raw font name for the font matching algorithm.
.PP
This is used if not even the last resort family is available.
.PP
See also: lastResortFamily().
.SH "void QFont::listSubstitutions ( QStrList * list ) \fC[static]\fR"
Returns a sorted list of substituted family names in \fIlist.\fR
.PP
See also: insertSubstitution(), removeSubstitution() and substitute().
.SH "bool QFont::operator!= ( const QFont & f ) const"
Returns TRUE if the this font is different from \fIf,\fR or FALSE if they are equal.
.PP
Two QFonts are different if their font attributes are different. If raw mode is enabled for both fonts, then only the family fields are compared.
.PP
See also: operator==().
.SH "QFont & QFont::operator= ( const QFont & font )"
Assigns \fIfont\fR to this font and returns a reference to this font.
.SH "bool QFont::operator== ( const QFont & f ) const"
Returns TRUE if the this font is equal to \fIf,\fR or FALSE if they are different.
.PP
Two QFonts are equal if their font attributes are equal. If raw mode is enabled for both fonts, then only the family fields are compared.
.PP
See also: operator!=().
.SH "int QFont::pointSize () const"
Returns the point size set by setPointSize().
.PP
Use QFontInfo to find the point size of the window system font actually used.
.PP
Example of use:
.PP
.nf
.br
    QFont     font( "helvetica" );
.br
    QFontInfo info( font );
.br
    font.setPointSize( 53 );
.br
    debug( "Font size requested is    : %d", font.pointSize() );
.br
    debug( "Font size actually used is: %d", info.pointSize() );
.fi
.PP
See also: setPointSize() and deciPointSize().
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "bool QFont::rawMode () const"
Returns the value set by setRawMode().
.PP
See also: setRawMode().
.SH "const char* QFont::rawName () const"
Returns the name of the font within the underlying system. \fIUsing the return value of this function is usually not portable.\fR
.PP
See also: setRawMode() and rawMode().
.SH "void QFont::removeSubstitution ( const char * familyName ) \fC[static]\fR"
Removes a font family name substitution from the family substitution table.
.PP
See also: insertSubstitution(), listSubstitutions() and substitute().
.SH "void QFont::setBold ( bool enable )"
Sets the weight to \fCQFont::Bold\fR if \fIenable\fR is TRUE, or to \fCQFont::Normal\fR if \fIenable\fR is FALSE.
.PP
Use setWeight() to set the weight to other values.
.PP
See also: bold() and setWeight().
.SH "void QFont::setCharSet ( CharSet charset )"
Sets the character set encoding (e.g. \fCLatin1).\fR
.PP
If the character set encoding is not available another will be used for drawing. for most non-trivial applications you will probably not want this to happen since it can totally obscure the text shown to the user. This is why the font matching algorithm gives high priority to finding the correct character set.
.PP
You can test that the character set is correct using the QFontInfo class.
.PP
Example:
.PP
.nf
.br
    QFont     font( "times", 14 );           // default character set is Latin1
.br
    QFontInfo info( font );
.br
    if ( info.charSet() != Latin1 )          // check actual font
.br
        fatal( "Cannot find a Latin 1 Times font" );
.fi
.PP
In Qt 1.40, the following character set encodings are available: 
.TP
\fCQFont::Latin1\fR - ISO 8859-1, common in much of Europe
.TP
\fCQFont::Latin2\fR - ISO 8859-2, less common European character set
.TP
\fCQFont::Latin3\fR - ISO 8859-3, less common European character set
.TP
\fCQFont::Latin4\fR - ISO 8859-4, less common European character set
.TP
\fCQFont::Latin5\fR - ISO 8859-5, Cyrillic
.TP
\fCQFont::Latin6\fR - ISO 8859-6, Arabic
.TP
\fCQFont::Latin7\fR - ISO 8859-7, Greek
.TP
\fCQFont::Latin8\fR - ISO 8859-8, Hebrew
.TP
\fCQFont::Latin9\fR - ISO 8859-9, less common European character set
.TP
\fCQFont::KOI8R\fR - KOI8-R, Cyrillic, defined in RFC 1489.
.TP
\fCQFont::AnyCharSet\fR - whatever is handiest.
.PP
See also: charSet(), QFontInfo and font matching
.SH "void QFont::setDefaultFont ( const QFont & f ) \fC[static]\fR"
Sets the system default font.
.SH "void QFont::setFamily ( const char * family )"
Sets the family name of the font (e.g. "Helvetica" or "times").
.PP
The family name is case insensitive.
.PP
If the family is not available a default family is used.
.PP
See also: family(), setStyleHint(), QFontInfo and font matching
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QFont::setFixedPitch ( bool enable )"
Sets fixed pitch on or off.
.PP
A fixed pitch font is a font where all characters have the same width.
.PP
See also: fixedPitch(), QFontInfo and font matching
.SH "void QFont::setItalic ( bool enable )"
Sets italic on or off.
.PP
See also: italic(), QFontInfo and font matching
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QFont::setPointSize ( int pointSize )"
Sets the point size to \fIpointSize.\fR The point size must be greater than zero.
.PP
Example:
.PP
.nf
.br
    QFont font( "courier" );
.br
    font.setPointSize( 18 );
.fi
.PP
See also: pointSize(), QFontInfo and font matching
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QFont::setRawMode ( bool enable )"
Turns raw mode on if \fIenable\fR is TRUE, or turns it off if \fIenable\fR is FALSE.
.PP
Calling this function only has effect under X windows. If raw mode is enabled, Qt will search for an X font with a complete font name matching the family name, ignoring all other values set for the QFont. If the font name matches several fonts, Qt will use the first font returned by X. QFontInfo \fIcannot\fR be used to fetch information about a QFont using raw mode (it will return the values set in the QFont for all parameters, including the family name).
.PP
Example:
.PP
.nf
.br
    #if defined(_WS_X11_)
.br
        QFont font( "-*-fixed-*-*-*-*-*-140-75-75-c-*-iso8859-1" );
.br
        font.setRawMode( TRUE );
.br
        if ( !font.exactMatch() )
.br
            fatal( "Sorry, could not find the X specific font" );
.br
    #endif
.fi
.PP
\fBWarning:\fR Do not use raw mode unless you really need it!
.PP
See also: rawMode().
.SH "void QFont::setStrikeOut ( bool enable )"
Sets strike out on or off.
.PP
See also: strikeOut(), QFontInfo and font matching
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QFont::setStyleHint ( StyleHint hint )"
Sets the style hint.
.PP
The style hint is used by the font matching algorithm when a selected font family cannot be found and is used to find an appropriate default family.
.PP
The style hint has a default value of \fCAnyStyle\fR which leaves the task of finding a good default family to the font matching algorithm.
.PP
In this example (which is a complete program) the push button will display its text label with the Bavaria font family if this family is available, if not it will display its text label with another serif font:
.PP
.nf
.br
    #include <qapplication.h>
.br
    #include <qpushbutton.h>
.br
    #include <qfont.h>
.br
.br
    int main( int argc, char **argv )
.br
    {
.br
        QApplication app( argc, argv );
.br
        QPushButton  push("Push me");
.br
.br
        QFont font( "Bavaria", 18 );        // preferrred family is Bavaria
.br
        font.setStyleHint( QFont::Serif );  // can also use any serif font
.br
.br
        push.setFont( font );
.br
        return app.exec( &push );
.br
    }
.fi
.PP
The other available style hints are \fCQFont::SansSerif, QFont::TypeWriter, QFont::OldEnglish, QFont::System\fR
.PP
See also: styleHint(), QFontInfo and font matching
.PP
Examples:
.(l
desktop/desktop.cpp
.)l
.SH "void QFont::setUnderline ( bool enable )"
Sets underline on or off.
.PP
See also: underline(), QFontInfo and font matching.
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "void QFont::setWeight ( int weight )"
Sets the weight (or boldness).
.PP
The enum \fCQFont::Weight\fR contains the predefined font weights:
.TP
\fCQFont::Light\fR (25)
.TP
\fCQFont::Normal\fR (50)
.TP
\fCQFont::DemiBold\fR (63)
.TP
\fCQFont::Bold\fR (75)
.TP
\fCQFont::Black\fR (87)
.PP
Strictly speaking you can use all values in the range [0,99] (where 0 is ultralight and 99 is extremely black), but there is such a thing as asking too much of the underlying window system.
.PP
Example:
.PP
.nf
.br
    QFont font( "courier" );
.br
    font.setWeight( QFont::Bold );
.fi
.PP
If the specified weight is not available the closest available will be used. Use QFontInfo to check the actual weight.
.PP
See also: weight(), QFontInfo and font matching
.PP
Examples:
.(l
xform/xform.cpp
.)l
.SH "bool QFont::strikeOut () const"
Returns the value set by setStrikeOut().
.PP
Use QFontInfo to find the strike out value of the window system font actually used.
.PP
See also: setStrikeOut() and QFontInfo::strikeOut().
.SH "QFont::StyleHint QFont::styleHint() const"
Returns the StyleHint set by setStyleHint().
.PP
See also: setStyleHint() and QFontInfo::styleHint().
.SH "const char * QFont::substitute ( const char * familyName ) \fC[static]\fR"
Returns the font family name to be used whenever \fIfamilyName\fR is specified, and not found by the font matching algorithm. The lookup is case insensitive.
.PP
If there is no substitution for \fIfamilyName,\fR then \fIfamilyName\fR is returned.
.PP
Example:
.PP
.nf
.br
    QFont::insertSubstitution( "NewYork", "London" );
.br
    QFont::insertSubstitution( "Paris",   "Texas" );
.br
.br
    QFont::substitute( "NewYork" );     // returns "London"
.br
    QFont::substitute( "PARIS" );       // returns "Texas"
.br
    QFont::substitute( "Rome" );        // returns "Rome"
.br
.br
    QFont::removeSubstitution( "newyork" );
.br
    QFont::substitute( "NewYork" );     // returns "NewYork"
.fi
.PP
See also: setFamily(), insertSubstitution() and removeSubstitution().
.SH "bool QFont::underline () const"
Returns the value set by setUnderline().
.PP
Use QFontInfo to find the underline value of the window system font actually used for drawing.
.PP
See also: setUnderline() and QFontInfo::underline().
.SH "int QFont::weight () const"
Returns the weight set by setWeight().
.PP
Use QFontInfo to find the weight of the window system font actually used.
.PP
See also: setWeight() and QFontInfo.
.SH RELATED FUNCTION DOCUMENTATION
.SH "QDataStream & operator<< (QDataStream & s, const QFont & f)"
Writes a font to the stream.
.SH "QDataStream & operator>> (QDataStream & s, QFont & f)"
Reads a font from the stream.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qfont.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
