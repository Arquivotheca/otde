.TH QFileDialog 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QFileDialog \- The QFileDialog provides a dialog widget for inputting file names
.SH SYNOPSIS
.br
.PP
\fC#include <qfiledialog.h>\fR
.PP
Inherits QDialog.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QFileDialog ( const char * " "dirName" ", const char * " "filter" " = 0, QWidget * " "parent" "=0, const char * " "name" "=0, bool " "modal" "=FALSE )"
.br
.ti -1c
.BI "QFileDialog ( QWidget * " "parent" "=0, const char * " "name" "=0, bool " "modal" "=FALSE )"
.br
.ti -1c
.BI "\fB~QFileDialog\fR ()"
.br
.ti -1c
.BI "QString selectedFile () const"
.br
.ti -1c
.BI "void setSelection ( const char * )"
.br
.ti -1c
.BI "const char* dirPath () const"
.br
.ti -1c
.BI "void setDir ( const QDir & )"
.br
.ti -1c
.BI "const QDir* dir () const"
.br
.ti -1c
.BI "void rereadDir ()"
.br
.ti -1c
.BI "void setMode ( Mode )"
.br
.ti -1c
.BI "Mode mode () const"
.br
.ti -1c
.BI "virtual bool eventFilter ( QObject *, QEvent * )"
.br
.in -1c
.SS "Public Slots"
.in +1c
.ti -1c
.BI "void setDir ( const char * )"
.br
.ti -1c
.BI "void setFilter ( const char * )"
.br
.ti -1c
.BI "void setFilters ( const char ** )"
.br
.ti -1c
.BI "void setFilters ( const QStrList & )"
.br
.in -1c
.SS "Signals"
.in +1c
.ti -1c
.BI "void fileHighlighted ( const char * )"
.br
.ti -1c
.BI "void fileSelected ( const char * )"
.br
.ti -1c
.BI "void dirEntered ( const char * )"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "QString getOpenFileName ( const char * " "initially" " = 0, const char * " "filter" "= 0, QWidget * " "parent" " = 0, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "QString getSaveFileName ( const char * " "initially" " = 0, const char * " "filter" "= 0, QWidget * " "parent" " = 0, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "QString getExistingDirectory ( const char * " "dir" " = 0, QWidget * " "parent" " = 0, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "QStrList getOpenFileNames ( const char * " "filter" "= 0, const char * " "dir" " = 0, QWidget * " "parent" " = 0, const char * " "name" " = 0 )"
.br
.ti -1c
.BI "void setIconProvider ( QFileIconProvider * )"
.br
.ti -1c
.BI "QFileIconProvider* iconProvider ()"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void resizeEvent ( QResizeEvent * )"
.br
.ti -1c
.BI "virtual void keyPressEvent ( QKeyEvent * )"
.br
.ti -1c
.BI "void addWidgets ( QLabel *, QWidget *, QPushButton * )"
.br
.in -1c
.SH DESCRIPTION
The QFileDialog provides a dialog widget for inputting file names.
.PP
Example:
.PP
.nf
.br
    QString fileName = QFileDialog::getOpenFileName();
.br
    if ( !fileName.isNull() ) {                 // got a file name
.br
        ...
.br
    }
.fi
.PP
There are two ready-made convenience functions, getOpenFileName() and getSaveFileName(), which may be used like this:
.PP
.nf
.br
    QString s( QFileDialog::getOpenFileName() );
.br
    if ( s.isNull() )
.br
        return;
.br
.br
    open( s ); // open() being your function to read the file
.fi
.PP
.ce 1
.B "[Image Omitted]"
.PP

.ce 1
.B "[Image Omitted]"
.PP
See also: QPrintDialog.
.PP
Examples:
.(l
movies/main.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QFileDialog::QFileDialog ( QWidget * parent=0, const char * name=0, bool modal=FALSE )"
Constructs a file dialog with a \fIparent, name\fR and \fImodal\fR flag.
.PP
The dialog becomes modal if \fImodal\fR is TRUE, otherwise modeless.
.SH "QFileDialog::QFileDialog ( const char * dirName, const char * filter = 0, QWidget * parent=0, const char * name=0, bool modal=FALSE )"
Constructs a file dialog with a \fIparent, name\fR and \fImodal\fR flag.
.PP
The dialog becomes modal if \fImodal\fR is TRUE, otherwise modeless.
.SH "QFileDialog::~QFileDialog ()"
Destroys the file dialog.
.SH "void QFileDialog::addWidgets ( QLabel * l, QWidget * w, QPushButton * b ) \fC[protected]\fR"
Adds 1-3 widgets to the bottom of the file dialog. \fIl\fR is the (optional) label, which is put beneath the "file name" and "file type" labels, \fIw\fR is a (optional) widget, which is put beneath the file type combo box, and \fIb\fR is the (you guessed it - optional) button, which is put beneath the cancel button.
.PP
If you don't want to add something in one of the columns, pass 0.
.PP
It is not currently possible to add more than one row.
.SH "const QDir * QFileDialog::dir () const"
Returns the active directory in the file dialog.
.PP
See also: setDir().
.SH "void QFileDialog::dirEntered ( const char * ) \fC[signal]\fR"
This signal is emitted when the user has selected a new directory.
.SH "const char * QFileDialog::dirPath () const"
Returns the active directory path string in the file dialog.
.PP
See also: dir() and setDir().
.SH "bool QFileDialog::eventFilter ( QObject * o, QEvent * e ) \fC[virtual]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QObject.
.SH "void QFileDialog::fileHighlighted ( const char * ) \fC[signal]\fR"
This signal is emitted when the user highlights a file.
.SH "void QFileDialog::fileSelected ( const char * ) \fC[signal]\fR"
This signal is emitted when the user selects a file.
.SH "QString QFileDialog::getExistingDirectory ( const char * dir = 0, QWidget * parent = 0, const char * name = 0 ) \fC[static]\fR"
Ask the user for the name of an existing directory, starting at \fIdir.\fR Returns the name of the directory the user selected.
.PP
If \fIdir\fR is null, getExistingDirectory() starts wherever the previous file dialog left off.
.SH "QString QFileDialog::getOpenFileName ( const char * startWith = 0, const char * filter= 0, QWidget * parent = 0, const char * name = 0 ) \fC[static]\fR"
Opens a modal file dialog and returns the name of the file to be opened.
.PP
If \fIstartWith\fR is the name of a directory, the dialog starts off in that directory. If \fIstartWith\fR is the name of an existing file, the dialogs starts in that directory, and with \fIstartWith\fR selected.
.PP
Only files matching \fIfilter\fR are selectable. If \fIfilter\fR is 0, all files are selectable.
.PP
If \fIwidget\fR and/or \fIname\fR is provided, the dialog will be centered over \fIwidget\fR and named \fIname.\fR
.PP
getOpenFileName() returns a null string if the user cancelled the dialog.
.PP
This static function is less capable than the full QFileDialog object, but is convenient and easy to use.
.PP
Example:
.PP
.nf
.br
    // start at the current working directory and with *.cpp as filter
.br
    QString f = QFileDialog::getOpenFileName( 0, "*.cpp", this );
.br
    if ( !f.isEmpty() ) {
.br
        // the user selected a valid existing file
.br
    } else {
.br
        // the user cancelled the dialog
.br
    }
.fi
.PP
getSaveFileName() is another convenience function, equal to this one except that it allows the user to specify the name of a nonexistent file name.
.PP
See also: getSaveFileName().
.SH "QStrList QFileDialog::getOpenFileNames ( const char * filter= 0, const char * dir = 0, QWidget * parent = 0, const char * name = 0 ) \fC[static]\fR"
Lets the user select N files from a single directory, and returns a list of the selected files. The list may be empty, and the file names are fully qualified (i.e. "/usr/games/quake" or "c:\\\\quake\\\\quake").
.PP
\fIfilter\fR is the default glob pattern (which the user can change). The default is all files. \fIdir\fR is the starting directory. If \fIdir\fR is not supplied, QFileDialog picks something presumably useful (such as the directory where the user selected something last, or the current working directory).
.PP
\fIparent\fR is a widget over which the dialog should be positioned and \fIname\fR is the object name of the temporary QFileDialog object.
.PP
Note that the returned list has auto-delete turned off. It is the application developer's responsibility to delete the strings in the list, for example using code such as:
.PP
.nf
.br
    QStrList s( QFileDialog::getOpenFileNames() );
.br
    // do something with the files in s.
.br
    s.setAutoDelete();
.br
    s.clear(); // or just go out of scope.
.fi
.SH "QString QFileDialog::getSaveFileName ( const char * startWith = 0, const char * filter= 0, QWidget * parent = 0, const char * name = 0 ) \fC[static]\fR"
Opens a modal file dialog and returns the name of the file to be saved.
.PP
If \fIstartWith\fR is the name of a directory, the dialog starts off in that directory. If \fIstartWith\fR is the name of an existing file, the dialogs starts in that directory, and with \fIstartWith\fR selected.
.PP
Only files matching \fIfilter\fR are selectable. If \fIfilter\fR is 0, all files are selectable.
.PP
If \fIwidget\fR and/or \fIname\fR is provided, the dialog will be centered over \fIwidget\fR and named \fIname.\fR
.PP
Returns a null string if the user cancelled the dialog.
.PP
This static function is less capable than the full QFileDialog object, but is convenient and easy to use.
.PP
Example:
.PP
.nf
.br
    // start at the current working directory and with *.cpp as filter
.br
    QString f = QFileDialog::getSaveFileName( 0, "*.cpp", this );
.br
    if ( !f.isEmpty() ) {
.br
        // the user gave a file name
.br
    } else {
.br
        // the user cancelled the dialog
.br
    }
.fi
.PP
getOpenFileName() is another convenience function, equal to this one except that it does not allow the user to specify the name of a nonexistent file name.
.PP
See also: getOpenFileName().
.SH "QFileIconProvider * QFileDialog::iconProvider () \fC[static]\fR"
Returns the icon provider currently in use. By default there is no icon provider and this function returns 0.
.PP
See also: setIconProvider() and QFileIconProvider.
.SH "void QFileDialog::keyPressEvent ( QKeyEvent * ke ) \fC[virtual protected]\fR"
Reimplemented for internal reasons; the API is not affected.
.PP
Reimplemented from QWidget.
.SH "QFileDialog::Mode QFileDialog::mode() const"
Returns the file mode of this dialog.
.PP
See also: setMode().
.SH "void QFileDialog::rereadDir ()"
Re-reads the active directory in the file dialog.
.PP
It is seldom necessary to call this function. It is provided in case the directory contents change and you want to refresh the directory list box.
.SH "void QFileDialog::resizeEvent ( QResizeEvent * ) \fC[virtual protected]\fR"
Handles resize events for the file dialog.
.PP
Reimplemented from QWidget.
.SH "QString QFileDialog::selectedFile () const"
Returns the selected file name.
.PP
If a file name was selected, the returned string contains the absolute path name. The returned string is a null string if no file name was selected.
.PP
See also: QString::isNull().
.SH "void QFileDialog::setDir ( const QDir & dir )"
Sets a directory path for the file dialog.
.PP
See also: dir().
.SH "void QFileDialog::setDir ( const char * pathstr ) \fC[slot]\fR"
Sets a directory path string for the file dialog.
.PP
See also: dir().
.SH "void QFileDialog::setFilter ( const char * newFilter ) \fC[slot]\fR"
Sets the filter spec in use to \fInewFilter.\fR
.PP
If \fInewFilter\fR matches the regular expression \fC([a-zA-Z0-9\\.\\*\\?]*)$\fR (ie. it ends with a normal wildcard expression enclosed in parentheses), only the parenthesized is used. This means that these two calls are equivalent:
.PP
.nf
.br
     fd->setFilter( "All perl files (*.pl)" );
.br
     fd->setFilter( "*.pl" )
.fi
.SH "void QFileDialog::setFilters ( const char ** types ) \fC[slot]\fR"
Sets this file dialog to offer \fItypes\fR in the File Type combo box. \fItypes\fR must be a null-terminated list of strings; each string must be in the format described in the documentation for setFilter().
.PP
See also: setFilter().
.SH "void QFileDialog::setFilters ( const QStrList & ) \fC[slot]\fR"
This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts.
.SH "void QFileDialog::setIconProvider ( QFileIconProvider * provider ) \fC[static]\fR"
Sets all file dialogs to use \fIprovider\fR to select icons to draw for each file. By default there is no icon provider, and QFileDialog simply draws a "folder" icon next to each directory and nothing next to the files.
.PP
See also: QFileIconProvider and iconProvider().
.SH "void QFileDialog::setMode ( Mode newMode )"
Sets this file dialog to \fInewMode,\fR which can be one of \fCDirectory\fR (directories are accepted), \fCExistingFile\fR (existing files are accepted) or \fCAnyFile\fR (any valid file name is accepted).
.PP
See also: mode().
.SH "void QFileDialog::setSelection ( const char * filename )"
Sets the default selection to \fIfilename.\fR  If \fIfilename\fR is
absolute, setDir() is also called.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qfiledialog.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
