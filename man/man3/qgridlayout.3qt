.TH QGridLayout 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QGridLayout \- Lays out child widgets in a grid
.SH SYNOPSIS
.br
.PP
\fC#include <qlayout.h>\fR
.PP
Inherits QLayout.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QGridLayout ( QWidget * " "parent" ", int " "nRows" ", int " "nCols" ", int " "border" "=0, int " "autoBorder" " = -1, const char * " "name" "=0 )"
.br
.ti -1c
.BI "QGridLayout ( int " "nRows" ", int " "nCols" ", int " "autoBorder" " = -1, const char * " "name" "=0 )"
.br
.ti -1c
.BI "\fB~QGridLayout\fR ()"
.br
.ti -1c
.BI "void addWidget ( QWidget *, int " "row" ", int " "col" ", int " "align" " = 0 )"
.br
.ti -1c
.BI "void addMultiCellWidget ( QWidget *, int " "fromRow" ", int " "toRow" ", int " "fromCol" ", int " "toCol" ", int " "align" " = 0 )"
.br
.ti -1c
.BI "void addLayout ( QLayout * " "layout" ", int " "row" ", int col )"
.br
.ti -1c
.BI "void setRowStretch ( int " "row" ", int stretch )"
.br
.ti -1c
.BI "void setColStretch ( int " "col" ", int stretch )"
.br
.ti -1c
.BI "void addRowSpacing ( int " "row" ", int minsize )"
.br
.ti -1c
.BI "void addColSpacing ( int " "col" ", int minsize )"
.br
.ti -1c
.BI "int numRows () const"
.br
.ti -1c
.BI "int numCols () const"
.br
.ti -1c
.BI "void expand ( int " "rows" ", int cols )"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual QChain* mainVerticalChain ()"
.br
.ti -1c
.BI "virtual QChain* mainHorizontalChain ()"
.br
.ti -1c
.BI "virtual void initGM ()"
.br
.in -1c
.SH DESCRIPTION
The QGridLayout class lays out child widgets in a grid.
.PP
QGridLayout takes the space it gets (from its parent layout or from the mainWidget()), divides it up into rows and columns, and puts each of the child widgets it manages into the correct cell(s).
.PP
Columns and rows behave identically; we will discuss columns but there are eqivalent functions for rows.
.PP
Each column has a minimum width and a stretch factor. The minimum width is the greatest of that set using addColSpacing() and the minimum width of each widget in that column. The stretch factor is set using setColStretch() and determines how much of the available space the column will get, over and above its necessary minimum.
.PP
Normally, each child widget or layout is put into a cell of its own using addWidget() or addLayout(), but you can also put widget into multiple cells using addMultiCellWidget(). However, if you do that, QGridLayout does not take the child widget's minimum size into consideration (because it cannot know what column the minimum width should belong to). Thus you must set the minimum width of each column using addColSpacing().
.PP
This illustration shows a fragment of a dialog with a five-column, three-row grid (the grid is shown overlaid in magenta):
.PP
.ce 1
.B "[Image Omitted]"
.PP
Columns 0, 2 and 4 in this dialog fragment are made up of a QLabel, a QLineEdit and a QListBox. Columns 1 and 2 are placeholders, made with setColSpacing(). Row 0 consists of three QLabel objects, row 1 of three QLineEdit objects and row 2 of three QListBox objects.
.PP
Since we did not want any space between the rows, we had to use placeholder columns to get the right amount of space between the columns.
.PP
Note that the columns and rows are not equally wide/tall: If you want two columns to be equally wide, you must set the columns' minimum widths and stretch factors to be the same yourself. You do this using addColSpacing() and setStretch().
.PP
If the QGridLayout is not the top-level layout (ie. is not managing all of the widget's area and children), you must add it to its parent layout when you have created it, but before you can do anything with it. The normal way to add a layout is by calling parentLayout->addLayout().
.PP
Once you have done that, you can start putting widgets and other layouts in the cells of your grid layout using addWidget(), addLayout() and addMultiCellWidget().
.PP
Finally, if the grid is the top-level layout, you activate() it.
.PP
QGridLayout also includes two margin widths: The border width and the inter-box width. The border width is the width of the reserved space along each of the QGridLayout's four sides. The intra-widget width is the width of the automatically allocated spacing between neighbouring boxes.
.PP
The border width defaults to 0, and the intra-widget width defaults to the same as the border width. Both are set using arguments to the constructor.
.PP
Examples:
.(l
pref/pref.cpp layout/layout.cpp widgets/widgets.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QGridLayout::QGridLayout ( QWidget * parent, int nRows, int nCols, int border=0, int autoBorder = -1, const char * name=0 )"
Constructs a new QGridLayout with \fInRows\fR rows, \fInCols\fR columns and main widget \fIparent. parent\fR may not be 0.
.PP
\fIborder\fR is the number of pixels between the edge of the widget and the managed children. \fIautoBorder\fR is the default number of pixels between cells. If \fIautoBorder\fR is -1 the value of \fIborder\fR is used.
.PP
\fIname\fR is the internal object name.
.SH "QGridLayout::QGridLayout ( int nRows, int nCols, int autoBorder = -1, const char * name=0 )"
Constructs a new grid with \fInRows\fR rows and \fInCols\fR columns, If \fIautoBorder\fR is -1, this QGridLayout will inherits its parent's defaultBorder(), otherwise \fIautoBorder\fR is used.
.PP
You have to insert this grid into another layout before using it.
.SH "QGridLayout::~QGridLayout ()"
Deletes this grid. Geometry management is terminated if this is a top-level grid.
.SH "void QGridLayout::addColSpacing ( int col, int minsize )"
Sets the minimum width of \fIcol\fR to \fIminsize\fR pixels.
.SH "void QGridLayout::addLayout ( QLayout * layout, int row, int col )"
Places another layout at position (\fIrow, col)\fR in the grid. The top left position is (0,0).
.PP
Examples:
.(l
widgets/widgets.cpp
.)l
.SH "void QGridLayout::addMultiCellWidget ( QWidget * w, int fromRow, int toRow, int fromCol, int toCol, int align = 0 )"
Adds the widget \fIw\fR to the cell grid, spanning multiple rows/columns.
.PP
Note that multicell widgets do not influence the minimum or maximum size of columns/rows they span. Use addColSpacing() or addRowSpacing() to set minimum sizes explicitly.
.PP
Alignment is specified by \fIalign\fR which takes the same arguments as QLabel::setAlignment(), alignment has no effect unless you have set QWidget::maximumSize().
.PP
Examples:
.(l
layout/layout.cpp widgets/widgets.cpp
.)l
.SH "void QGridLayout::addRowSpacing ( int row, int minsize )"
Sets the minimum height of \fIrow\fR to \fIminsize\fR pixels.
.SH "void QGridLayout::addWidget ( QWidget * w, int row, int col, int align = 0 )"
Adds the widget \fIw\fR to the cell grid at \fIrow, col.\fR The top left position is (0,0)
.PP
Alignment is specified by \fIalign\fR which takes the same arguments as QLabel::setAlignment(). Note that widgets take all the space they can get; alignment has no effect unless you have set QWidget::maximumSize().
.PP
Examples:
.(l
pref/pref.cpp layout/layout.cpp widgets/widgets.cpp
.)l
.SH "void QGridLayout::expand ( int nRows, int nCols )"
Expands this grid so that it will have \fInRows\fR rows and \fInCols\fR columns. Will not shrink the grid.
.SH "void QGridLayout::initGM () \fC[virtual protected]\fR"
Initializes this grid.
.PP
Reimplemented from QLayout.
.SH "QChain * QGridLayout::mainHorizontalChain () \fC[virtual protected]\fR"
This function returns the main horizontal chain.
.PP
Reimplemented from QLayout.
.SH "QChain * QGridLayout::mainVerticalChain () \fC[virtual protected]\fR"
This function returns the main vertical chain.
.PP
Reimplemented from QLayout.
.SH "int QGridLayout::numCols () const"
Returns the number of columns in this grid.
.SH "int QGridLayout::numRows () const"
Returns the number of rows in this grid.
.SH "void QGridLayout::setColStretch ( int col, int stretch )"
Sets the stretch factor of column \fIcol\fR to \fIstretch.\fR The first column is number 0.
.PP
The stretch factor is relative to the other columns in this grid. Columns with higher stretch factor take more of the available space.
.PP
The default stretch factor is 0. If the stretch factor is 0 and no other column in this table can grow at all, the column may still grow.
.PP
Examples:
.(l
pref/pref.cpp layout/layout.cpp widgets/widgets.cpp
.)l
.SH "void QGridLayout::setRowStretch ( int row, int stretch )"
Sets the stretch factor of row \fIrow\fR to \fIstretch.\fR The first row is number 0.
.PP
The stretch factor is relative to the other rows in this grid. Rows with higher stretch factor take more of the available space.
.PP
The default stretch factor is 0. If the stretch factor is 0 and no other row in this table can grow at all, the row may still grow.
.PP
Examples:
.(l
widgets/widgets.cpp
.)l
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qgridlayout.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
