.TH QCacheIterator 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QCacheIterator \- Iterator for QCache collections
.SH SYNOPSIS
.br
.PP
\fC#include <qcache.h>\fR
.PP
Inherits QGCacheIterator.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QCacheIterator ( const QCache<type> & cache )"
.br
.ti -1c
.BI "QCacheIterator ( const QCacheIterator<type> & ci )"
.br
.ti -1c
.BI "QCacheIterator<type>& operator= ( const QCacheIterator<type> & ci )"
.br
.ti -1c
.BI "uint count () const"
.br
.ti -1c
.BI "bool isEmpty () const"
.br
.ti -1c
.BI "bool atFirst () const"
.br
.ti -1c
.BI "bool atLast () const"
.br
.ti -1c
.BI "type* toFirst ()"
.br
.ti -1c
.BI "type* toLast ()"
.br
.ti -1c
.BI "operator \fBtype*\fR ()const"
.br
.ti -1c
.BI "type* current () const"
.br
.ti -1c
.BI "const char* currentKey () const"
.br
.ti -1c
.BI "type* operator ()"
.br
.ti -1c
.BI "type* operator++ ()"
.br
.ti -1c
.BI "type* operator+= ( uint jump )"
.br
.ti -1c
.BI "type* operator-- ()"
.br
.ti -1c
.BI "type* operator-= ( uint jump )"
.br
.in -1c
.SH DESCRIPTION
The QCacheIterator class provides an iterator for QCache collections.
.PP
Note that the traversal order is arbitrary, you are not guaranteed any particular order. If new objects are inserted into the cache while the iterator is active, the iterator may or may not see them.
.PP
Multiple iterators are completely independent, even when they operate on the same QCache. QCache updates all iterators that refer an item when that itam is removed.
.PP
QCacheIterator provides an operator++(), and an operator+=() to traverse the cache, current() and currentKey() to access the current cache item and its key, atFirst() atLast() which return TRUE if the iterator points to the first/last item in the cache, isEmpty() which returns TRUE if the cache is empty and finally count() which returns the number of items in the cache.
.PP
Note that atFirst() and atLast() refer to the iterator's arbitrary ordering, not to the cache's internal LRU list.
.PP
See also: QCache.
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QCacheIterator::QCacheIterator ( const QCache<type> & cache )"
Constructs an iterator for \fIcache.\fR The current iterator item is set to point on the first item in the \fIcache\fR (or rather, the first item is defined to be the item at which this constructor sets the iterator to point).
.SH "QCacheIterator::QCacheIterator ( const QCacheIterator<type> & ci )"
Constructs an iterator for the same cache as \fIci.\fR The new iterator starts at the same item as ci.current(), but moves independently thereafter.
.SH "QCacheIterator::operator type * () const"
Cast operator. Returns a pointer to the current iterator item. Same as current().
.SH "uint QCacheIterator::count () const"
Returns the number of items in the cache on whichthis iterator operates.
.PP
See also: isEmpty().
.SH "type * QCacheIterator::current () const"
Returns a pointer to the current iterator item.
.SH "const char * QCacheIterator::currentKey () const"
Returns a pointer to the key for the current iterator item.
.SH "bool QCacheIterator::isEmpty () const"
Returns TRUE if the cache is empty, i.e. count() == 0, otherwise FALSE.
.PP
See also: count().
.SH "type * QCacheIterator::operator() ()"
Makes the succeeding item current and returns the original current item.
.PP
If the current iterator item was the last item in the cache or if it was null, null is returned.
.SH "type * QCacheIterator::operator++ ()"
Prefix ++ makes the iterator point to the item just after \fIcurrent(),\fR and makes that the new current item for the iterator. If current() was the last item, operator--() returns 0.
.SH "type * QCacheIterator::operator+= ( uint jump )"
Returns the item \fIjump\fR positions after the current item, or null if it is beyond the last item. Makes this the current item.
.SH "type * QCacheIterator::operator-- ()"
Prefix -- makes the iterator point to the item just before \fIcurrent(),\fR and makes that the new current item for the iterator. If current() was the first item, operator--() returns 0.
.SH "type * QCacheIterator::operator-= ( uint jump )"
Returns the item \fIjump\fR positions before the current item, or null if it is beyond the first item. Makes this the current item.
.SH "QCacheIterator<type>& QCacheIterator::operator= ( const QCacheIterator<type> & ci )"
Makes this an iterator for the same cache as \fIci.\fR The new iterator starts at the same item as ci.current(), but moves independently thereafter.
.SH "type * QCacheIterator::toFirst ()"
Sets the iterator to point to the first item in the cache and returns a pointer to the item.
.PP
Sets the iterator to null and returns null if if the cache is empty.
.PP
See also: toLast() and isEmpty().
.SH "type * QCacheIterator::toLast ()"
Sets the iterator to point to the last item in the cache and returns a pointer to the item.
.PP
Sets the iterator to null and returns null if if the cache is empty.
.PP
See also:  toLast() and isEmpty().
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qcacheiterator.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
