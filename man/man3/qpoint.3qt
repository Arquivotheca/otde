.TH QPoint 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QPoint \- Defines a point in the plane
.SH SYNOPSIS
.br
.PP
\fC#include <qpoint.h>\fR
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QPoint ()"
.br
.ti -1c
.BI "QPoint ( int " "xpos" ", int ypos )"
.br
.ti -1c
.BI "bool isNull () const"
.br
.ti -1c
.BI "int \fBx\fR () const"
.br
.ti -1c
.BI "int \fBy\fR () const"
.br
.ti -1c
.BI "void setX ( int x )"
.br
.ti -1c
.BI "void setY ( int y )"
.br
.ti -1c
.BI "QCOORD& rx ()"
.br
.ti -1c
.BI "QCOORD& ry ()"
.br
.ti -1c
.BI "QPoint& operator+= ( const QPoint & p )"
.br
.ti -1c
.BI "QPoint& operator-= ( const QPoint & p )"
.br
.ti -1c
.BI "QPoint& operator*= ( int c )"
.br
.ti -1c
.BI "QPoint& operator*= ( double c )"
.br
.ti -1c
.BI "QPoint& operator/= ( int c )"
.br
.ti -1c
.BI "QPoint& operator/= ( double c )"
.br
.in -1c
.SS "Static Public Members"
.in +1c
.ti -1c
.BI "void warningDivByZero ()"
.br
.in -1c
.SH RELATED FUNCTION DOCUMENTATION
(Note that these are not member functions.)
.in +1c
.ti -1c
.BI "bool operator== (const QPoint & " "p1" ", const QPoint & " "p2" ")"
.br
.ti -1c
.BI "bool operator!= (const QPoint & " "p1" ", const QPoint & " "p2" ")"
.br
.ti -1c
.BI "QPoint operator+ (const QPoint & " "p1" ", const QPoint & " "p2" ")"
.br
.ti -1c
.BI "QPoint operator- (const QPoint & " "p1" ", const QPoint & " "p2" ")"
.br
.ti -1c
.BI "QPoint operator* (const QPoint & " "p" ", int " "c" ")"
.br
.ti -1c
.BI "QPoint operator* (int " "c" ", const QPoint & " "p" ")"
.br
.ti -1c
.BI "QPoint operator* (const QPoint & " "p" ", double " "c" ")"
.br
.ti -1c
.BI "QPoint operator* (double " "c" ", const QPoint & " "p" ")"
.br
.ti -1c
.BI "QPoint operator- (const QPoint & " "p" ")"
.br
.ti -1c
.BI "QPoint operator/ (const QPoint & " "p" ", int " "c" ")"
.br
.ti -1c
.BI "QPoint operator/ (const QPoint & " "p" ", double " "c" ")"
.br
.ti -1c
.BI "QDataStream & operator<< (QDataStream & " "s" ", const QPoint & " "p" ")"
.br
.ti -1c
.BI "QDataStream & operator>> (QDataStream & " "s" ", QPoint & " "p" ")"
.br
.in -1c
.SH DESCRIPTION
The QPoint class defines a point in the plane.
.PP
A point is specified by an x coordinate and a y coordinate.
.PP
The coordinate type is QCOORD (defined in qwindowdefs.h as \fCshort).\fR The minimum value of QCOORD is QCOORD_MIN (-32768) and the maximum value is QCOORD_MAX (32767).
.PP
We have defined many operator functions that make arithmetic on points simple and intuitive.
.PP
Example:
.PP
.nf
.br
    QPoint p(  1, 2 );
.br
    QPoint q( -8, 5 );
.br
    QPoint r(  9, 7 );
.br
    QPoint x = 2*p + (q-r)*5.5 - (r+p/1.5);
.fi
.PP
See also: QSize and QRect.
.PP
Examples:
.(l
tictac/tictac.cpp table/table.cpp forever/forever.cpp connect/connect.cpp drawdemo/drawdemo.cpp xform/xform.cpp aclock/aclock.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QPoint::QPoint ()"
Constructs a point with undefined x and y values.
.SH "QPoint::QPoint ( int xpos, int ypos )"
Constructs a point with the x value \fIxpos\fR and y value \fIypos.\fR
.SH "bool QPoint::isNull () const"
Returns TRUE if both the x value and the y value are 0.
.SH "QPoint & QPoint::operator*= ( double c )"
Multiplies both x and y with \fIc,\fR and return a reference to this point.
.PP
Example:
.PP
.nf
.br
    QPoint p( -1, 4 );
.br
    p *= 2.5;                   // p becomes (-3,10)
.fi
.PP
Note that the result is truncated.
.SH "QPoint & QPoint::operator*= ( int c )"
Multiplies both x and y with \fIc,\fR and return a reference to this point.
.PP
Example:
.PP
.nf
.br
    QPoint p( -1, 4 );
.br
    p *= 2;                     // p becomes (-2,8)
.fi
.SH "QPoint & QPoint::operator+= ( const QPoint & p )"
Adds \fIp\fR to the point and returns a reference to this point.
.PP
Example:
.PP
.nf
.br
    QPoint p(  3, 7 );
.br
    QPoint q( -1, 4 );
.br
    p += q;                     // p becomes (2,11)
.fi
.SH "QPoint & QPoint::operator-= ( const QPoint & p )"
Subtracts \fIp\fR from the point and returns a reference to this point.
.PP
Example:
.PP
.nf
.br
    QPoint p(  3, 7 );
.br
    QPoint q( -1, 4 );
.br
    p -= q;                     // p becomes (4,3)
.fi
.SH "QPoint & QPoint::operator/= ( double c )"
Divides both x and y by \fIc,\fR and return a reference to this point.
.PP
Example:
.PP
.nf
.br
    QPoint p( -3, 10 );
.br
    p /= 2.5;                   // p becomes (-1,4)
.fi
.PP
Note that the result is truncated.
.SH "QPoint & QPoint::operator/= ( int c )"
Divides both x and y by \fIc,\fR and return a reference to this point.
.PP
Example:
.PP
.nf
.br
    QPoint p( -2, 8 );
.br
    p /= 2;                     // p becomes (-1,4)
.fi
.SH "QCOORD & QPoint::rx ()"
Returns a reference to the x coordinate of the point.
.PP
Using a reference makes it possible to directly manipulate x.
.PP
Example:
.PP
.nf
.br
    QPoint p( 1, 2 );
.br
    p.rx()--;                   // p becomes (0,2)
.fi
.PP
See also: ry().
.SH "QCOORD & QPoint::ry ()"
Returns a reference to the y coordinate of the point.
.PP
Using a reference makes it possible to directly manipulate y.
.PP
Example:
.PP
.nf
.br
    QPoint p( 1, 2 );
.br
    p.ry()++;                   // p becomes (1,3)
.fi
.PP
See also: rx().
.SH "void QPoint::setX ( int x )"
Sets the x coordinate of the point to \fIx.\fR
.PP
See also: setY().
.SH "void QPoint::setY ( int y )"
Sets the y coordinate of the point to \fIy.\fR
.PP
See also: setX().
.SH "int QPoint::x () const"
Returns the x coordinate of the point.
.PP
See also: y().
.PP
Examples:
.(l
table/table.cpp drawdemo/drawdemo.cpp aclock/aclock.cpp
.)l
.SH "int QPoint::y () const"
Returns the y coordinate of the point.
.PP
See also: x().
.PP
Examples:
.(l
table/table.cpp drawdemo/drawdemo.cpp aclock/aclock.cpp
.)l
.SH RELATED FUNCTION DOCUMENTATION
.SH "bool operator== (const QPoint & p1, const QPoint & p2)"
Returns TRUE if \fIp1\fR and \fIp2\fR are equal, or FALSE if they are different.
.SH "bool operator!= (const QPoint & p1, const QPoint & p2)"
Returns TRUE if \fIp1\fR and \fIp2\fR are different, or FALSE if they are equal.
.SH "QPoint operator+ (const QPoint & p1, const QPoint & p2)"
Returns the sum of \fIp1\fR and \fIp2;\fR each component is added separately.
.SH "QPoint operator- (const QPoint & p1, const QPoint & p2)"
Returns \fIp2\fR subtracted from \fIp1;\fR each component is subtracted separately.
.SH "QPoint operator* (const QPoint & p, int c)"
Multiplies both of \fIp's\fR components by \fIc\fR and returns the result.
.SH "QPoint operator* (int c, const QPoint & p)"
Multiplies both of \fIp's\fR components by \fIc\fR and returns the result.
.SH "QPoint operator* (const QPoint & p, double c)"
Multiplies both of \fIp's\fR components by \fIc\fR and returns the result.
.SH "QPoint operator* (double c, const QPoint & p)"
Multiplies both of \fIp's\fR components by \fIc\fR and returns the result.
.SH "QPoint operator- (const QPoint & p)"
Returns \fIp\fR where x and y have opposite signs.
.SH "QPoint operator/ (const QPoint & p, int c)"
Divides both of \fIp's\fR components by \fIc\fR and returns the result.
.SH "QPoint operator/ (const QPoint & p, double c)"
Divides both of \fIp's\fR components by \fIc\fR and returns the result.
.PP
Note that the result is truncated.
.SH "QDataStream & operator<< (QDataStream & s, const QPoint & p)"
Writes a QPoint to the stream and returns a reference to the stream.
.PP
Serialization format: [x (INT16), y (INT16)].
.SH "QDataStream & operator>> (QDataStream & s, QPoint & p)"
Reads a QPoint from the stream and returns a reference to the stream.
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qpoint.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
