.TH QListViewItem 3qt "26 Febrary 1999" "Troll Tech AS" \" -*- nroff -*-
.\" Copyright 1992-1997 Troll Tech AS.  All rights reserved.  See the
.\" LICENSE file included in the distribution for a complete license
.\" statement.
.\"
.ad l
.nh
.SH NAME
QListViewItem \- Implements a list view item
.SH SYNOPSIS
.br
.PP
\fC#include <qlistview.h>\fR
.PP
Inherited by QCheckListItem.
.PP
.SS "Public Members"
.in +1c
.ti -1c
.BI "QListViewItem ( QListView * parent )"
.br
.ti -1c
.BI "QListViewItem ( QListViewItem * parent )"
.br
.ti -1c
.BI "QListViewItem ( QListView * " "parent" ", QListViewItem * after )"
.br
.ti -1c
.BI "QListViewItem ( QListViewItem * " "parent" ", QListViewItem * after )"
.br
.ti -1c
.BI "QListViewItem ( QListView * " "parent" ", const char *, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0 )"
.br
.ti -1c
.BI "QListViewItem ( QListViewItem * " "parent" ", const char *, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0 )"
.br
.ti -1c
.BI "QListViewItem ( QListView * " "parent" ", QListViewItem * " "after" ", const char *, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0 )"
.br
.ti -1c
.BI "QListViewItem ( QListViewItem * " "parent" ", QListViewItem * " "after" ", const char *, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0, const char * = 0 )"
.br
.ti -1c
.BI "virtual \fB~QListViewItem\fR ()"
.br
.ti -1c
.BI "virtual void insertItem ( QListViewItem * )"
.br
.ti -1c
.BI "virtual void removeItem ( QListViewItem * )"
.br
.ti -1c
.BI "int height () const"
.br
.ti -1c
.BI "virtual void invalidateHeight ()"
.br
.ti -1c
.BI "int totalHeight () const"
.br
.ti -1c
.BI "virtual int width ( const QFontMetrics &, const QListView *, int column ) const"
.br
.ti -1c
.BI "void widthChanged ( int " "column" "=-1 ) const"
.br
.ti -1c
.BI "int depth () const"
.br
.ti -1c
.BI "virtual void setText ( int, const char * )"
.br
.ti -1c
.BI "virtual const char* text ( int ) const"
.br
.ti -1c
.BI "virtual void setPixmap ( int, const QPixmap & )"
.br
.ti -1c
.BI "virtual const QPixmap* pixmap ( int ) const"
.br
.ti -1c
.BI "virtual const char* key ( int, bool ) const"
.br
.ti -1c
.BI "virtual void sortChildItems ( int, bool )"
.br
.ti -1c
.BI "int childCount () const"
.br
.ti -1c
.BI "bool isOpen () const"
.br
.ti -1c
.BI "virtual void setOpen ( bool )"
.br
.ti -1c
.BI "virtual void setup ()"
.br
.ti -1c
.BI "virtual void setSelected ( bool )"
.br
.ti -1c
.BI "bool isSelected () const"
.br
.ti -1c
.BI "virtual void paintCell ( QPainter *, const QColorGroup & " "cg" ", int " "column" ", int " "width" ", int alignment )"
.br
.ti -1c
.BI "virtual void paintBranches ( QPainter * " "p" ", const QColorGroup & " "cg" ", int " "w" ", int " "y" ", int " "h" ", GUIStyle s )"
.br
.ti -1c
.BI "virtual void paintFocus ( QPainter *, const QColorGroup & " "cg" ", const QRect & r )"
.br
.ti -1c
.BI "QListViewItem* firstChild () const"
.br
.ti -1c
.BI "QListViewItem* nextSibling () const"
.br
.ti -1c
.BI "QListViewItem* parent () const"
.br
.ti -1c
.BI "QListViewItem* itemAbove ()"
.br
.ti -1c
.BI "QListViewItem* itemBelow ()"
.br
.ti -1c
.BI "int itemPos () const"
.br
.ti -1c
.BI "QListView* listView () const"
.br
.ti -1c
.BI "virtual void setSelectable ( bool enable )"
.br
.ti -1c
.BI "bool isSelectable () const"
.br
.ti -1c
.BI "virtual void setExpandable ( bool )"
.br
.ti -1c
.BI "bool isExpandable ()"
.br
.ti -1c
.BI "void repaint () const"
.br
.in -1c
.SS "Protected Members"
.in +1c
.ti -1c
.BI "virtual void enforceSortOrder () const"
.br
.ti -1c
.BI "virtual void setHeight ( int )"
.br
.ti -1c
.BI "virtual void activate ()"
.br
.in -1c
.SH DESCRIPTION
The QListViewItem class implements a list view item.
.PP
A list viev item is a multi-column object capable of displaying itself. Its design has the following main goals: 
.TP
Work quickly and well for \fIlarge\fR sets of data. 
.TP
Be easy to use in the simple case. 
.PP
The simplest way to use QListViewItem is to construct one with a few constant strings. This creates an item which is a child of \fIparent,\fR with two fixed-content strings, and discards the pointer to it:
.PP
.nf
.br
     (void) new QListViewItem( parent, "first column", "second column" );
.fi
.PP
This object will be deleted when \fIparent\fR is deleted, as for QObjects.
.PP
The parent is either another QListViewItem or a QListView. If the parent is a QListView, this item is a top-level item within that QListView. If the parent is another QListViewItem, this item becomes a child of the parent item.
.PP
If you keep the pointer, you can set or change the texts using setText(), add pixmaps using setPixmap(), change its mode using setSelectable(), setSelected(), setOpen() and setExpandable(), change its height using setHeight(), and do much tree traversal. The set* functions in QListView also affect QListViewItem, of course.
.PP
You can traverse the tree as if it were a doubly linked list using itemAbove() and itemBelow(); they return pointers to the items directly above and below this item on the screen (even if none of the three are actually visible at the moment).
.PP
You can also traverse it as a tree, using parent(), firstChild() and nextSibling(). This code does something to each of an item's children:
.PP
.nf
.br
    QListViewItem * myChild = myItem->firstChild();
.br
    while( myChild ) {
.br
        doSomething( myChild );
.br
        myChild = myChild->nextSibling();
.br
    }
.fi
.PP
Note that the order of the children will change when the sorting order changes, and is undefined if the items are not visible. You can however call enforceSortOrder() at any time, and QListView will always call it before it needs to show an item.
.PP
Many programs will need to reimplement QListViewItem. The most commonly reimplemented functions are: 
.TP
text() returns the text in a column. Many subclasses will compute that on the fly. 
.TP
key() is used for sorting. The default key() simply calls text(), but judicious use of key can be used to sort by e.g. date (as QFileDialog does). 
.TP
setup() is called before showing the item, and whenever e.g. the font changes. 
.TP
activate() is called whenever the user clicks on the item or presses space when the item is the currently highlighted item.
.PP
Some subclasses call setExpandable( TRUE ) even when they have no children, and populate themselves when setup() is called. The dirview/dirview.cpp example program uses precisely this technique to start up quickly: The files and subdirectories in a directory aren't entered into the tree until they need to.
.PP
This example shows a number of root items in a QListView. These items are actually subclassed from QListViewItem: The file size, type etc. are computed on the fly.
.PP
.ce 1
.B "[Image Omitted]"
.PP
The next example shows a fraction of the dirview example. Again, the Directory/Symbolic Link column is computed on the fly. None of the items are root items; the \fIusr\fR item is a child of the root and the \fIX11\fR item is a child of the \fIusr\fR item.
.PP
.ce 1
.B "[Image Omitted]"
.PP
Examples:
.(l
dirview/dirview.cpp
.)l
.SH MEMBER FUNCTION DOCUMENTATION
.SH "QListViewItem::QListViewItem ( QListView * parent )"
Create a new list view item in the QListView \fIparent\fR and first in the parent's list of children.
.SH "QListViewItem::QListViewItem ( QListView * parent, QListViewItem * after )"
Constructs an empty list view item which is a child of \fIparent\fR and is after \fIafter\fR in the parent's list of children.
.SH "QListViewItem::QListViewItem ( QListView * parent, QListViewItem * after, const char * label1, const char * label2 = 0, const char * label3 = 0, const char * label4 = 0, const char * label5 = 0, const char * label6 = 0, const char * label7 = 0, const char * label8 = 0 )"
Creates a new list view item in the QListView \fIparent,\fR after item \fIafter,\fR with at most 8 constant strings as contents.
.PP
Note that the order is changed according to QListViewItem::key() unless the list view's sorting is disabled using QListView::setSorting( -1 ).
.SH "QListViewItem::QListViewItem ( QListView * parent, const char * label1, const char * label2 = 0, const char * label3 = 0, const char * label4 = 0, const char * label5 = 0, const char * label6 = 0, const char * label7 = 0, const char * label8 = 0 )"
Creates a new list view item in the QListView \fIparent, parent,\fR with at most 8 constant strings as contents.
.PP
.nf
.br
     (void)new QListViewItem( lv, "/", "Root directory" );
.fi
.SH "QListViewItem::QListViewItem ( QListViewItem * parent )"
Create a new list view item which is a child of \fIparent\fR and first in the parent's list of children.
.SH "QListViewItem::QListViewItem ( QListViewItem * parent, QListViewItem * after )"
Constructs an empty list view item which is a child of \fIparent\fR and is after \fIafter\fR in the parent's list of children.
.SH "QListViewItem::QListViewItem ( QListViewItem * parent, QListViewItem * after, const char * label1, const char * label2 = 0, const char * label3 = 0, const char * label4 = 0, const char * label5 = 0, const char * label6 = 0, const char * label7 = 0, const char * label8 = 0 )"
Creates a new list view item that's a child of the QListViewItem \fIparent,\fR after item \fIafter,\fR with at most 8 constant strings as contents.
.PP
Note that the order is changed according to QListViewItem::key() unless the list view's sorting is disabled using QListView::setSorting( -1 ).
.SH "QListViewItem::QListViewItem ( QListViewItem * parent, const char * label1, const char * label2 = 0, const char * label3 = 0, const char * label4 = 0, const char * label5 = 0, const char * label6 = 0, const char * label7 = 0, const char * label8 = 0 )"
Creates a new list view item that's a child of the QListViewItem \fIparent,\fR with at most 8 constant strings as contents. Possible example in a threaded news or e-mail reader:
.PP
.nf
.br
     (void)new QListViewItem( parentMessage, author, subject );
.fi
.SH "QListViewItem::~QListViewItem () \fC[virtual]\fR"
Deletes this item and all children of it, freeing up all allocated resources.
.SH "void QListViewItem::activate () \fC[virtual protected]\fR"
This virtual function is called whenever the user clicks on this item or presses Space on it. The default implementation does nothing.
.PP
Reimplemented in QCheckListItem.
.SH "int QListViewItem::childCount () const"
Returns the current number of children of this item.
.SH "int QListViewItem::depth () const"
Returns the depth of this item.
.SH "void QListViewItem::enforceSortOrder () const \fC[virtual protected]\fR"
Makes sure that this object's children are sorted appropriately.
.PP
This only works if every item in the chain from the root item to this item is sorted appropriately.
.PP
See also: sortChildItems().
.SH "QListViewItem* QListViewItem::firstChild () const"
Returns a pointer to the first (top) child of this item.
.PP
Note that the children are not guaranteed to be sorted properly. QListView and QListViewItem try to postpone or avoid sorting to the greatest degree possible, in order to keep the user interface snappy.
.PP
See also: nextSibling().
.SH "int QListViewItem::height () const"
Returns the height of this item in pixels. This does not include the height of any children; totalHeight() returns that.
.SH "void QListViewItem::insertItem ( QListViewItem * newChild ) \fC[virtual]\fR"
Inserts \fInewChild\fR into its list of children. Called by the constructor of \fInewChild.\fR
.SH "void QListViewItem::invalidateHeight () \fC[virtual]\fR"
Invalidates the cached total height of this item including all open children.
.PP
See also: setHeight(), ownHeight() and totalHeight().
.SH "bool QListViewItem::isExpandable ()"
{ return expnadable; }
.PP
Returns TRUE if this item is expandable even when it has no children.
.SH "bool QListViewItem::isOpen () const"
Returns TRUE if this list view item has children \fIand\fR they are potentially visible, or FALSE if the item has no children or they are hidden.
.PP
See also: setOpen().
.SH "bool QListViewItem::isSelectable () const"
Returns TRUE if the item is selectable (as it is by default) and FALSE if it isn't.
.PP
See also: setSelectable().
.SH "bool QListViewItem::isSelected () const"
Returns TRUE if this item is selected, or FALSE if it is not.
.PP
See also: setSelection(), selectionChanged() and QListViewItem::setSelected().
.SH "QListViewItem * QListViewItem::itemAbove ()"
Returns a pointer to the item immediately above this item on the screen. This is usually the item's closest older sibling, but may also be its parent or its next older sibling's youngest child, or something else if anyoftheabove->height() returns 0.
.PP
This function assumes that all parents of this item are open (ie. that this item is visible, or can be made visible by scrolling).
.PP
See also: itemBelow() and itemRect().
.SH "QListViewItem * QListViewItem::itemBelow ()"
Returns a pointer to the item immediately below this item on the screen. This is usually the item's eldest child, but may also be its next younger sibling, its parent's next younger sibling, granparent's etc., or something else if anyoftheabove->height() returns 0.
.PP
This function assumes that all parents of this item are open (ie. that this item is visible, or can be made visible by scrolling).
.PP
See also: itemAbove() and itemRect().
.SH "int QListViewItem::itemPos () const"
Returns the y coordinate of \fIitem\fR in the list view's coordinate system. This functions is normally much slower than QListView::itemAt(), but it works for all items, while QListView::itemAt() normally works only for items on the screen.
.PP
See also: QListView::itemAt(), QListView::itemRect() and QListView::itemPos().
.SH "const char * QListViewItem::key ( int column, bool ascending ) const \fC[virtual]\fR"
Returns a key that can be used for sorting by column \fIcolumn.\fR The default implementation returns text(). Derived classes may also incorporate the order indicated by \fIascending\fR into this key, although this is not recommended.
.PP
QListViewItem immediately copies the return value of this function, so it's safe to return a pointer to a static variable.
.PP
You can use this function to sort by non-alphabetic data. This code excerpt sort by file modification date, for example
.PP
.nf
.br
    if ( column == 3 ) {
.br
        QDateTime epoch( QDate( 1980, 1, 1 ) );
.br
        tmpString.sprintf( "%08d", epoch.secsTo( myFile.lastModified() ) );
.br
    } else {
.br
        // ....
.br
    }
.br
    return tmpString;
.fi
.PP
See also: sortChildItems().
.SH "QListView * QListViewItem::listView () const"
Returns a pointer to the listview containing this item.
.SH "QListViewItem* QListViewItem::nextSibling () const"
Returns a pointer to the next sibling (below this one) of this item.
.PP
Note that the siblings are not guaranteed to be sorted properly. QListView and QListViewItem try to postpone or avoid sorting to the greatest degree possible, in order to keep the user interface snappy.
.PP
See also: firstChild().
.SH "void QListViewItem::paintBranches ( QPainter * p, const QColorGroup & cg, int w, int y, int h, GUIStyle s ) \fC[virtual]\fR"
Paints a set of branches from this item to (some of) its children.
.PP
\fIp\fR is set up with clipping and translation so that you can draw only in the rectangle you need to; \fIcg\fR is the color group to use, 0,top is the top left corner of the update rectangle, w-1,top is the top right corner, 0,bottom-1 is the bottom left corner and the bottom right corner is left as an excercise for the reader.
.PP
The update rectangle is in an undefined state when this function is called; this function must draw on \fIall\fR of the pixels.
.PP
See also: paintCell() and QListView::drawContentsOffset().
.PP
Reimplemented in QCheckListItem.
.SH "void QListViewItem::paintCell ( QPainter * p, const QColorGroup & cg, int column, int width, int align ) \fC[virtual]\fR"
This virtual function paints the contents of one column of one item.
.PP
\fIp\fR is a QPainter open on the relevant paint device. \fIpa\fR is translated so 0, 0 is the top left pixel in the cell and \fIwidth-1,\fR height()-1 is the bottom right pixel \fIin\fR the cell. The other properties of \fIp\fR (pen, brush etc) are undefined. \fIcg\fR is the color group to use. \fIcolumn\fR is the logical column number within the item that is to be painted; 0 is the column which may contain a tree.
.PP
This function may use QListView::itemMargin() for readability spacing on the left and right sides of information such as text, and should honour isSelected() and QListView::allColumnsShowFocus().
.PP
If you reimplement this function, you should also reimplement width().
.PP
The rectangle to be painted is in an undefined state when this function is called, so you \fImust\fR draw on all the pixels.
.PP
See also: paintBranches() and QListView::drawContentsOffset().
.PP
Reimplemented in QCheckListItem.
.SH "void QListViewItem::paintFocus ( QPainter * p, const QColorGroup & cg, const QRect & r ) \fC[virtual]\fR"
Paints a focus indication on the rectangle \fIr\fR using painter \fIp\fR and colors \fIcg.\fR
.PP
\fIp\fR is already clipped.
.PP
See also: paintCell(), paintBranches() and QListView::setAllColumnsShowFocus().
.SH "QListViewItem* QListViewItem::parent () const"
Returns a pointer to the parent of this item.
.PP
See also: firstChild() and nextSibling().
.SH "const QPixmap * QListViewItem::pixmap ( int column ) const \fC[virtual]\fR"
Returns a pointer to the pixmap for \fIcolumn,\fR or a null pointer if there is no pixmap for \fIcolumn.\fR
.PP
See also: setText() and setPixmap().
.SH "void QListViewItem::removeItem ( QListViewItem * tbg ) \fC[virtual]\fR"
Removes \fItbg\fR from this object's list of children. This is normally called by tbg's destructor.
.SH "void QListViewItem::repaint () const"
Repaints this item on the screen, if it is currently visible.
.SH "void QListViewItem::setExpandable ( bool enable ) \fC[virtual]\fR"
Sets this item to be expandable even if it has no children if \fIenable\fR is TRUE, and to be expandable only if it has children if \fIenable\fR is FALSE (the default).
.PP
The dirview example uses this in the canonical fashion: It checks whether the directory is empty in setup() and calls setExpandable(TRUE) if not, and in setOpen() it reads the contents of the directory and inserts items accordingly. This strategy means that dirview can display the entire file system without reading very much at start-up.
.PP
Note that root items are not expandable by the user unless QListView::setRootIsDecorated() is set to TRUE.
.PP
See also: setSelectable().
.PP
Examples:
.(l
dirview/dirview.cpp
.)l
.SH "void QListViewItem::setHeight ( int height ) \fC[virtual protected]\fR"
Sets this item's own height to \fIheight\fR pixels. This implictly changes totalHeight() too.
.PP
Note that e.g. a font change causes this height to be overwitten unless you reimplement setup().
.PP
See also: ownHeight(), totalHeight() and isOpen();.
.SH "void QListViewItem::setOpen ( bool o ) \fC[virtual]\fR"
Sets this item to be open (its children are visible) if \fIo\fR is TRUE, and to be closed (its children are not visible) if \fIo\fR is FALSE.
.PP
Also does some bookeeping.
.PP
See also: ownHeight() and totalHeight().
.PP
Examples:
.(l
dirview/dirview.cpp
.)l
.SH "void QListViewItem::setPixmap ( int column, const QPixmap & pm ) \fC[virtual]\fR"
Sets the pixmap in column \fIcolumn\fR to \fIpm,\fR if \fIpm\fR is non-null and \fIcolumn\fR is non-negative.
.PP
See also: pixmap() and setText().
.SH "void QListViewItem::setSelectable ( bool enable ) \fC[virtual]\fR"
Sets this items to be selectable if \fIenable\fR is TRUE (the default) or not to be selectable if \fIenable\fR is FALSE.
.PP
The user is not able to select a non-selectable item using either the keyboard or mouse. The application programmer still can, of course.
.PP
See also: isSelectable().
.SH "void QListViewItem::setSelected ( bool s ) \fC[virtual]\fR"
Sets this item to be selected \fIs\fR is TRUE, and to not be selected if \fIo\fR is FALSE.
.PP
This function does not maintain any invariants or repaint anything - QListView::setSelected() does that.
.PP
See also: ownHeight() and totalHeight().
.SH "void QListViewItem::setText ( int column, const char * text ) \fC[virtual]\fR"
Sets the text in column \fIcolumn\fR to \fItext,\fR if \fIcolumn\fR is a valid column number and \fItext\fR is non-null.
.PP
If \fItext()\fR has been reimplemented, this function may be a no-op.
.PP
See also: text() and key().
.SH "void QListViewItem::setup () \fC[virtual]\fR"
This virtual function is called before the first time QListView needs to know the height or any other graphical attribute of this object, and whenever the font, GUI style or colors of the list view change.
.PP
The default calls widthChanged() and sets the item's height to the height of a single line of text in the list view's font. (If you use icons, multi-line text etc. you will probably need to call setHeight() yourself or reimplement this.).
.PP
Examples:
.(l
dirview/dirview.cpp
.)l
.PP
Reimplemented in QCheckListItem.
.SH "void QListViewItem::sortChildItems ( int column, bool ascending ) \fC[virtual]\fR"
Sorts the children of this item by the return values of key(\fIcolumn, ascending),\fR in ascending order if \fIascending\fR is TRUE and in descending order of \fIdescending\fR is FALSE.
.PP
Asks some of the children to sort their children. (QListView and QListViewItem ensure that all on-screen objects are properly sorted, but may avoid or defer sorting other objects in order to be more responsive.)
.PP
See also: key().
.SH "const char * QListViewItem::text ( int column ) const \fC[virtual]\fR"
Returns the text in column \fIcolumn,\fR or else 0.
.PP
The returned pointer must be copied or used at once so that reimplementations of this function are at liberty to e.g. return a pointer into a static buffer.
.PP
See also: key() and paintCell().
.PP
Reimplemented in QCheckListItem.
.SH "int QListViewItem::totalHeight () const"
Returns the total height of this object, including any visible children. This height is recomputed lazily and cached for as long as possible.
.PP
setOwnHeight() can be used to set the item's own height, setOpen() to show or hide its children, and invalidateHeight() to invalidate the cached height.
.PP
See also: height().
.SH "int QListViewItem::width ( const QFontMetrics & fm, const QListView * lv, int c ) const \fC[virtual]\fR"
Returns the number of pixels of width required to draw column \fIc\fR of listview \fIlv,\fR using the metrics \fIfm\fR without cropping. The list view containing this item may use this information, depending on the QListView::WidthMode settings for the column.
.PP
The default implementation returns the width of the bounding rectangle of the text of column \fIc.\fR
.PP
See also: listView(), widthChanged(), QListView::setColumnWidthMode() and QListView::itemMargin().
.SH "void QListViewItem::widthChanged ( int c=-1 ) const"
Call this function when the value of width() may have changed for column \fIc.\fR Normally, you should call this if text(c) changes. Passing -1 for \fIc\fR indicates all columns may have changed. For efficiency, you should do this if more than one call to widthChanged() is required.
.PP
See also:  width().
.SH "SEE ALSO"
.BR http://www.troll.no/qt/qlistviewitem.html
.SH COPYRIGHT
Copyright 1992-1997 Troll Tech AS.  See the LICENSE file included in
the distribution for a complete license statement.
.SH AUTHOR
Generated automatically from the source code.
